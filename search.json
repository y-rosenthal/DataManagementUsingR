[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Management With R",
    "section": "",
    "text": "Intro\nThis course covers many different topics related to the processing and management of data. For a quick overview of many of the topics see the “Topics” section in the Appendix.",
    "crumbs": [
      "Intro"
    ]
  },
  {
    "objectID": "0000017-introToQuarto-v001.html",
    "href": "0000017-introToQuarto-v001.html",
    "title": "1  Intro to Quarto",
    "section": "",
    "text": "Official into: https://quarto.org/docs/get-started/hello/rstudio.html\nMarkdown syntax: https://quarto.org/docs/authoring/markdown-basics.html",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to Quarto</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html",
    "href": "0000022-InstallingRPackages-v003.html",
    "title": "2  Intro to R packages",
    "section": "",
    "text": "2.1 What is CRAN?\nCRAN stands for the “Comprehensive R Archive Network”.\nR is free software that is supported by many different organizations. The official website for “R” is https://cran.r-project.org/. From this website you can download the “base R” software. This is also the official source of many things related to R. (NOTE that information about RStudio is NOT found on this website. RStudio is a program created by a for-profit company, Posit. The RStudio software is built on top of “base R”. The official website for RStudio is https://posit.co/)\nThe list of “officially recognized” R packages can be found here: https://cran.r-project.org/web/packages/available_packages_by_name.html From this page, you can get a lot more information about each of the different packages. To learn more about packages in general, click on the “packages” link located on this page https://cran.r-project.org/.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#what-is-a-cran-mirror",
    "href": "0000022-InstallingRPackages-v003.html#what-is-a-cran-mirror",
    "title": "2  Intro to R packages",
    "section": "2.2 What is a CRAN mirror?",
    "text": "2.2 What is a CRAN mirror?\nIt can cost a lot of money to maintain a popular website. Since R is a free program, the costs for hosting the offical website are divided among many of the organizations that have an interest in seeing R succeed. (Many of these organizations are educational institutions located around the world). Each of these organizations hosts a complete repository of the “base R” software as well as all of the R packages. All of the repositories together are known as CRAN, i.e. the “Comprehensive R Archive Network”. Because the repositories hosted by each organization have identical contents, the repositories are also known as “CRAN mirrors”. Whenever you install an R package (see install.packages below), the files for the package are downloaded from one of the CRAN mirror websites.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#install.packages-some_package",
    "href": "0000022-InstallingRPackages-v003.html#install.packages-some_package",
    "title": "2  Intro to R packages",
    "section": "2.3 install.packages( “SOME_PACKAGE” )",
    "text": "2.3 install.packages( “SOME_PACKAGE” )\nTo use a package you must first “install” the package with the install.packages function. install.packages downloads the package files from one of the CRAN mirror websites and installs them on your computer.\nYou only need to use install.packages on your computer once. After you’ve installed a package it will continue to be installed until you until you “remove” it from your computer with the function remove.packages().\nSee an example of installing the stringr package below. Pay special attention the the #comments in the code.\n\n# When calling install.packages, you must use \"quotes\" around the package name.\ninstall.packages(\"stringr\")   \n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\n# By default, install.packages will choose one of the CRAN mirror websites to \n# download the package from. The exact CRAN mirror website that it uses\n# is configured in your R software. However, if for some reason, it fails\n# to download from the default CRAN mirror website, you will need to \n# specify the exact CRAN mirror URLs in the repos argument as shown below.\n#\n# If you specify more than one website, install.packages will keep trying, \n# starting from the first one specified, until it is successful. The \n# following page contains the list of the CRAN mirror websites:\n#\n#    https://cran.r-project.org/mirrors.html\n#\n# It makes very little difference which mirror you choose. In order to \n# speed up the downloads it's recommended to choose a mirror that is \n# close to where you are located. The following command specifies the full\n# list of mirrors that are located in the USA.\n\ninstall.packages(\n  \"stringr\", \n  repos = c(\n    \"https://mirror.las.iastate.edu/CRAN/\",       # Iowa State University, Iowa\n    \"http://ftp.ussg.iu.edu/CRAN/\",               # Indiana University, Indiana\n    \"https://repo.miserver.it.umich.edu/cran/\", # University of Michigan\n    \"https://cran.wustl.edu/\",              # Washington University, Missouri\n    \"https://archive.linux.duke.edu/cran/\", # Duke University, NC\n    \"https://cran.case.edu/\",               # Case Western Reserve University, OH\n    \"https://ftp.osuosl.org/pub/cran/\",     # Oregon State University\n    \"http://lib.stat.cmu.edu/R/CRAN/\",    # Carnegie Mellon University, PA\n    \"https://cran.mirrors.hoobly.com/\",     # Hoobly Classifieds, PA\n    \"https://mirrors.nics.utk.edu/cran/\") # Nat. Inst. 4 Computational Sci, TN \n)\n\npackage 'stringr' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yrosenth\\AppData\\Local\\Temp\\RtmpWunnle\\downloaded_packages",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#help-for-the-package.",
    "href": "0000022-InstallingRPackages-v003.html#help-for-the-package.",
    "title": "2  Intro to R packages",
    "section": "2.4 Help for the package.",
    "text": "2.4 Help for the package.\nOnce you’ve installed the package you can access the help pages for the package with the following command:\n\nhelp(package=“SOME_PACKAGE”)\n\n\n##############################################################################.\n# To see the functions in the package use the following command\n##############################################################################.\nhelp(package=\"stringr\")\n\nTo see examples of how to use a specific function. Click on the “Run examples” link that appears at the bottom of the help page. Try this for the following functions in the stringr package:\n\nstr_trunc\nstr_split",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#using-a-package-without-loading-it.",
    "href": "0000022-InstallingRPackages-v003.html#using-a-package-without-loading-it.",
    "title": "2  Intro to R packages",
    "section": "2.5 Using a package without “loading” it.",
    "text": "2.5 Using a package without “loading” it.\nBelow you will learn how to “load” a package using the library and require functions. This functions make it easier to use a package. However, even before you “load” a package, you can still use it by specifying\nPACKAGE_NAME::FUNCTION_NAME(ARGUMENTS,GO,HERE) when you call the function.\nSee the example below:\n\n# After installing a package you can use the functions by specifying \n# the name of the package and the function as shown in the \n# example below. This example uses the str_trunc and the str_split\n# functions. Both of these functions are included in the stringr package.\n#\n# The str_trunc function \"truncates\" or \"chops off the end\" of long strings. \n# The str_split function splits up strings .\n#\n# See the documentation for more info about these functions:\n# help(package=\"stringr\")\n\n# Create a vector.\nsayings = c(\"roses are red, violets are blue\", \n            \"a stitch in time saves nine\")\n\n# Chop off each of the strings after in the vector after the 25th character\nstringr::str_trunc(sayings, width=25)\n\n[1] \"roses are red, violets...\" \"a stitch in time saves...\"\n\n# Split the words in each of the strings. This function returns a list.\nstringr::str_split(sayings, pattern=\" \")\n\n[[1]]\n[1] \"roses\"   \"are\"     \"red,\"    \"violets\" \"are\"     \"blue\"   \n\n[[2]]\n[1] \"a\"      \"stitch\" \"in\"     \"time\"   \"saves\"  \"nine\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#loading-packages---library-or-require",
    "href": "0000022-InstallingRPackages-v003.html#loading-packages---library-or-require",
    "title": "2  Intro to R packages",
    "section": "2.6 loading packages - library() or require()",
    "text": "2.6 loading packages - library() or require()\n\n2.6.1 library(SOME_PACKAGE)\n\n# In the example above, to run the functions we used the syntax\n# PACKAGENAME::FUNCTIONNAME(), e.g. stringr::str_trunc( ARGUMENTS GO HERE )\n#\n# At this point, if you try to run the function without the package name you\n# will get an error, e.g. str_trun( ARGUMENTS GO HERE ) \n#\n# Compare the command below with the similar command above.\n\n# ERROR - function str_trunc not found.\nstr_trunc(sayings, width=25)\n\nError in str_trunc(sayings, width = 25): could not find function \"str_trunc\"\n\n# ERROR - function str_trunc not found.\nstr_split(sayings, pattern=\" \")\n\nError in str_split(sayings, pattern = \" \"): could not find function \"str_split\"\n\n\nThe reason why you get an error in the code above is because, while the package was “installed” on your computer, R doesn’t know to look in that package for functions.\nThe library function, e.g. library(stringr), tells R to add the package to the list of packages that R looks through to find functions. This allows you to call functions in a package without specifying the package name. For example, after calling library(stringr) you may call any of the functions in the stringr package without needing to specify the word stringr.\n\n# you don't need quotes\nlibrary(stringr)   \n\n# You can now call any functions in the stringr package without \n# specifying stringr::\n\n# Now it works without prefixing the function calls with stringr::\nstr_trunc(sayings, width=25)\n\n[1] \"roses are red, violets...\" \"a stitch in time saves...\"\n\nstr_split(sayings, pattern=\" \")\n\n[[1]]\n[1] \"roses\"   \"are\"     \"red,\"    \"violets\" \"are\"     \"blue\"   \n\n[[2]]\n[1] \"a\"      \"stitch\" \"in\"     \"time\"   \"saves\"  \"nine\"  \n\n\n\n\n2.6.2 install.packages vs library\nAs we said above, you only need to call install.packages(SOME_PACKAGE) once. Even if you reboot your computer, the package will still be installed.\nHowever, you need to call library(SOME_PACKAGE) every time you restart R if you want to be able to use the functions in the package without specifying the package name every time you call a function.\n\n\n2.6.3 require(SOME_PACKAGE)\nThere is another function, require(SOME_PACKAGE), that basically accomplishes the same thing as the library(SOME_PACKAGE) function (the differences between library and require are explained below). You may use either library or require. You never need to use both. For example, the commands below are an alternative to the commands shown above.\n\n#  Just like with library, after calling require(stringr) you no longer\n#  need to specify stringr:: before calling a function.\n\n#require(stringr)\n\n#str_trunc(c(\"roses are red, violets are blue\", \"a stitch in time saves nine\"),\n#              width = 25)\n\n# Now you can continue to call any functions from the stringr package \n# without specifying stringr::\n\n\n\n2.6.4 Calling library or require more than once is fine.\nIn case you were wondering, if you call library(SOME_PACKAGE) or require(SOME_PACKAGE) once and then call one of these functions again, nothing happens the 2nd time. No errors or warnings are generated.\n\n\n2.6.5 The difference between library and require\nThe difference between library(SOME_PACKAGE) vs require(SOME_PACKAGE) is regarding the return value of library vs require.\nBy default library and require do not display their return values - they have “invisible” return values. However, while the return values are not displayed, they do exist. To see an “invisible” return value you can either capture the return value in a variable. For example:\n\n# The return value of library is the vector of packages that have have \n# already been \"loaded\". Note that there are some packages that are \n# automatically loaded when you start R without you needing to \n# run the library/require command.\n\nreturnValue = library(stringr)\n\n# show the names of the loaded packages\nreturnValue\n\n[1] \"stringr\"   \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     \"datasets\" \n[7] \"methods\"   \"base\"     \n\n# The require function returns a very different value.\n# The require function returns TRUE if the packages was loaded\n# successfully and returns FALSE otherwise. \n\nreturnValue = require(stringr)\nreturnValue\n\n[1] TRUE\n\n# One common reason for a package NOT loading successfully\n# is if the package hadn't been installed yet (using install.packages).\n# For example, the \"glue\" package contains some useful functions but we\n# haven't installed the glue package yet. Therefore the following\n# call to require will return FALSE. \n\nreturnValue = require(glue)   # FALSE - we haven't installed glue yet\n\nLoading required package: glue\n\n\n\n\n2.6.6 See invisible return values by using (parentheses)\n\n# Note you can also see the \"invisible\" return values by simply\n# surrounding the function calls with (parentheses). For example\n\nlibrary(stringr)   # return value is invisible\nrequire(stringr)   # return value is invisible\n\n(library(stringr))   # use (parentheses) to see the return value\n\n[1] \"glue\"      \"stringr\"   \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n(require(stringr))   # use (parentheses) to see the return value\n\n[1] TRUE\n\n\n\n\n2.6.7 installing and loading the package in one line of code\nSome packages can take a while to install. Therefore you usually don’t want to install a package more than once. You can use the return value from require to write code that only installs the package if the call to require fails. For example\nNote that you can run several R commands in a single line by putting a semicolon between those commands. Similarly you can write a function on a single line. Therefore the following example shows how you can use a single line of code to install the package only if necessary and to then load the package. This type of code is very convenient to put at the top of .R files.\n\n# First try to load stringr with the require function.\n# If stringr is not installed, then require will return FALSE.\n#\n# Only if require returns FALSE will stringr be installed.\n# After it is installed the require function is called again to make sure \n# that the package is loaded.\n\nif(!require(stringr)){install.packages(\"stringr\");require(stringr)}\n\n# Now you should be able to use any function from stringr without specifying\n# stringr::\nstr_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#unloading-and-removing-packages",
    "href": "0000022-InstallingRPackages-v003.html#unloading-and-removing-packages",
    "title": "2  Intro to R packages",
    "section": "2.7 unloading and removing packages",
    "text": "2.7 unloading and removing packages\nIt’s not usually necessary, but it is possible to unload packaes or remove packages entirely from your computer.\nYou may want to unload a package (without uninstalling it) if the name of a function in the package is interfering with another package that has a function with the same name.\nYou may want to uninstall a package to make room on your hard drive.\n\n2.7.1 detach(“package:PACKAGE_NAME”, unload=TRUE)\nThe “opposite” of libarary(SOME_PACKAGE) and require(SOME_PACKAGE) is detach(“package:PACKAGE_NAME”, unload=TRUE). See the documentation for more info : ?detach To call it you must specify the word “package” before the actual package name. See the example below:\n\n###################################.\n# Package is already loaded\n###################################.\n\n# We loaded stringr above (with library or require) so this works\nstr_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\n# and so does this ... (but it's unnecessary to specify the package)\nstringr::str_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\n###################################.\n# Detaching the package ...\n###################################.\ndetach(package:stringr, unload=TRUE)\n\n# Since we detached the package the function will not work without \n# specifying the name of the package:\n\n# This doesn't work now\nstr_trunc(\"An apple a day keeps the doc away\", 18)\n\nError in str_trunc(\"An apple a day keeps the doc away\", 18): could not find function \"str_trunc\"\n\n# However, this does:\nstringr::str_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\n###################################.\n# loading the package again ...\n###################################.\n\n# loading the package again ...\nlibrary(stringr)  # or reqruire(stringr)\n\n# once again, both commands work:\nstr_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\nstringr::str_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\n\n\n\n2.7.2 remove.packages(SOME_PACKAGE)\nThe “opposite” of install.packages(SOME_PACKAGE) is remove.packages(SOME_PACKAGE) NOT uninstall! See the documentation for more info : ?remove.packages\n\n# What is CRAN?\n# \n# See this - &lt;https://www.youtube.com/watch?v=GM6MCBkVNtQ&gt;",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#vignettes",
    "href": "0000022-InstallingRPackages-v003.html#vignettes",
    "title": "2  Intro to R packages",
    "section": "2.8 vignettes",
    "text": "2.8 vignettes\nVignettes are tutorials on some of a package. These are often a good source of information. To see vignettes for a package that you haven’t installed, look at the “Vignettes” listing on its CRAN page.\nYou can find the CRAN page for a package here and then search for “vignettes” on the page.\n\nhttps://cran.r-project.org/web/packages/available_packages_by_name.html\n\nThe following is the page for the stringr package: &gt; https://cran.r-project.org/web/packages/stringr/index.html\nThe following are some vignettes listed on that page:\n\nhttps://cran.r-project.org/web/packages/stringr/vignettes/from-base.html\n\n\nhttps://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html\n\n\nhttps://cran.r-project.org/web/packages/stringr/vignettes/stringr.html",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#packages-from-other-sources",
    "href": "0000022-InstallingRPackages-v003.html#packages-from-other-sources",
    "title": "2  Intro to R packages",
    "section": "2.9 Packages from other sources",
    "text": "2.9 Packages from other sources\nR packages can be created by anyone and then be submitted to be hosted on CRAN. The official procedures for doing so can be found by reviewing the information here https://cran.r-project.org/submit.html. There are also books and other sources of information about how to create R packages and submit them to CRAN.\nHowever, a package doesn’t have to be on CRAN to be used. Many software developers create R packages that are distributed in other ways.\ngithub.com is a website that hosts code “repositories”. Software developers often post code on github.com that may be freely downloaded and installed. Often developers of R packages first make the package available on github before the package becomes available on CRAN. Sometimes the package never becomes available on CRAN. Often a package is hosted on both github and CRAN. Often github contains the “bleeding edge” version of\na package while CRAN hosts packages that have been more fully tested.\nOther sites that are similar to github.com are bitbucket, gitlab and others.\nIf you come across a package that is on github, bitbucket, etc that you’d like to install you can do so\nThe “devtools” and “remotes” packages (that are available on CRAN) contain functions, similar to install.packages, that allow you to install R packages directly from repositories such as github, etc. It’s pretty easy to find information online about how to use these packages to install R packages from github, bitbucket, etc.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html",
    "href": "0000055-workingWithFiles.html",
    "title": "3  Working with files",
    "section": "",
    "text": "3.1 Reference files\nUse this link to download a set of files in a ZIP file for use with these lessons.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#a-directory-means-the-same-thing-as-a-folder",
    "href": "0000055-workingWithFiles.html#a-directory-means-the-same-thing-as-a-folder",
    "title": "3  Working with files",
    "section": "3.2 A “directory” means the same thing as a “folder”",
    "text": "3.2 A “directory” means the same thing as a “folder”\nThe terms “directory” and “folder” mean exactly the same thing - they’re just two different words for places where we store files on a computer. The word “directory” came first, used in early computer systems in the 1960s. It comes from the word’s original meaning of an organized listing or index, like a phone directory. In the 1980s, when computers started using visual interfaces with icons, Apple introduced the word “folder” because it was more intuitive for regular users - it referenced something familiar that people used to organize paper documents. Today, both terms are used interchangeably, with “folder” being more common in everyday use and “directory” often preferred in technical contexts.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#what-is-a-full-path",
    "href": "0000055-workingWithFiles.html#what-is-a-full-path",
    "title": "3  Working with files",
    "section": "3.3 What is a full path?",
    "text": "3.3 What is a full path?\nA full path is the complete “address” of a file on your computer. Just like two people named Sarah Johnson can live at different addresses (one in Chicago, one in New York), you can have two files with the same name in different directories (i.e. folders).\nFor example, the following are the “full paths” for two different files with the same name, “budget.xlsx”. The full path helps you tell the two files apart by showing exactly where each file is located. Each name between the forward slashes is a folder.\n\nFull path 1: /home/Joe/work/budget.xlsx\nThis file is named “budget.xlsx”. It is in the “work” folder, which is in the folder named “Joe” which is in the “home” folder.\nFull path 2: /home/Sue/personal/budget.xlsx\nThis file is also named “budget.xlsx”. It is in the “personal” folder, which is in the folder named “Sue” which is in the “home” folder, which is in the folder at the very top of the folder hierarchy on the computer.\n\nA “full path” always starts with a “/”.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#difference-between-a-full-path-and-a-relative-path",
    "href": "0000055-workingWithFiles.html#difference-between-a-full-path-and-a-relative-path",
    "title": "3  Working with files",
    "section": "3.4 Difference between a “full path” and a “relative path”",
    "text": "3.4 Difference between a “full path” and a “relative path”\nA “full path” always starts with a “/”.\nLater, we will study another type of file path called a relative path. A realtive path is simiilar to a “full path” but a relative path does NOT start with a “/”. We’ll learn more about relative paths later and how they differ from full paths.\n\n3.4.1 Mac and Linux style paths VS Windows style paths\nMac and Linux systems use forward slashes (/) as path separators - i.e.  see the paths above, eg. /home/Joe/work/budget.xlsx\nWindows traditionally uses backslashes (\\) as separators, like this:\n\\\\Users\\\\Joe\\\\work\\\\budget.xlsx\nNote that R understands the Linux/Mac style paths (with forward slashes) even on Windows. It is recommended therefore to always use Linux/Mac style paths in R code so that the code will work on both Linux/Mac and on Windows.\nHowever, since backslashes have a special meaning in R if you need to use Windows-style paths in R, you must use double backslashes (\\), e.g.\ndir_tree(\"\\\\Users\\\\Joe\\\\work\")\n\n\n3.4.2 Windows drive letters\nWindows systems use letters (like C:, D:) at the start of paths to represent different drives or storage devices. The C: drive is typically your main hard drive where Windows is installed. Other letters might be additional hard drives, USB drives, or network drives.\nFor example:\nC:\\Users\\username\\Documents\\file.txt (your main hard drive)\nD:\\Backups\\file.txt (maybe an external drive)\nE:\\Photos\\vacation.jpg (could be a USB drive)\nMac and Linux systems don’t use drive letters. Instead, all hard drives are “mounted” as folders within the single root directory (/). For example, a USB drive might appear at /media/username/USB_DRIVE/. When working in R on Windows, you still need to include the drive letter at the start of full paths, like: “C:/Users/username/Documents/file.txt” (using forward slashes) or \"C:\\Users\\username\\Documents\\file.txt\" (using double backslashes)",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#getwd-and-setwd",
    "href": "0000055-workingWithFiles.html#getwd-and-setwd",
    "title": "3  Working with files",
    "section": "3.5 getwd() and setwd()",
    "text": "3.5 getwd() and setwd()\ngetwd() shows you your current working directory (the folder R is currently working in). Think of it as asking R “where am I right now?” When you try to read or write files without specifying a full path, R will look in this directory. For example, if you run getwd(), it might show something like: “/home/username/projects” (on Mac/Linux) or “C:/Users/username/Documents” (on Windows)\nsetwd() changes your current working directory to a new location. Think of it as telling R “go to this folder.” You need to give it the path of the directory you want to switch to. For example:\nsetwd(\"/home/username/projects\")  # Mac/Linux style\nsetwd(\"C:/Users/username/Documents\")  # Windows style with forward slashes\nIf you give it an invalid path, it will give you an error message.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#list.files-and-dir",
    "href": "0000055-workingWithFiles.html#list.files-and-dir",
    "title": "3  Working with files",
    "section": "3.6 list.files() and dir()",
    "text": "3.6 list.files() and dir()\nThere are two main functions to list files and directories in R: list.files() shows you all files (and folders) in a directory. If you don’t specify a path, it shows the contents of your current working directory. dir() does exactly the same thing as list.files() - they’re just two names for the same function. Some people prefer dir() because it’s shorter to type. Basic usage:\nist.files()  # list everything in current directory\nlist.files(\"/home/username/data\")  # list everything in a specific directory\nlist.files(pattern = \".csv\")  # list only files ending in .csv\nYou can also use these functions with additional options to get more information or filter the results.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#fs-package",
    "href": "0000055-workingWithFiles.html#fs-package",
    "title": "3  Working with files",
    "section": "3.7 fs package",
    "text": "3.7 fs package\nThe fs package provides modern file system operations in R. It makes working with files and folders more consistent across operating systems (Windows, Mac, Linux) and safer than base R functions. Think of it as a toolkit for handling files - copying, moving, creating directories, checking paths, and viewing directory structures. All functions start with clear prefixes like file_ or dir_ which makes them easy to remember and use. Install it with: install.packages(“fs”)\n\n3.7.1 dir_tree\ndir_tree() from the fs package displays a directory structure in a visual tree format, similar to how you might see folders indented in a file explorer. It shows the hierarchy of files and folders using lines and indentation. For example, if you run:\nfs::dir_tree(\"my_project\")\nIt might show something like: Copymy_project ├── data │ ├── raw.csv │ └── clean.csv ├── scripts │ ├── analysis.R │ └── cleaning.R └── README.md\nThis makes it easy to visualize how your files and folders are organized. The vertical and horizontal lines show how everything connects, and each level of folders is indented further to the right.\n\n\n3.7.2 Other functions in the fs package\nThe fs package provides modern, user-friendly functions for working with files. Here are some commonly used ones:\nfs::dir_ls() - Lists directory contents (similar to list.files() but with better defaults)\nfs::dir_create() - Creates directories, can create multiple levels at once\nfs::file_copy() - Copies files from one location to another\nfs::file_move() - Moves files from one location to another\nfs::file_delete() - Deletes files\nfs::file_exists() - Checks if files exist\nfs::path() - Builds file paths in a safe, platform-independent way. For example:\nfs::path(“data”, “raw”, “myfile.csv”) # builds “data/raw/myfile.csv”\nNote: You need to install and load the fs package to use these (install.packages(“fs”) and library(fs)). The fs package makes working with files more consistent across operating systems and helps avoid common errors.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#read_csv-and-write_csv",
    "href": "0000055-workingWithFiles.html#read_csv-and-write_csv",
    "title": "3  Working with files",
    "section": "3.8 read_csv and write_csv",
    "text": "3.8 read_csv and write_csv\nread_csv() and write_csv() from the readr package are the standard functions for working with CSV files in modern R: read_csv() loads a CSV file into R as a data frame:\ndata &lt;- read_csv(\"myfile.csv\")\nwrite_csv() saves a data frame to a CSV file:\nwrite_csv(data, \"output.csv\")\nThese functions are faster and have better defaults than the older read.csv() and write.csv() functions from base R. They automatically handle common issues like string encoding and they don’t add row numbers to your output files.\nYou’ll need the readr package installed and loaded to use them: library(readr) (though readr is automatically loaded if you use the tidyverse).",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#readwrite-excel-files",
    "href": "0000055-workingWithFiles.html#readwrite-excel-files",
    "title": "3  Working with files",
    "section": "3.9 Read/Write Excel files",
    "text": "3.9 Read/Write Excel files\nTo work with Excel files in R, you’ll need either the readxl package (for reading) or the writexl package (for writing): Reading Excel files:\nlibrary(readxl)\ndata &lt;- read_excel(\"myfile.xlsx\")\n\n# For specific sheet: \ndata &lt;- read_excel(\"myfile.xlsx\", sheet = \"Sheet2\")\nWriting Excel files:\nlibrary(writexl)\nwrite_xlsx(data, \"output.xlsx\")\nNote that readxl comes with the tidyverse, but writexl needs to be installed separately. These functions work with both newer .xlsx and older .xls files.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#reading-fixed-width-field-files",
    "href": "0000055-workingWithFiles.html#reading-fixed-width-field-files",
    "title": "3  Working with files",
    "section": "3.10 Reading fixed width field files",
    "text": "3.10 Reading fixed width field files\nUse read_fwf() from the readr package (part of tidyverse) to read fixed-width files where each column takes up a specific number of characters. You specify the width of each field:\nlibrary(readr)\n\n# Define the widths of each column\ndata &lt;- read_fwf(\"myfile.txt\", \n                 fwf_widths(c(5, 10, 15),  # each number is the width of a column\n                           col_names = c(\"id\", \"name\", \"address\")))\n\n# Or specify exact positions\ndata &lt;- read_fwf(\"myfile.txt\",\n                 fwf_positions(start = c(1, 6, 16),  # where each column starts\n                             end = c(5, 15, 30),     # where each column ends\n                             col_names = c(\"id\", \"name\", \"address\")))\nHere’s a simple example. Imagine you have a file named employees.txt that looks like this:\n12345John Smith           123 Main St          \n98765Mary Johnson         456 Oak Ave          \n54321Bob Wilson          789 Pine Rd\nEach line represents an employee record where:\n\nEmployee ID takes exactly 5 characters\nName takes exactly 20 characters (including spaces)\nAddress takes exactly 20 characters\n\nHere’s how to read it:\nrCopylibrary(readr)\n\nemployees &lt;- read_fwf(\"employees.txt\",\n                     fwf_widths(c(5, 20, 20),  # width of each column\n                               col_names = c(\"id\", \"name\", \"address\")))\nThe fwf_widths(c(5, 20, 20)) tells R:\nRead first 5 characters as ‘id’ Read next 20 characters as ‘name’ Read next 20 characters as ‘address’\nThe resulting data frame would look like this:\n# A tibble:\n#      id  name                address            \n#   &lt;chr&gt;  &lt;chr&gt;              &lt;chr&gt;              \n# 1 12345  John Smith         123 Main St        \n# 2 98765  Mary Johnson       456 Oak Ave        \n# 3 54321  Bob Wilson         789 Pine Rd",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#capture-output-of-r-commands",
    "href": "0000055-workingWithFiles.html#capture-output-of-r-commands",
    "title": "3  Working with files",
    "section": "3.11 Capture output of R commands",
    "text": "3.11 Capture output of R commands\n\n3.11.1 capture.output(someCommand, file=“someFile.txt”)\nTo save or “capture” the output from an R command, you can use the capture.output() function. It lets you store text output in a file or in a character vector:\n# Save to a file:\ncapture.output(summary(mydata), file = \"output.txt\")\n\n# Save to a variable:\nmy_output &lt;- capture.output(summary(mydata))",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#sinksomefile-sink",
    "href": "0000055-workingWithFiles.html#sinksomefile-sink",
    "title": "3  Working with files",
    "section": "3.12 sink(“someFile”), sink()",
    "text": "3.12 sink(“someFile”), sink()\nThe sink() function is another option - it redirects all output to a file until you turn it off:\nsink(\"output.txt\")\nprint(summary(mydata))\nsink()  # turns off the redirection",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000075-whatIsJsonData.html",
    "href": "0000075-whatIsJsonData.html",
    "title": "4  Intro to JSON data",
    "section": "",
    "text": "4.1 What is JSON?\nJSON is pronounced like the name “Jason” or as “j sahn” - either is Acceptable. JSON is a “text” format for storing and distributing data. The following small example shows information about the USA Postal Code (“i.e. zip code”) 60527. Many more examples appear throughout this document.\nA “text” format means that it is written all in ASCII or Unicode. ASCII and Unicode are standard technologies; every computer system has built in tools for working with ASCII and Unicode data. Therefore, JSON can be read and used on any computer system with a simple text editor without the need to install special software to read it. CSV formats are similar in this respect. However, while CSV is suited specifically to storing information that can be arranged into “rows and columns”, the JSON data format is much more flexible in how the data is arranged.\nJSON was originally developed for the JavaScript language. However, today it has become a popular format that is used in many areas of technology. You can process JSON data with R or any other programming language. The name JSON stands for “JavaScript Object Notation:” - but seriously – you do NOT need to know ANY JavaScript to make use of JSON data. Unfortunately, many resources for learning JSON assume knowledge of JavaScript. That really isn’t necessary if you are using JSON in another language. This document describes JSON for people who DO NOT know JavaScript.",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to JSON data</span>"
    ]
  },
  {
    "objectID": "0000075-whatIsJsonData.html#what-is-json",
    "href": "0000075-whatIsJsonData.html#what-is-json",
    "title": "4  Intro to JSON data",
    "section": "",
    "text": "{\n    \"post code\": \"60527\",\n    \"country\": \"United States\",\n    \"places\": [{\n            \"place name\": \"Willowbrook\",\n            \"latitude\": \"41.7447\",\n            \"longitude\": \"-87.9334\",\n            \"state\": \"Illinois\"\n        },\n        {\n            \"place name\": \"Hinsdale\",\n            \"latitude\": \"41.7447\",\n            \"longitude\": \"-87.9334\",\n            \"state\": \"Illinois\"\n        }\n    ]\n}",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to JSON data</span>"
    ]
  },
  {
    "objectID": "0000075-whatIsJsonData.html#some-examples-of-json-data",
    "href": "0000075-whatIsJsonData.html#some-examples-of-json-data",
    "title": "4  Intro to JSON data",
    "section": "4.2 Some Examples of JSON Data",
    "text": "4.2 Some Examples of JSON Data\nThe full rules of how to create a JSON file are listed later. For now, it may help to see some typical examples of what JSON data looks like. The exact explanations of how to format a JSON file appear below the examples.\n\n4.2.1 EXAMPLE 1 - storing the contents of a company “org chart” in JSON format:\nThe following is an “organization chart” for a company. This is NOT in JSON format. One possible JSON format of the data appears below. The chart shows that Sue is the CEO. Frank and Anne report to Sue. Bob, Lisa and Joe report to Frank. etc.\n         Widgets R Us (founded 2022)\n \n                 ---------------Sue (CEO) ------------\n                 |                                   |\n                 |                                   |\n         --Frank (Dir of Operations)---         -----Anne (CFO)-----\n         |             |              |         |                  |\n         |             |              |         |                  |\n         Bob          Lisa          Joe        Pat (CPA)         Pete\n                       |\n                      Larry\n\nONE POSSIBLE JSON ARRANGEMENT OF THIS DATA IN JSON FORMAT\nNote that the JSON shown below repeats some data (i.e. the employee names are repeated in both the particular section for that employee and in the list of “direct reports” for that employee’s mananger). There are other JSON organizations of this data that would not require repeating any data. However, the goal now is not to debate different alternative JSON representations, but rather to give you a flavor of what JSON looks like in general.\n         {\n             \"company name\": \"Widgets R Us\",\n             \"founded\": 2022,\n             \"employees\": [\n                 {\n                     \"name\": \"Sue\",\n                     \"title\": \"CEO\",\n                     \"directReports\": [\"Frank\", \"Anne\"]\n                 },\n                 {\n                     \"name\": \"Frank\",\n                     \"title\": \"Director of Operations\",\n                     \"directReports\": [\"Bob\",\"Lisa\",\"Joe\"]\n                 },\n                 {\n                     \"name\": \"Anne\",\n                     \"title\": \"CFO\",\n                     \"directReports\": [\"Pat\",\"Pete\"]\n                 },\n                 {\n                     \"name\": \"Bob\"\n                 },\n                 {\n                     \"name\": \"Lisa\",\n                     \"directReports\": [\"Larry\"]\n                 },\n                 {\n                     \"name\": \"Joe\"\n                 },\n                 {\n                     \"name\": \"Larry\"\n                 },\n                 {\n                     \"name\": \"Pat\",\n                     \"title\": \"accountant\",\n                     \"certified\": true\n                 },\n                 {\n                     \"name\": \"Pete\",\n                     \"title\": \"accountant\",\n                     \"certified\": false\n                 }\n             ]\n         }\n\n\n\n4.2.2 EXAMPLE 2 - JSON data - books for sale on a website\nThe following example shows a JSON file that contains information about some books.\n     [\n       {\n         \"hardcover\": false,\n         \"title\": \"How to program in R\",\n         \"copyright\": 2017,\n         \"publisher\": {\n           \"pubName\": \"Books R Us\",\n           \"pubWebsite\": \"https://booksrus.com/\"\n         },\n         \"categories\": [\"R\",\"technology\",\"statistics\"],\n         \"author\" : \n           {\n             \"first\": \"Robert\",\n             \"last\": \"Rosen\"\n           }\n       },\n       {\n         \"hardcover\": false,\n         \"title\": \"Python For Perfectionists\",\n         \"copyright\": 2018,\n         \"categories\": [\"Python\", \"technology\"],\n         \"author\" : \n           {\n             \"title\": \"Dr.\",\n             \"first\": \"Sue\",\n             \"last\": \"Smith\"\n           }\n       },\n       {\n         \"hardcover\": true,\n         \"title\": \"Cooking For Programmers\",\n         \"copyright\": 2018,\n         \"categories\": [\"cooking\"],\n         \"author\" : \n           {\n             \"first\": \"Joe\",\n             \"middle\": \"J\",\n             \"last\": \"Johnson\"\n           }\n       }\n     ]",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to JSON data</span>"
    ]
  },
  {
    "objectID": "0000080-editingAndValidatingJsonFiles.html",
    "href": "0000080-editingAndValidatingJsonFiles.html",
    "title": "5  Creating, editing and validating JSON files",
    "section": "",
    "text": "5.1 USING A JSON VALIDATOR TOOL\nAnother way to determine if a JSON file is “valid” is to copy the contents into a JSON validation service such as https://jsonlint.com/. Try doing so with the JSON examples shown above. If you paste one of them into https://jsonlint.com/ and press the “Validate JSON” button, you should see “valid JSON” in the Results section.",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Creating, editing and validating JSON files</span>"
    ]
  },
  {
    "objectID": "0000080-editingAndValidatingJsonFiles.html#extra-whitespace-in-json-is-ignored-i.e.-spaces-tabs-and-newlines",
    "href": "0000080-editingAndValidatingJsonFiles.html#extra-whitespace-in-json-is-ignored-i.e.-spaces-tabs-and-newlines",
    "title": "5  Creating, editing and validating JSON files",
    "section": "5.2 EXTRA WHITESPACE IN JSON IS IGNORED (i.e. spaces, tabs and newlines)",
    "text": "5.2 EXTRA WHITESPACE IN JSON IS IGNORED (i.e. spaces, tabs and newlines)\nFormatting JSON files with spaces, tabs and newlines to clearly show the structure of the data is highly recommended. However, strictly speaking, whitespace (i.e. spaces, tabs and newlines) that does not appear between quotes do not affect the “validity” of the JSON. For example, the following would also be a valid JSON representation of the data from the last example. Of course, spaces that appear between quotes, such as “Books R Us” are not ignored.\nThe following IS valid JSON (but don’t do this):\n[{\"hardcover\": false,\"title\": \"How to Program in R\"\n,\"copyright\":2017,\"publisher\": {\"pubName\": \"Books R Us\",\"pubWebsite\":\n\"https://booksrus.com/\"},\"categories\":\n[\"R\",\"technology\",\"statistics\"],\"author\" :{\"first\": \"Robert\",\"last\":\n\"Rosen\"}},{\"hardcover\": true,\"title\": \"Python For Perfectionists\",\"copyright\":\n2018,\"categories\": [\"Python\", \"technology\"],\"author\" :{\"title\": \"Dr.\",\"first\":\n\"Sue\",\"last\": \"Smith\"}},{\"hardcover\": true,\"title\": \"Cooking For Programmers\",\"copyright\":\n2018,\"categories\": [\"cooking\"],\"author\" :{\"first\":\n\"Joe\",\"middle\": \"J\",\"last\": \"Johnson\"}}]\nNote that any “quoted information” must all appear on one line. For example, the quoted title “How to Program in R” appears at the very end of the fist line of the JSON shown above. If the title were split between the 1st and 2nd lines, the JSON would NOT be valid.\nRemoving all the unnecessary whitespace (spaces, tabs and newlines) from a JSON file is known as “minifying” the JSON file. Sometimes JSON files are intentionally “minified”. Specifically, this often is done to reduce the amount of data that needs to be transferred when JSON data is sent from one computer to another via an API. For right now, don’t worry about APIs. We will cover APIs very soon.\nMost JSON editors have features for automatically “prettifying” the JSON file so that it is indented properly. For example, in VSCode you can press Shift + Alt + F (Windows) or Shift + Option + F (Mac) to format a JSON document. See this page (or search online for others) for more tips on using VSCode to edit JSON documents: https://linuxpip.org/vscode-format-json/",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Creating, editing and validating JSON files</span>"
    ]
  },
  {
    "objectID": "0000085-jsonDataTypes.html",
    "href": "0000085-jsonDataTypes.html",
    "title": "6  DATA TYPES IN JSON",
    "section": "",
    "text": "6.1 “PRIMATIVE” (or SIMPLE) JSON DATATYPES (string, number, boolean, null)",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>DATA TYPES IN JSON</span>"
    ]
  },
  {
    "objectID": "0000085-jsonDataTypes.html#primative-or-simple-json-datatypes-string-number-boolean-null",
    "href": "0000085-jsonDataTypes.html#primative-or-simple-json-datatypes-string-number-boolean-null",
    "title": "6  DATA TYPES IN JSON",
    "section": "",
    "text": "Each individual piece of data in a JSON file must be one of the following data types: string, number, boolean, null. Technically a file is a valid JSON file if it contains just a single number, a single string, a single true or false or a single null. Practically speaking though, most JSON files arrange multiple pieces of data into objects and arrays as described in the next section.\n\nThe simple (or primative) datatypes are:\n \n   - \"string\": string is just another way of saying \"character\" data.\n               Strings in JSON must be enclosed in \"double quotes\" (i.e. quotation marks).\n               You may NOT use 'single quotes' (i.e. apostrophes) to enclose strings.\n               Strings may contain the following \"backslash escape sequences\", i.e.\n               characters preceded by a backslash:\n \n               \\\"  -  Double quote                \\\\  -  Backslash\n               \\/  -  Forward slash               \\b  -  Backspace\n               \\f  -  Form feed                   \\n  -  Newline\n               \\r  -  Carriage return             \\t  -  Tab\n\n               \\u  - followed by four hexadecimal digits indicates the\n                     Unicode character with the specified \"code point\". For\n                     example, \\u05D0 represents a Hebrew letter Aleph. Here are\n                     all codepoints for the Hebrew alphabet:\n                     https://unicodeplus.com/block/0590 (for more info see:\n                     https://developer.mozilla.org/en-US/docs/Glossary/Code_point)\n \n   - number: 123 and 123.45 are both valid numbers. Do not put quotes around\n             numbers. A number with quotes around it is considered a \"string\". Software\n             that processes the JSON will not associate a numeric value with numbers that\n             have \"quotes\" around them.\n\n   - boolean: boolean is just another way of saying \"logical\" data. A boolean\n              value can be either true or false. The words true/false must be lowercase.\n              Do not enclose the true and false in quotes. A true or false with quotes around\n              it is considered a \"string\".\n\n   - null: A value that is null is considered non-existant. For example, the\n           following JSON is used to represent some data about the ACME Shipping\n           Company. Notice that some employees have a middle name and some don't. The\n           ones who don't have a middle name have a value of null for the middle name.\n\n               {\n                 \"company\": \"ACME Shipping Company\",\n                 \"employees\": [ {\"first\": \"Joe\",     \"middle\": null,     \"last\": \"Smith\"},\n                                {\"first\": \"Sheila\",  \"middle\": null,     \"last\": \"Cohen\"},\n                                {\"first\": \"Jack\",    \"middle\": \"Edgar\",  \"last\": \"Jones\"} ]\n               }\n\n           Note that another way to indicate that an employee doesn't have a\n           middle name is just to leave out the middle name for that employee.\n           For example, the following is also valid JSON:\n\n               {\n                 \"company\": \"ACME Shipping Company\",\n                 \"employees\": [ {\"first\": \"Joe\",                          \"last\": \"Smith\"},\n                                {\"first\": \"Sheila\",                       \"last\": \"Cohen\"},\n                                {\"first\": \"Jack\",     \"middle\": \"Edgar\",  \"last\": \"Jones\"} ]\n               }\n\n           The choice of whether to use null or to simply leave out the data is\n           a choice made by the people who design the data format. Either are\n           valid choices. As mentioned above, the exact \"spacing\" of the data does\n           not affect the validity of the JSON file. The spacing is very useful\n           though to make the file easier to read.",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>DATA TYPES IN JSON</span>"
    ]
  },
  {
    "objectID": "0000085-jsonDataTypes.html#complex-data-types---objects-and-arrays",
    "href": "0000085-jsonDataTypes.html#complex-data-types---objects-and-arrays",
    "title": "6  DATA TYPES IN JSON",
    "section": "6.2 COMPLEX DATA TYPES - “OBJECTS” and “ARRAYS”",
    "text": "6.2 COMPLEX DATA TYPES - “OBJECTS” and “ARRAYS”\n“Objects” and “arrays” are two different “complex data types” that allow you to organize multiple data values in different ways.\n\n6.2.1 OBJECTS\nA JSON “object” is surrounded by a single set of {curly braces}. Inside the curly braces are zero or more “name”:value pairs (also known as “key”:value pairs).\nFor example, the following is a valid JSON object:\n                 {\n                     \"recipeName\": \"Midnight Chocolate Cake\",\n                     \"submittedBy\": \"Jack Sep 1, 2022 9:00am\",\n                     \"caloriesPerServing\": 450,\n                     \"dietMenu\": false,\n                     \"prepTime\": \"2 hours 45 minutes\"\n                 }\nNotice a few things about this example:\n\nThe data for the “object” is surrounded by { curly braces }.\nEach line inside the {curly braces} contains a “name”:value pair (AKA “key”:value pair).\nNote that it is NOT required that each “name”:value pair be on a separate line but it is considered good practice to make the files more readable.\nThe “name” in each “name”:value pair (AKA the “key” in each “key”:value pair) is enclosed in quotes.\nIt’s not uncommon to see JSON files that incorrectly leave out the quotes around the names. This is wrong. While these files may sometimes still be able to be processed correctly by software that accounts for this mistake, you should always make sure to include the “quotes” around the “names” in JSON files that you create yourself.\nNote that technically the “name” (AKA “key”) in a name value pair may contain spaces. However, including spaces in names can sometimes cause problems when using software to process a JSON file. Therefore it is recommended not to use spaces in names. The example above uses “camelCase” for the names to clearly identify each word in a multiWord name.\nThe value in each “name”:value pair may be any valid JSON datatype. The different “name”:value pairs in the example above use different data types. For example “Midnight Chocolate Cake” is a string, 450 is a number and false is a boolean value. Note that “45 minutes” is a string and not a number.\nThe “name”:value pairs are separated from each other with commas. Note that there is NO comma after the last “name”:value pair in the object (i.e. no comma after “dietMenu”: false). Extra commas and missing commas are a common source of errors that can be hard to find.\nThe same “name” may not appear twice in a single object. For example, the following is NOT valid!\n{ “thing”: “ball”, “thing”: “cookie” } # THIS IS NOT VALID - DUPLICATE NAMES",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>DATA TYPES IN JSON</span>"
    ]
  },
  {
    "objectID": "0000085-jsonDataTypes.html#nested-objects",
    "href": "0000085-jsonDataTypes.html#nested-objects",
    "title": "6  DATA TYPES IN JSON",
    "section": "6.3 NESTED OBJECTS",
    "text": "6.3 NESTED OBJECTS\nThe values in “name”:value pairs (AKA “key”:value pairs) may be objects. Below, is a modified version of the recipe example shown above. Notice that in the following version of the JSON, the value for “prepTime” is now itself an object. An object inside an object is known as a “nested object”.\n                 {\n                     \"recipeName\": \"Midnight Chocolate Cake\",\n                     \"submittedBy\": \"Jack Sep 1, 2022 9:00am\",\n                     \"caloriesPerServing\": 450,\n                     \"dietMenu\": false,\n                     \"prepTime\": {\n                         \"hours\": 2,\n                         \"minutes\": 45\n                     }\n                 }\nContinuing with the same example … we added another “name”:value pair whose name is “submittedBy”. The value of “submittedBy” is itself a nested object.\n                {\n                    \"recipeName\": \"Midnight Chocolate Cake\",\n                    \"submittedBy\": {\n                        \"userName\": \"Jack\",\n                        \"when\": {\n                            \"date\": \"Sep 1, 2022\",\n                            \"time\": \"9:00 am\"\n                        }\n                    },\n                    \"caloriesPerServing\": 450,\n                    \"dietMenu\": false,\n                    \"prepTime\": {\n                        \"hours\": 2,\n                        \"minutes\": 45\n                    }\n                }\nContinuing once again with the same example … we can also make the values for “date” and “time” into nested objects:\n                 {\n                     \"recipeName\": \"Midnight Chocolate Cake\",\n                     \"submittedBy\": {\n                         \"userName\": \"Jack\",\n                         \"when\": {\n                             \"date\": {\n                                 \"month\": \"Sep\",\n                                 \"day\":  1, \n                                 \"year\": 2022\n                             },\n                             \"time\": {\n                               \"hour\": 9,\n                               \"minute\": 0,\n                               \"am\": true\n                             }\n                         }\n                     },\n                     \"caloriesPerServing\": 450,\n                     \"dietMenu\": false,\n                     \"prepTime\": {\n                         \"hours\": 2,\n                         \"minutes\": 45\n                     }\n                 }\nObjects may be nested for many levels. Without proper indentation, nested objects (and arrays - see below) can become very difficult to read. Make sure that your JSON objects are indented properly. (Note that the value in a “name”:value pair may also be an array as explained in the next section). ARRAYS\nJSON arrays combine a sequence of values between [square brackets]. The values in an array are separated from each other using commas. There is no comma after the last value. For example, the following is a valid JSON array that contains several strings:\n                 [\"apple\", \"pear\", \"plum\"]\nNote that the values in an array are not “named” as they are in objects (see above). The following JSON array contains numbers:\n                 [3.14159, 2.7182, 1.6180, 186282]\nThere is technically no requirement that all values in a JSON array must be the same datatype (i.e. a “homogeneous array”). JSON does allow for “heterogeneous arrays”, or arrays that contain values of different data types. These are not as common as homogenous arrays, however they are still considered valid JSON. For example, the following is a JSON array that contains values of different data types.\n                 [ \"apple\" , 3.14159 , true , null , false , true, 92 , \"abc\"]",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>DATA TYPES IN JSON</span>"
    ]
  },
  {
    "objectID": "0000085-jsonDataTypes.html#nested-arrays",
    "href": "0000085-jsonDataTypes.html#nested-arrays",
    "title": "6  DATA TYPES IN JSON",
    "section": "6.4 Nested Arrays",
    "text": "6.4 Nested Arrays\nIn addition to the simple data types (string, number, boolean, null), JSON arrays may also contain nested arrays as well as objects. For example, the following is an array that contains nested arrays.\n   [ [92, 80, 70, 83, 98, 77, 86, 99, 25] , [ 96, 72 , 26, 100, 92] , [ 93, 82, 92, 85] ]\nThe above example contains three different nested arrays. Often such arrays are arranged with each “inner” array (that is contained in the “outer” array) on a different line. For example, the above JSON is equivalent to the following:\n         [\n             [92, 80, 70, 83, 98, 77, 86, 99, 25],\n             [96, 72, 26, 100, 92],\n             [93, 82, 92, 85]\n         ]\n```json\n \n## Arrays that contain objects\n\nArrays may also contain objects. For example, the following shows an array that\ncontains 3 objects. Notice how the indentation is arranged to clearly show the\nstructure of the array and the objects.\n \n```json\n             [\n                 {\n                     \"first\": \"Sue\",\n                     \"last\": \"Smith\"\n                 },\n                 {\n                     \"first\": \"Frank\",\n                     \"last\": \"Jones\"\n                 },\n                 {\n                     \"name\": \"Anne\",\n                     \"title\": \"Applebaum\"\n                 }\n             ]",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>DATA TYPES IN JSON</span>"
    ]
  },
  {
    "objectID": "0000085-jsonDataTypes.html#objects-that-contain-arrays",
    "href": "0000085-jsonDataTypes.html#objects-that-contain-arrays",
    "title": "6  DATA TYPES IN JSON",
    "section": "6.5 Objects that contain arrays",
    "text": "6.5 Objects that contain arrays\nJust as arrays can contain objects, objects can contain arrays. The value of a “name”:value pair in an object may be an array (as well as an object). For example, the following is a JSON object that describes a company. Below, the array of objects from the last example is used as the value for the “employees” key in the outermost object.\n{\n     \"companyName\": \"Widgets R Us\",\n     \"founded\": 2022,\n     \"employees\":\n             [\n                 {\n                     \"first\": \"Sue\",\n                     \"last\": \"Smith\"\n                 },\n                 {\n                     \"first\": \"Frank\",\n                     \"last\": \"Jones\"\n                 },\n                 {\n                     \"name\": \"Anne\",\n                     \"title\": \"Applebaum\"\n                 }\n             ]\n }",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>DATA TYPES IN JSON</span>"
    ]
  },
  {
    "objectID": "0000085-jsonDataTypes.html#complex-json-files",
    "href": "0000085-jsonDataTypes.html#complex-json-files",
    "title": "6  DATA TYPES IN JSON",
    "section": "6.6 Complex JSON Files",
    "text": "6.6 Complex JSON Files\nVery complex JSON files can be constructed from a deep nesting of arrays that contain objects and objects that contain arrays, etc. etc. etc. The outermost structure in the example above is an object. It contains information about a single compmany. If we want to capture information about many companies, we could create an array of different company objects as shown below.\n [\n     {\n         \"companyName\": \"Widgets R Us\",\n         \"founded\": 2022,\n         \"employees\":\n                 [\n                     {\n                         \"first\": \"Sue\",\n                         \"last\": \"Smith\"\n                     },\n                     {\n                         \"first\": \"Frank\",\n                         \"last\": \"Jones\"\n                     },\n                     {\n                         \"first\": \"Anne\",\n                         \"last\": \"Applebaum\"\n                     }\n                 ]\n     },\n     {\n         \"companyName\": \"Pete's Pizza\",\n         \"founded\": 2020,\n         \"employees\":\n                 [\n                     {\n                         \"first\": \"Pete\",\n                         \"last\": \"Jones\"\n                     },\n                     {\n                         \"first\": \"Paula\",\n                         \"last\": \"Jones\"\n                     }\n     }\n ]",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>DATA TYPES IN JSON</span>"
    ]
  },
  {
    "objectID": "0000090-usingJsonInR.html",
    "href": "0000090-usingJsonInR.html",
    "title": "7  Using JSON in R",
    "section": "",
    "text": "The jsonlite R pacakge is used to read JSON files into R. The following is the link to the CRAN webpage for the jsonlite package. See the vignettes and reference manual linked there.\n\njsonlite: A Simple and Robust JSON Parser and Generator for R\n\nBelow, I copied the links to some of the vignettes from that page. However, it’s best to check the official CRAN page in case there are modifications or if there are new vignettes added there (this page was compiled in Jan 2025).\n\nIMPORTANT: The following describes how to use the fromJSON and toJSON functions from the jsonlite package. Getting started with JSON and jsonlite\nThe following will be covered later when we discuss APIs:\nFetching JSON data from REST APIs (2022-01-16)\nThe following is nice to know but is something that you can figure out yourself without needing this:\nCombining pages of JSON data with jsonlite (2022-01-16)\nThe following is a more detailed definition of how JSON is converted to R data and how R data is converted to JSON. You should NOT need to look at this but it is nice to know that it is available for reference in case you get stuck.\nA mapping between JSON data and R objects (March 2014)\nThere are some other vignettes on the CRAN page, but you probably don’t need to look at them.",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Using JSON in R</span>"
    ]
  },
  {
    "objectID": "0000011-WhatIsACli-v010.html",
    "href": "0000011-WhatIsACli-v010.html",
    "title": "8  Intro to Command Line Interfaces (CLIs)",
    "section": "",
    "text": "8.1 WHAT IS A COMMAND LINE INTERFACE (CLI)?\nModern computers and the programs that they run allow you to click and drag icons, use menus, open many programs at once, etc. It's hard to imagine a computer that doesn't have these features. However, a long time ago (pre 1990'ish) none of this was possible. In order to use a computer you had to memorize many different commands. You would type these commands into the computer in order to run programs and interact with the computer.\nToday the modern computer \"interface\" (the one that has icons, menus, etc.) is known as a Graphical User Interface or GUI (pronounced \"gooey\"). The old-style interface that required that you type commands to do ANYTHING is still able to be used. This type of interface is known as a \"Command Line Interface\" or CLI.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Intro to Command Line Interfaces (CLIs)</span>"
    ]
  },
  {
    "objectID": "0000011-WhatIsACli-v010.html#why-should-i-care-about-a-cli",
    "href": "0000011-WhatIsACli-v010.html#why-should-i-care-about-a-cli",
    "title": "8  Intro to Command Line Interfaces (CLIs)",
    "section": "8.2 WHY SHOULD I CARE ABOUT A CLI ?",
    "text": "8.2 WHY SHOULD I CARE ABOUT A CLI ?\nFor day to day casual computer work, it may be hard to understand why anyone would use a CLI instead of a modern GUI interface. Using a CLI requires memorizing many different seemingly arcane commands instead of just \"pointing and clicking\" on what you want. Why would anyone want to do that?\n\n8.2.1 Reason 1 - it allows you to do powerful things quickly\nMany of the CLI commands can be quite powerful and can cut down the amount of time it takes to do things by A LOT. For example, suppose a folder contains 1000 files. For example, \"expenseReport-Jan2020.xlsx\", \"meetingMinutes-Jan012020.docx\", etc. (1000 such files) You are told by your boss that you must add your name as part of the filename for each of these 1000 files. If you are using a GUI, that could take hours. However, for someone who is proficient with a using a CLI, it could take seconds to type in the correct commands to do that for all 1000 files.\n\n\n8.2.2 Reason 2: - you can create “scripts” to automate many things\nSuppose your boss told you that everyone in the company needs to make the same changes to their filenames. However, not everyone knows how to use a CLI. You could theoretically create a small \"script\" (ie. a program) using the CLI commands that would allow anyone to \"run the script\" to make the changes. Tasks that need to be done repeatedly are often best accomplished by creating a CLI script. The script can then be run anytime the task needs to be done. Note that you can create similar scripts or programs using another programming language but a CLI script is often the easiest and most appropriate method to create such scripts.\n\n\n8.2.3 Reason 3: Tech and data professionals are often expected to understand how to use a CLI.\nOften many advanced commands are only available to be run from the command line. For example, the wget program is a command line program that can be used to download the code for an entire website or just specific files that you’d like to get.\nMany basic concepts from the command line carry over directly to any programming language (including R) in relation to interacting with the operating system. Concepts such as absolute and relative paths, wildcards in filenames, etc. come up over and over again when you work with data.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Intro to Command Line Interfaces (CLIs)</span>"
    ]
  },
  {
    "objectID": "0000011-WhatIsACli-v010.html#different-clis-for-different-computer-systems",
    "href": "0000011-WhatIsACli-v010.html#different-clis-for-different-computer-systems",
    "title": "8  Intro to Command Line Interfaces (CLIs)",
    "section": "8.3 DIFFERENT CLIs FOR DIFFERENT COMPUTER SYSTEMS",
    "text": "8.3 DIFFERENT CLIs FOR DIFFERENT COMPUTER SYSTEMS\nJust as the Graphical User Interface (GUI) for the Mac is different from the GUI for Windows, the standard CLI available for the Mac is different from the CLI(s) that are available on Windows. This means that the commands that you need to type on Mac are different from the commands that you would type on Windows.\n\n8.3.1 Mac\nThe Mac CLI is used by running the Terminal program that comes with the Mac. The terminal program actual runs a form of the Bash shell (see more below).\n\n\n8.3.2 Windows\nWindows comes with two different CLIs built into the system:\n\nThe “Command Prompt” (cmd) : This was the original CLI for Windows. It is a little bit dated and not as powerful as other options. Nevertheless it is still very popular.\n“Powershell”: This is a newer CLI that Microsoft first introduced in 2006. It is more complicated to use than the “Command Prompt” but in many ways is more powerful. Today Windows comes with both CLIs.\nThere are also options for installing a version of the “Bash Shell” on Windows. See below for more info.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Intro to Command Line Interfaces (CLIs)</span>"
    ]
  },
  {
    "objectID": "0000011-WhatIsACli-v010.html#what-is-the-bash-shell-program",
    "href": "0000011-WhatIsACli-v010.html#what-is-the-bash-shell-program",
    "title": "8  Intro to Command Line Interfaces (CLIs)",
    "section": "8.4 What is the “Bash Shell” program?",
    "text": "8.4 What is the “Bash Shell” program?\nWhile most computer users today use either the Windows or Mac operating system, the Linux operating system is very popular for running “server” computers. These are the computers that support many of the “backoffice” tasks in companies today. These include computers that host company websites as well as company databases and many other critical corporate technology services.\nLinux is a derivative of the Unix operating system. These operating systems, (Linux and Unix), have many different “command line interface” (CLI) programs available to choose from. A very popular CLI on these computers is the “Bash Shell”. The word “shell” is a synonym for a “command line interface”. The word “shell” was first coined by the creators of Unix. The idea is that to interact with guts of the operating system you must “go through” the shell (i.e. use the CLI commands), similar to the way you must “go through the shell” of an egg in order to get to the inside.\nNote that the “Bash Shell” has become somewhat of a standard. Apple Mac is also derived from the original Unix operating system and by default, the Mac Terminal program also runs a version of the Bash Shell. While Windows doesn't natively come with the Bash Shell, you can download many different versions of a \"Bash\" CLI program that can be used on Windows. Some of these are listed below. Note that installing these go beyond the scope of what we are covering here. For more info search online for info about each of these options.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Intro to Command Line Interfaces (CLIs)</span>"
    ]
  },
  {
    "objectID": "0000013-HowToRunTheBashShellCli-v011.html",
    "href": "0000013-HowToRunTheBashShellCli-v011.html",
    "title": "9  How to run the Bash Shell",
    "section": "",
    "text": "9.0.1 How to run Bash on Microsoft Windows\nThe following are several options for installing Bash on Windows.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>How to run the Bash Shell</span>"
    ]
  },
  {
    "objectID": "0000013-HowToRunTheBashShellCli-v011.html#using-bash-in-rstudios-terminal-window",
    "href": "0000013-HowToRunTheBashShellCli-v011.html#using-bash-in-rstudios-terminal-window",
    "title": "9  How to run the Bash Shell",
    "section": "9.1 Using Bash in RStudio’s “Terminal” window",
    "text": "9.1 Using Bash in RStudio’s “Terminal” window\nThe RStudio program has a “terminal” window in which you can run CLI commands. This is usually found as a “tab” in the lower left hand window “pane”. You can also choose the following menu choices to open the Terminal tab: Tools menu &gt; Terminal &gt; Move Focus to Terminal\nYou can configure RStudio to use whichever CLI you have on your computer. The posit.cloud version of RStudio as well as the locally installed version of RStudio that runs on a Mac is automatically configured to use the Bash Shell as the CLI so just opening the Terminal window is all you need to do.\n\n9.1.1 Make sure you are using Bash and not another CLI\nIf you are using a “local” install of RStudio on Windows, then you must first install a Bash environment (I recommend Git Bash). After installing Bash on your computer, you need to configure RStudio to use Bash in its “terminal” tab as described below). To do so, choose Bash from the following menu (this is covered in more detail in the following section of this document):\nTools menu &gt; Global Options &gt; Terminal &gt; New terminals open with (dropdown list) &gt;\n(choose Bash or Git Bash or whatever version of Bash you have installed)\n\n\n\n9.1.2 Problems running Bash in RStudio? Try changing some options in RStudio.\nThere are MANY ways to configure the RStudio environment. If you're having touble running Bash from the Terminal window in RStudio, follow the steps shown below. (To learn a lot more about how to use the Terminal window in RStudio, see the official documentation here:\nhttps://support.posit.co/hc/en-us/articles/115010737148-Using-the-RStudio-Terminal\n(You can also get to this page by clicking on the link entitled \"Using the RStudio terminal\" in the RStudio Terminal options window, as shown in the screen-shots below.)\nAre you having problems getting the \"Bash shell\" command line interface (CLI) to run in RStudio?\n\nIf you don't see the RStudio \"Terminal\" tab anywhere in the RStudio interface then choose, the following menu choices from RStudio's main menu: Tools &gt; Terminal &gt; Move Focus to Terminal\nIf you DO see the Terminal tab but you aren't running the \"Bash shell\" command line interface in the Terminal, then do the following:\n\n \nRStudio is highly configurable. To modify any of the plethora of options for RStudio - choose the \"tools\" menu in RStudio and select \"General Options\". That will open the window shown in the 2nd screenshot above. You can then choose from any of the categories on the left hand side of that window to access the options under that category. For example, to change the font used in the editor you can click on the \"Appearance\" category (on the left side of the Options window) - at which point you will see several options including those allowing you to specify the font, font-size, etc.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>How to run the Bash Shell</span>"
    ]
  },
  {
    "objectID": "0000013-HowToRunTheBashShellCli-v011.html#sec-bashPrompt",
    "href": "0000013-HowToRunTheBashShellCli-v011.html#sec-bashPrompt",
    "title": "9  How to run the Bash Shell",
    "section": "9.2 What is the Bash \"prompt\" ?",
    "text": "9.2 What is the Bash \"prompt\" ?\nWhen you type commands in the R console, R \"prompts\" you to enter a new command every time you see the \"&gt; \" at the beginning of a line. For example, the following shows an R command being run in the R Console window. The \"&gt;\" at the beginning of the second line is the R \"prompt\", where you can enter your next command:\nThe \"R\" prompt below is \"&gt;\"\n \nIn a similar way, before you type a command in Bash, the CLI \"prompts\" you to enter a new command. However, in Bash the exact \"prompt\" can be different on different computers and for different users. Often the Bash prompt is something like this:\nusername@hostname:~$ (TYPE YOUR NEXT BASH COMMAND HERE)\nFor example, on my computer, the following shows when happens on my computer when I run the Bash command, \"expr 5 \\* 100\" , which simply multiplies 5*100 to get 500. The next line shows the prompt waiting for the user to type another command:\n\nThe Bash prompt below is: yrose@LAPTOP-IGVE3JIE:~$\n\nIn this example, \"yrose\" is my username on my computer and LAPTOP-IGVE3JIE is the \"name\" of my computer (many people don't realize that their computer has a name). This type of prompt became popular since power‑users of Bash often connect remotely to many different computers from their Bash window. By just looking at the Bash prompt a power‑user who might be connecting to different machines can know immediately which computer they are currently connected to.\nThe ~ is called a \"tilde\". The significance of the tilde, ~, will be discussed more later. Finally, the $ at the end of the prompt is there to show where you are to enter your next command. Historically, the Bash prompt was JUST a dollar sign, $ , similar to how the R prompt is just a greater than sign, &gt;. In subsequent years, Bash evolved to show more information in the prompt. The prompt can be configured to show a lot of different types of information (see the next section).\n\n9.2.1 How to change the Bash prompt\nAs noted above, the Bash prompt can be configured to include different types of information. Sometimes it is simplest to just see a simple '$' prompt. To do so, type the following command. There shouldn't be any spaces on either side of the equals sign:\nPS1='\\$ '\nAfter doing so your Bash prompt should become a single dollar sign, $. To change the prompt to the more typical version shown in the previous section type the following command:\nPS1='\\u@\\h:\\w\\$ '\nThe \\u stands for the username, \\h for the hostname and \\w for the \"working directory\" (we'll discuss what that means later). See the following page for more information about how to configure your prompt in all sorts of interesting ways,\nhttps://linuxhint.com/bash-ps1-customization/\nChanging your prompt to the \"working directory\" makes navigating the Bash environment much easier. Once you are running Bash, to see the \"working directory\" in the prompt, type the following Bash command. NOTE: there are no spaces ANYWHERE in this command other than the one space that appears before the final single quote (i.e. apostrophe):\n\nPS1='\\w\\$ '\nNow a user, joe, who runs the following commands will see the results shown below.\n\n$ cd # change the working directory to /Users/joe\n$ PS1='\\w\\$ ' # change the prompt to include the working directory\n~$ pwd # ~ is shorthand for /Users/joe\n/Users/joe\n~$ cd Documents # move to another directory\n~/Documents$ pwd # show the path for the current directory\n/Users/joe/Documents\nIf you want this to happen every time you start a new Terminal window, then run the following command. This command creates a file named .profile (there is a period at the very beginning of the filename) in your \"home directory\". This file contains options that control how Bash runs.\necho \"PS1='\\w\\$ '\" &gt;&gt; $HOME/.profile\n\nIn the rest of this document, I will use a simple $ prompt. This makes it easier to read the information in this document.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>How to run the Bash Shell</span>"
    ]
  },
  {
    "objectID": "0000013-HowToRunTheBashShellCli-v011.html#how-can-i-confirm-that-im-using-the-bash-command-line-interface-program",
    "href": "0000013-HowToRunTheBashShellCli-v011.html#how-can-i-confirm-that-im-using-the-bash-command-line-interface-program",
    "title": "9  How to run the Bash Shell",
    "section": "9.3 How can I confirm that I'm using the \"Bash\" Command Line Interface program?",
    "text": "9.3 How can I confirm that I'm using the \"Bash\" Command Line Interface program?\nAs noted above, both Windows and Mac can be configured with different CLI programs. The RStudio Terminal window can be configured to use any CLI that is installed on your computer. The instructions to do so appear earlier in this document. To confirm that you are actually using the Bash CLI, you can run the following command:\necho $0\nIf you are running the Bash shell/CLI, then the output should include the word \"bash\" somewhere. For example the following is what I get when I run this command on my computer:\n\nIf you do not get a result showing the word \"bash\" somewhere, refer to the sections above in this document that describe how to configure RStudio to use Bash.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>How to run the Bash Shell</span>"
    ]
  },
  {
    "objectID": "0000013-HowToRunTheBashShellCli-v011.html#bash-commands-or-linux-commands",
    "href": "0000013-HowToRunTheBashShellCli-v011.html#bash-commands-or-linux-commands",
    "title": "9  How to run the Bash Shell",
    "section": "9.4 \"Bash commands\" or \"Linux commands\" ?",
    "text": "9.4 \"Bash commands\" or \"Linux commands\" ?\nTechnically, many of the commands that you run in Bash are actually \"Linux\" commands (or Unix commands). Therefore when searching online for information, it is often more appropriate to use the words \"Linux command\" in your search instead of \"Bash command\". As we said above, the Bash shell, is only one of many CLIs that are available on Linux. However, the majority of commands we will learn are able to be used with ANY Linux CLI and not just Bash.\nIn addition to being able to use Bash on Apple Mac, you can also access many of the vast majority of these \"Linux\" commands on Mac. (Remember that Linux and Mac are both derived from the Unix operating system). Similarly, when you install a Bash environment on Windows, it will include many of these \"Linux\" programs too.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>How to run the Bash Shell</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html",
    "href": "0000025-introToBash-v007.html",
    "title": "10  Working with the Bash Shell.",
    "section": "",
    "text": "10.1 Ryans Tutorials\nThe following tutorial provides an intro to using Bash. The title of this tutorial is “Linux Tutorial” as Bash is commonly used on the Linux operating system. However, this tutorial also applies to using Bash on the Mac and on Windows.\nhttps://ryanstutorials.net/linuxtutorial/\nMost of the information that we covered before the midterm can be found in the first 8 sections of this tutorial. Links are below along with some of my own comments. Please use the notes on this website to study for the midterm.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#ryans-tutorials",
    "href": "0000025-introToBash-v007.html#ryans-tutorials",
    "title": "10  Working with the Bash Shell.",
    "section": "",
    "text": "The Command Line - What is it, how does it work and how do I get to one.\nBasic Navigation - An introduction to the Linux directory system and how to get around it.\nMore About Files - Find out some interesting characteristics of files and directories in a Linux environment.\nManual Pages - Learn how to make the most of the Linux commands you are learning.\nYou should know how to read the contents of a “man page”.\nNote that the “man” command isn’t installed by default on posit.cloud nor on Mac or Windows Bash environments. However, you can search online for any man page, (e.g. google for man ls).\nAlternatively , you can access the man pages here: https://man7.org/linux/man-pages/dir_section_1.html\nFile Manipulation - How to make, remove, rename, copy and move files and directories.\nYou are NOT responsible for the “vi” editor. “vi” is a text editor that is commonly found in most Bash environments. While it is useful to know, vi can be a bit confusing for new users. Vi Text Editor - Discover a powerful Linux based text editor.\nWildcards - Also referred to as globbing, this is a means to refer to several files in one go.\nWILF ONLY (we learned the basic concepts about how to understand the first column of info that is output by the “ls -l” command. You are NOT responsible for the chmod command that is described here.)\nPermissions - Learn to identify and change the permissions of files and directories and what the consequences of these are.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#download-files-for-use-in-these-lessons",
    "href": "0000025-introToBash-v007.html#download-files-for-use-in-these-lessons",
    "title": "10  Working with the Bash Shell.",
    "section": "10.2 Download files for use in these lessons",
    "text": "10.2 Download files for use in these lessons\nA “zip file” is a single file that contains a condensed version of one or more files or folders. Click on this link to download a “zip file” named myFiles.zip that contains files that we will be working with to demonstrate many of the commands available with the Bash CLI.\nTo “extract” (or unzip) all of the files that are in this zip file, run the following command:\nunzip myFiles.zip",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#working-with-zip-files-in-bash",
    "href": "0000025-introToBash-v007.html#working-with-zip-files-in-bash",
    "title": "10  Working with the Bash Shell.",
    "section": "10.3 Working with ZIP files in Bash",
    "text": "10.3 Working with ZIP files in Bash\nA “zip” file is a single file into which many different individual files have been placed. For example, if you want to mail several different files to someone, you can place all of those files into a single “zip” file and then email the single zip file. The recipient will need to “unzip” the file to retrieve the individual files. The single zip file is often smaller in size than the collection of individual files (i.e. the “zip” file is “compressed”).\nOn Mac’s the contents of a zip file is automatically extracted into a folder when you try to access the zip file by clicking on it. The Mac creates a new folder to place the contents of the zip file. On Windows, this doesn’t happen automatically. Rather you must “uncompress” the zip file. You can do so by right clicking on the file name and choosing “uncompress”. On posit.cloud, it seems like zip files are automatically unzipped into a folder when a zip file is uploaded.\nThe following commands can be used from Bash to zip or unzip a set of files. There are different types of zip files - however, the different types often use the same .zip filename extension. The zip/unzip commands work with one type of zip file and gzip/gunzip commands work with another type of zip file. To unzip a file you can try the unzip command and if that doesn’t work try the gunzip command.\n\nzip -r FILENAME.zip SOME_FOLDER - creates a new zip file\nunzip FILENAME.zip - extracts the contents of a zip file\ngzip / gunzip - zip/unzip Gnu types of zip files\n\n\n10.3.1 Vocabulary related to folders (also known as “directories”)\n\nA “directory” is a “folder” The word “directory” is a synonym for the word “folder”. They two words mean the EXACT SAME THING.\nThe “parent” of folder/direcotry, x, is the folder/directory that contains x.\n\n\n\n10.3.2 Important Bash commands that everyone should know\nThe following gives a brief description of how many commands work. In the descriptions below, any part of the command that appears in [square brackets] is optional.\n\npwd - “Print the Working Directory” (ie display the “path” for the current working directory (CWD)\ncd SOME_DIRECTORY - set the “working directory” to the specified directory\ncd - set the “working directory” to your “home directory”\ncd .. - set the “working directory” to the “parent” of the current working directory\ncd ../.. - set the “working directory” to the parent of the parent of the current working directory\ncd ../../.. (etc.) - set the “working directory” to 3 levels up in the directory hierarchy)\nmv SOME_FILE SOME_DIRECTORY - move SOME_FILE to SOME_DIRECTORY\nmv SOME_DIRECOTRY ANOTHER_DIRECTORY - move SOME_FILE to ANOTHER_DIRECTORY\nls [SOME_DIRECTORY] - list the files in the current directory or the specified [DIRECTORY]\nls -l [SOME_DIRECTORY] - show a “long” listing (i.e. more info about each file/folder)\nls -r [SOME_DIRECTORY] - reverse the order that the files are listed\nls -lt [SOME_DIRECOTRY] - show the contents in time order (with a long listing format)\nls -l -t [SOME_DIRECOTRY] - SAME THING - show the contents in time order (with a long listing format)\nls -a [SOME_DIRECTORY] - show all files (including files that start with a period ( . )\nls -R [SOME_DIRECTORY] - show the files that are in all folders below the CWD (or the specified directory)\nls SOME_FILES - list the names of the files\ncat SOME_FILES - display the contents of the files (only for “text” files)\nfile SOME_FILE - determine the type of file (e.g. ASCII, Excel, etc.)\ntree . - show directory hierarchy (tree is not installed on many systems)",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#creatingremoving-directories-aka-folders",
    "href": "0000025-introToBash-v007.html#creatingremoving-directories-aka-folders",
    "title": "10  Working with the Bash Shell.",
    "section": "10.4 creating/removing directories (aka folders)",
    "text": "10.4 creating/removing directories (aka folders)\n\nmkdir SOME_DIRECTORY - “make” the specified directory\nrmdir SOME_DIRECORY - “remove” directory (must be empty, NOTE also see rm command)",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#removing-files",
    "href": "0000025-introToBash-v007.html#removing-files",
    "title": "10  Working with the Bash Shell.",
    "section": "10.5 Removing files",
    "text": "10.5 Removing files\nBE CAREFUL WITH THE FOLLOWING COMMANDS!!!\nTHERE IS NO UNDO\nONCE YOU’VE REMOVED A FILE/FOLDER YOU CANNOT GET IT BACK!\n\nrm SOME_FILES - remvove the files (THERE IS NO WAY TO GET THEM BACK)\nif you are brave, you can research how to use rm to remove entire directories (that aren’t empty)",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#creating-files-using-and",
    "href": "0000025-introToBash-v007.html#creating-files-using-and",
    "title": "10  Working with the Bash Shell.",
    "section": "10.6 creating files using > and >>",
    "text": "10.6 creating files using &gt; and &gt;&gt;\n\necho SOME_MESSAGE - display the message\necho SOME_MESSAGE &gt; SOME_FILE - put the message in the file (erase current contents of file)\necho SOME_MESSAGE &gt;&gt; SOME_FILE - append the message to the file",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#working-with-bash-variables",
    "href": "0000025-introToBash-v007.html#working-with-bash-variables",
    "title": "10  Working with the Bash Shell.",
    "section": "10.7 Working with BASH variables",
    "text": "10.7 Working with BASH variables\n\nenv - display the variables that currently exist\nVARIABLE=VALUE - set the value of VARIABLE to VALUE (do NOT type any spaces next to the = sign)\necho $VARIABLE - show the value of a specific variable\nFor an example see see Section 9.2 for info about the PS1 variable",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#material-that-is-not-on-the-midterm",
    "href": "0000025-introToBash-v007.html#material-that-is-not-on-the-midterm",
    "title": "10  Working with the Bash Shell.",
    "section": "10.8 Material that is NOT on the midterm",
    "text": "10.8 Material that is NOT on the midterm\n\n10.8.1 Working with “tar” files\n“tar” files are similar to zip files but tar files are not “compressed”. “tar” files are popular mostly on Linux computers while “zip” files are popular on all computer platforms.\n\ntar - create or extract a tar archive\n\n\n\n10.8.2 SOME MORE COMMANDS - search online for info about these\n\nwc - count words, lines, symbols in a file\nhead - show first few lines of a file\ntail - show last few lines of a file\nsort\nuniq\ncut\npaste\ncurl - download files from the Internet\ntouch SOME_FILE - update the timestamp of the file OR create the file if it didn’t exist\nless (or “more” depending on your system) - display the contents of a file one page at a time\ngrep - search for a specific string of text in a file or multiple files\nfind - search for files and directories in a file system\nchmod - change the permissions of a file or directory\nchown - change the ownership of a file or directory\nhistory - display a list of previously executed commands",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0000025-introToBash-v007.html#launch-vscode-from-bash-on-windows",
    "href": "0000025-introToBash-v007.html#launch-vscode-from-bash-on-windows",
    "title": "10  Working with the Bash Shell.",
    "section": "10.9 Launch VSCode from Bash (on Windows)",
    "text": "10.9 Launch VSCode from Bash (on Windows)\nVSCode is a popular text editor. To launch VSCode directly from Bash on Windows, you can use the following commands directly from Bash. While VSCode is also popular on Mac, unfortunately the following commands do now work on Macs.\n\ncode - launch the VSCode text editor program (if you’ve installed it)\ncode [SOME_FILE] - launch VSCode and open SOME_FILE\ncode [SOME_DIRECTORY] - launch VSCode with the “explorer” window set to SOME_DIRECTORY.\ncode . (there is a period there) - launch VSCode with the “explorer” window set to the current working directory.",
    "crumbs": [
      "Bash",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Working with the Bash Shell.</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html",
    "href": "0200200-introToRegularExpressions-v036.html",
    "title": "11  regular expressions (regex)",
    "section": "",
    "text": "11.1 Data for examples\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# SAMPLE DATA ####\n#\n# Before we start, let's define some data to be used with examples in this file.\n#\n# (NOTE: I made up N. American apple and S. Korean Fig \n#        so that I can use them in some examples.)\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nfruit = c(\"apple\", \"N. American apple\", \"S. Korean Fig\", \"fig\", \n          \"star fruit\", \"pear\", \"prickly pear\", \n          \"Beurre Hardy pear\", \"cherry\", \"black cherry\", \"peach\", \"plum\",\n          \"kumquat\", \"banana\", \"blueberry\", \"strawberry\", \"honeydew\", \n          \"strawberries\", \"yumberry\")\n\nfruit\n\n [1] \"apple\"             \"N. American apple\" \"S. Korean Fig\"    \n [4] \"fig\"               \"star fruit\"        \"pear\"             \n [7] \"prickly pear\"      \"Beurre Hardy pear\" \"cherry\"           \n[10] \"black cherry\"      \"peach\"             \"plum\"             \n[13] \"kumquat\"           \"banana\"            \"blueberry\"        \n[16] \"strawberry\"        \"honeydew\"          \"strawberries\"     \n[19] \"yumberry\"         \n\naddresses = c(\"12345 Sesame Street\", \n              \"One Micro$oft Way\",                 # notice the $ sign\n              \"3 Olive St.\", \n              \"Two 1st Ave.\",\n              \"5678 Park Place\",\n              \"Forty Five 2nd Street\",\n              \"Ninety Nine Cone St. apartment 7\",\n              \"9 Main St. apt. 623\", \n              \"Five Google Drive\", \n              \"4\\\\2 Rechov Yafo\",                   # note the backslash (\\)\n              \"Fifteen Watchamacallit Boulevard\",   # some long words\n              \"Nineteen Watchamacallit Boulevard\",  # some longer words\n              \"One Main Street Apt 12b\",\n              \"Two Main Street Apt 123c\",\n              \"Three Main Street Apt 12343\",\n              \"City Hall Lockport, NY\")\n\n\naddresses\n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"5678 Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. 623\"              \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[15] \"Three Main Street Apt 12343\"       \"City Hall Lockport, NY\"           \n\n# show each address, one per line\ncat(addresses, sep=\"\\n\")\n\n12345 Sesame Street\nOne Micro$oft Way\n3 Olive St.\nTwo 1st Ave.\n5678 Park Place\nForty Five 2nd Street\nNinety Nine Cone St. apartment 7\n9 Main St. apt. 623\nFive Google Drive\n4\\2 Rechov Yafo\nFifteen Watchamacallit Boulevard\nNineteen Watchamacallit Boulevard\nOne Main Street Apt 12b\nTwo Main Street Apt 123c\nThree Main Street Apt 12343\nCity Hall Lockport, NY",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#data-for-examples",
    "href": "0200200-introToRegularExpressions-v036.html#data-for-examples",
    "title": "11  regular expressions (regex)",
    "section": "",
    "text": "11.1.1 stringr package\n\n#-------------------------------------------------------------------------.\n# NOTE - most of the examples in this file were created using the data above.\n# The stringr package also contains some data that can be used to experiment\n# with these functions. \n#-------------------------------------------------------------------------.\n\nif(!require(stringr)){install.packages(\"stringr\");require(stringr)}\n\nLoading required package: stringr\n\n\n\nAttaching package: 'stringr'\n\n\nThe following object is masked _by_ '.GlobalEnv':\n\n    fruit\n\nstringr::words\n\n  [1] \"a\"           \"able\"        \"about\"       \"absolute\"    \"accept\"     \n  [6] \"account\"     \"achieve\"     \"across\"      \"act\"         \"active\"     \n [11] \"actual\"      \"add\"         \"address\"     \"admit\"       \"advertise\"  \n [16] \"affect\"      \"afford\"      \"after\"       \"afternoon\"   \"again\"      \n [21] \"against\"     \"age\"         \"agent\"       \"ago\"         \"agree\"      \n [26] \"air\"         \"all\"         \"allow\"       \"almost\"      \"along\"      \n [31] \"already\"     \"alright\"     \"also\"        \"although\"    \"always\"     \n [36] \"america\"     \"amount\"      \"and\"         \"another\"     \"answer\"     \n [41] \"any\"         \"apart\"       \"apparent\"    \"appear\"      \"apply\"      \n [46] \"appoint\"     \"approach\"    \"appropriate\" \"area\"        \"argue\"      \n [51] \"arm\"         \"around\"      \"arrange\"     \"art\"         \"as\"         \n [56] \"ask\"         \"associate\"   \"assume\"      \"at\"          \"attend\"     \n [61] \"authority\"   \"available\"   \"aware\"       \"away\"        \"awful\"      \n [66] \"baby\"        \"back\"        \"bad\"         \"bag\"         \"balance\"    \n [71] \"ball\"        \"bank\"        \"bar\"         \"base\"        \"basis\"      \n [76] \"be\"          \"bear\"        \"beat\"        \"beauty\"      \"because\"    \n [81] \"become\"      \"bed\"         \"before\"      \"begin\"       \"behind\"     \n [86] \"believe\"     \"benefit\"     \"best\"        \"bet\"         \"between\"    \n [91] \"big\"         \"bill\"        \"birth\"       \"bit\"         \"black\"      \n [96] \"bloke\"       \"blood\"       \"blow\"        \"blue\"        \"board\"      \n[101] \"boat\"        \"body\"        \"book\"        \"both\"        \"bother\"     \n[106] \"bottle\"      \"bottom\"      \"box\"         \"boy\"         \"break\"      \n[111] \"brief\"       \"brilliant\"   \"bring\"       \"britain\"     \"brother\"    \n[116] \"budget\"      \"build\"       \"bus\"         \"business\"    \"busy\"       \n[121] \"but\"         \"buy\"         \"by\"          \"cake\"        \"call\"       \n[126] \"can\"         \"car\"         \"card\"        \"care\"        \"carry\"      \n[131] \"case\"        \"cat\"         \"catch\"       \"cause\"       \"cent\"       \n[136] \"centre\"      \"certain\"     \"chair\"       \"chairman\"    \"chance\"     \n[141] \"change\"      \"chap\"        \"character\"   \"charge\"      \"cheap\"      \n[146] \"check\"       \"child\"       \"choice\"      \"choose\"      \"Christ\"     \n[151] \"Christmas\"   \"church\"      \"city\"        \"claim\"       \"class\"      \n[156] \"clean\"       \"clear\"       \"client\"      \"clock\"       \"close\"      \n[161] \"closes\"      \"clothe\"      \"club\"        \"coffee\"      \"cold\"       \n[166] \"colleague\"   \"collect\"     \"college\"     \"colour\"      \"come\"       \n[171] \"comment\"     \"commit\"      \"committee\"   \"common\"      \"community\"  \n[176] \"company\"     \"compare\"     \"complete\"    \"compute\"     \"concern\"    \n[181] \"condition\"   \"confer\"      \"consider\"    \"consult\"     \"contact\"    \n[186] \"continue\"    \"contract\"    \"control\"     \"converse\"    \"cook\"       \n[191] \"copy\"        \"corner\"      \"correct\"     \"cost\"        \"could\"      \n[196] \"council\"     \"count\"       \"country\"     \"county\"      \"couple\"     \n[201] \"course\"      \"court\"       \"cover\"       \"create\"      \"cross\"      \n[206] \"cup\"         \"current\"     \"cut\"         \"dad\"         \"danger\"     \n[211] \"date\"        \"day\"         \"dead\"        \"deal\"        \"dear\"       \n[216] \"debate\"      \"decide\"      \"decision\"    \"deep\"        \"definite\"   \n[221] \"degree\"      \"department\"  \"depend\"      \"describe\"    \"design\"     \n[226] \"detail\"      \"develop\"     \"die\"         \"difference\"  \"difficult\"  \n[231] \"dinner\"      \"direct\"      \"discuss\"     \"district\"    \"divide\"     \n[236] \"do\"          \"doctor\"      \"document\"    \"dog\"         \"door\"       \n[241] \"double\"      \"doubt\"       \"down\"        \"draw\"        \"dress\"      \n[246] \"drink\"       \"drive\"       \"drop\"        \"dry\"         \"due\"        \n[251] \"during\"      \"each\"        \"early\"       \"east\"        \"easy\"       \n[256] \"eat\"         \"economy\"     \"educate\"     \"effect\"      \"egg\"        \n[261] \"eight\"       \"either\"      \"elect\"       \"electric\"    \"eleven\"     \n[266] \"else\"        \"employ\"      \"encourage\"   \"end\"         \"engine\"     \n[271] \"english\"     \"enjoy\"       \"enough\"      \"enter\"       \"environment\"\n[276] \"equal\"       \"especial\"    \"europe\"      \"even\"        \"evening\"    \n[281] \"ever\"        \"every\"       \"evidence\"    \"exact\"       \"example\"    \n[286] \"except\"      \"excuse\"      \"exercise\"    \"exist\"       \"expect\"     \n[291] \"expense\"     \"experience\"  \"explain\"     \"express\"     \"extra\"      \n[296] \"eye\"         \"face\"        \"fact\"        \"fair\"        \"fall\"       \n[301] \"family\"      \"far\"         \"farm\"        \"fast\"        \"father\"     \n[306] \"favour\"      \"feed\"        \"feel\"        \"few\"         \"field\"      \n[311] \"fight\"       \"figure\"      \"file\"        \"fill\"        \"film\"       \n[316] \"final\"       \"finance\"     \"find\"        \"fine\"        \"finish\"     \n[321] \"fire\"        \"first\"       \"fish\"        \"fit\"         \"five\"       \n[326] \"flat\"        \"floor\"       \"fly\"         \"follow\"      \"food\"       \n[331] \"foot\"        \"for\"         \"force\"       \"forget\"      \"form\"       \n[336] \"fortune\"     \"forward\"     \"four\"        \"france\"      \"free\"       \n[341] \"friday\"      \"friend\"      \"from\"        \"front\"       \"full\"       \n[346] \"fun\"         \"function\"    \"fund\"        \"further\"     \"future\"     \n[351] \"game\"        \"garden\"      \"gas\"         \"general\"     \"germany\"    \n[356] \"get\"         \"girl\"        \"give\"        \"glass\"       \"go\"         \n[361] \"god\"         \"good\"        \"goodbye\"     \"govern\"      \"grand\"      \n[366] \"grant\"       \"great\"       \"green\"       \"ground\"      \"group\"      \n[371] \"grow\"        \"guess\"       \"guy\"         \"hair\"        \"half\"       \n[376] \"hall\"        \"hand\"        \"hang\"        \"happen\"      \"happy\"      \n[381] \"hard\"        \"hate\"        \"have\"        \"he\"          \"head\"       \n[386] \"health\"      \"hear\"        \"heart\"       \"heat\"        \"heavy\"      \n[391] \"hell\"        \"help\"        \"here\"        \"high\"        \"history\"    \n[396] \"hit\"         \"hold\"        \"holiday\"     \"home\"        \"honest\"     \n[401] \"hope\"        \"horse\"       \"hospital\"    \"hot\"         \"hour\"       \n[406] \"house\"       \"how\"         \"however\"     \"hullo\"       \"hundred\"    \n[411] \"husband\"     \"idea\"        \"identify\"    \"if\"          \"imagine\"    \n[416] \"important\"   \"improve\"     \"in\"          \"include\"     \"income\"     \n[421] \"increase\"    \"indeed\"      \"individual\"  \"industry\"    \"inform\"     \n[426] \"inside\"      \"instead\"     \"insure\"      \"interest\"    \"into\"       \n[431] \"introduce\"   \"invest\"      \"involve\"     \"issue\"       \"it\"         \n[436] \"item\"        \"jesus\"       \"job\"         \"join\"        \"judge\"      \n[441] \"jump\"        \"just\"        \"keep\"        \"key\"         \"kid\"        \n[446] \"kill\"        \"kind\"        \"king\"        \"kitchen\"     \"knock\"      \n[451] \"know\"        \"labour\"      \"lad\"         \"lady\"        \"land\"       \n[456] \"language\"    \"large\"       \"last\"        \"late\"        \"laugh\"      \n[461] \"law\"         \"lay\"         \"lead\"        \"learn\"       \"leave\"      \n[466] \"left\"        \"leg\"         \"less\"        \"let\"         \"letter\"     \n[471] \"level\"       \"lie\"         \"life\"        \"light\"       \"like\"       \n[476] \"likely\"      \"limit\"       \"line\"        \"link\"        \"list\"       \n[481] \"listen\"      \"little\"      \"live\"        \"load\"        \"local\"      \n[486] \"lock\"        \"london\"      \"long\"        \"look\"        \"lord\"       \n[491] \"lose\"        \"lot\"         \"love\"        \"low\"         \"luck\"       \n[496] \"lunch\"       \"machine\"     \"main\"        \"major\"       \"make\"       \n[501] \"man\"         \"manage\"      \"many\"        \"mark\"        \"market\"     \n[506] \"marry\"       \"match\"       \"matter\"      \"may\"         \"maybe\"      \n[511] \"mean\"        \"meaning\"     \"measure\"     \"meet\"        \"member\"     \n[516] \"mention\"     \"middle\"      \"might\"       \"mile\"        \"milk\"       \n[521] \"million\"     \"mind\"        \"minister\"    \"minus\"       \"minute\"     \n[526] \"miss\"        \"mister\"      \"moment\"      \"monday\"      \"money\"      \n[531] \"month\"       \"more\"        \"morning\"     \"most\"        \"mother\"     \n[536] \"motion\"      \"move\"        \"mrs\"         \"much\"        \"music\"      \n[541] \"must\"        \"name\"        \"nation\"      \"nature\"      \"near\"       \n[546] \"necessary\"   \"need\"        \"never\"       \"new\"         \"news\"       \n[551] \"next\"        \"nice\"        \"night\"       \"nine\"        \"no\"         \n[556] \"non\"         \"none\"        \"normal\"      \"north\"       \"not\"        \n[561] \"note\"        \"notice\"      \"now\"         \"number\"      \"obvious\"    \n[566] \"occasion\"    \"odd\"         \"of\"          \"off\"         \"offer\"      \n[571] \"office\"      \"often\"       \"okay\"        \"old\"         \"on\"         \n[576] \"once\"        \"one\"         \"only\"        \"open\"        \"operate\"    \n[581] \"opportunity\" \"oppose\"      \"or\"          \"order\"       \"organize\"   \n[586] \"original\"    \"other\"       \"otherwise\"   \"ought\"       \"out\"        \n[591] \"over\"        \"own\"         \"pack\"        \"page\"        \"paint\"      \n[596] \"pair\"        \"paper\"       \"paragraph\"   \"pardon\"      \"parent\"     \n[601] \"park\"        \"part\"        \"particular\"  \"party\"       \"pass\"       \n[606] \"past\"        \"pay\"         \"pence\"       \"pension\"     \"people\"     \n[611] \"per\"         \"percent\"     \"perfect\"     \"perhaps\"     \"period\"     \n[616] \"person\"      \"photograph\"  \"pick\"        \"picture\"     \"piece\"      \n[621] \"place\"       \"plan\"        \"play\"        \"please\"      \"plus\"       \n[626] \"point\"       \"police\"      \"policy\"      \"politic\"     \"poor\"       \n[631] \"position\"    \"positive\"    \"possible\"    \"post\"        \"pound\"      \n[636] \"power\"       \"practise\"    \"prepare\"     \"present\"     \"press\"      \n[641] \"pressure\"    \"presume\"     \"pretty\"      \"previous\"    \"price\"      \n[646] \"print\"       \"private\"     \"probable\"    \"problem\"     \"proceed\"    \n[651] \"process\"     \"produce\"     \"product\"     \"programme\"   \"project\"    \n[656] \"proper\"      \"propose\"     \"protect\"     \"provide\"     \"public\"     \n[661] \"pull\"        \"purpose\"     \"push\"        \"put\"         \"quality\"    \n[666] \"quarter\"     \"question\"    \"quick\"       \"quid\"        \"quiet\"      \n[671] \"quite\"       \"radio\"       \"rail\"        \"raise\"       \"range\"      \n[676] \"rate\"        \"rather\"      \"read\"        \"ready\"       \"real\"       \n[681] \"realise\"     \"really\"      \"reason\"      \"receive\"     \"recent\"     \n[686] \"reckon\"      \"recognize\"   \"recommend\"   \"record\"      \"red\"        \n[691] \"reduce\"      \"refer\"       \"regard\"      \"region\"      \"relation\"   \n[696] \"remember\"    \"report\"      \"represent\"   \"require\"     \"research\"   \n[701] \"resource\"    \"respect\"     \"responsible\" \"rest\"        \"result\"     \n[706] \"return\"      \"rid\"         \"right\"       \"ring\"        \"rise\"       \n[711] \"road\"        \"role\"        \"roll\"        \"room\"        \"round\"      \n[716] \"rule\"        \"run\"         \"safe\"        \"sale\"        \"same\"       \n[721] \"saturday\"    \"save\"        \"say\"         \"scheme\"      \"school\"     \n[726] \"science\"     \"score\"       \"scotland\"    \"seat\"        \"second\"     \n[731] \"secretary\"   \"section\"     \"secure\"      \"see\"         \"seem\"       \n[736] \"self\"        \"sell\"        \"send\"        \"sense\"       \"separate\"   \n[741] \"serious\"     \"serve\"       \"service\"     \"set\"         \"settle\"     \n[746] \"seven\"       \"sex\"         \"shall\"       \"share\"       \"she\"        \n[751] \"sheet\"       \"shoe\"        \"shoot\"       \"shop\"        \"short\"      \n[756] \"should\"      \"show\"        \"shut\"        \"sick\"        \"side\"       \n[761] \"sign\"        \"similar\"     \"simple\"      \"since\"       \"sing\"       \n[766] \"single\"      \"sir\"         \"sister\"      \"sit\"         \"site\"       \n[771] \"situate\"     \"six\"         \"size\"        \"sleep\"       \"slight\"     \n[776] \"slow\"        \"small\"       \"smoke\"       \"so\"          \"social\"     \n[781] \"society\"     \"some\"        \"son\"         \"soon\"        \"sorry\"      \n[786] \"sort\"        \"sound\"       \"south\"       \"space\"       \"speak\"      \n[791] \"special\"     \"specific\"    \"speed\"       \"spell\"       \"spend\"      \n[796] \"square\"      \"staff\"       \"stage\"       \"stairs\"      \"stand\"      \n[801] \"standard\"    \"start\"       \"state\"       \"station\"     \"stay\"       \n[806] \"step\"        \"stick\"       \"still\"       \"stop\"        \"story\"      \n[811] \"straight\"    \"strategy\"    \"street\"      \"strike\"      \"strong\"     \n[816] \"structure\"   \"student\"     \"study\"       \"stuff\"       \"stupid\"     \n[821] \"subject\"     \"succeed\"     \"such\"        \"sudden\"      \"suggest\"    \n[826] \"suit\"        \"summer\"      \"sun\"         \"sunday\"      \"supply\"     \n[831] \"support\"     \"suppose\"     \"sure\"        \"surprise\"    \"switch\"     \n[836] \"system\"      \"table\"       \"take\"        \"talk\"        \"tape\"       \n[841] \"tax\"         \"tea\"         \"teach\"       \"team\"        \"telephone\"  \n[846] \"television\"  \"tell\"        \"ten\"         \"tend\"        \"term\"       \n[851] \"terrible\"    \"test\"        \"than\"        \"thank\"       \"the\"        \n[856] \"then\"        \"there\"       \"therefore\"   \"they\"        \"thing\"      \n[861] \"think\"       \"thirteen\"    \"thirty\"      \"this\"        \"thou\"       \n[866] \"though\"      \"thousand\"    \"three\"       \"through\"     \"throw\"      \n[871] \"thursday\"    \"tie\"         \"time\"        \"to\"          \"today\"      \n[876] \"together\"    \"tomorrow\"    \"tonight\"     \"too\"         \"top\"        \n[881] \"total\"       \"touch\"       \"toward\"      \"town\"        \"trade\"      \n[886] \"traffic\"     \"train\"       \"transport\"   \"travel\"      \"treat\"      \n[891] \"tree\"        \"trouble\"     \"true\"        \"trust\"       \"try\"        \n[896] \"tuesday\"     \"turn\"        \"twelve\"      \"twenty\"      \"two\"        \n[901] \"type\"        \"under\"       \"understand\"  \"union\"       \"unit\"       \n[906] \"unite\"       \"university\"  \"unless\"      \"until\"       \"up\"         \n[911] \"upon\"        \"use\"         \"usual\"       \"value\"       \"various\"    \n[916] \"very\"        \"video\"       \"view\"        \"village\"     \"visit\"      \n[921] \"vote\"        \"wage\"        \"wait\"        \"walk\"        \"wall\"       \n[926] \"want\"        \"war\"         \"warm\"        \"wash\"        \"waste\"      \n[931] \"watch\"       \"water\"       \"way\"         \"we\"          \"wear\"       \n[936] \"wednesday\"   \"wee\"         \"week\"        \"weigh\"       \"welcome\"    \n[941] \"well\"        \"west\"        \"what\"        \"when\"        \"where\"      \n[946] \"whether\"     \"which\"       \"while\"       \"white\"       \"who\"        \n[951] \"whole\"       \"why\"         \"wide\"        \"wife\"        \"will\"       \n[956] \"win\"         \"wind\"        \"window\"      \"wish\"        \"with\"       \n[961] \"within\"      \"without\"     \"woman\"       \"wonder\"      \"wood\"       \n[966] \"word\"        \"work\"        \"world\"       \"worry\"       \"worse\"      \n[971] \"worth\"       \"would\"       \"write\"       \"wrong\"       \"year\"       \n[976] \"yes\"         \"yesterday\"   \"yet\"         \"you\"         \"young\"      \n\nhead(stringr::words, 100)\n\n  [1] \"a\"           \"able\"        \"about\"       \"absolute\"    \"accept\"     \n  [6] \"account\"     \"achieve\"     \"across\"      \"act\"         \"active\"     \n [11] \"actual\"      \"add\"         \"address\"     \"admit\"       \"advertise\"  \n [16] \"affect\"      \"afford\"      \"after\"       \"afternoon\"   \"again\"      \n [21] \"against\"     \"age\"         \"agent\"       \"ago\"         \"agree\"      \n [26] \"air\"         \"all\"         \"allow\"       \"almost\"      \"along\"      \n [31] \"already\"     \"alright\"     \"also\"        \"although\"    \"always\"     \n [36] \"america\"     \"amount\"      \"and\"         \"another\"     \"answer\"     \n [41] \"any\"         \"apart\"       \"apparent\"    \"appear\"      \"apply\"      \n [46] \"appoint\"     \"approach\"    \"appropriate\" \"area\"        \"argue\"      \n [51] \"arm\"         \"around\"      \"arrange\"     \"art\"         \"as\"         \n [56] \"ask\"         \"associate\"   \"assume\"      \"at\"          \"attend\"     \n [61] \"authority\"   \"available\"   \"aware\"       \"away\"        \"awful\"      \n [66] \"baby\"        \"back\"        \"bad\"         \"bag\"         \"balance\"    \n [71] \"ball\"        \"bank\"        \"bar\"         \"base\"        \"basis\"      \n [76] \"be\"          \"bear\"        \"beat\"        \"beauty\"      \"because\"    \n [81] \"become\"      \"bed\"         \"before\"      \"begin\"       \"behind\"     \n [86] \"believe\"     \"benefit\"     \"best\"        \"bet\"         \"between\"    \n [91] \"big\"         \"bill\"        \"birth\"       \"bit\"         \"black\"      \n [96] \"bloke\"       \"blood\"       \"blow\"        \"blue\"        \"board\"      \n\n\n\n# The stringr pacakge also includes many functions. For example one of \n# those functions is str_length.\n\n# The str_length function is part of the stringr package.\n# To use it you must install stringr (or install tidyverse, which is a \n# collection of packages one of which is stringr)\nstr_length(c(\"abc\", \"hello\", \"I like ice cream!\"))\n\n[1]  3  5 17\n\n# This function is very similar to the\n# nchar function that is built into base R.\nnchar(c(\"abc\", \"hello\", \"I like ice cream!\"))  \n\n[1]  3  5 17",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#grep-function",
    "href": "0200200-introToRegularExpressions-v036.html#grep-function",
    "title": "11  regular expressions (regex)",
    "section": "11.2 grep function",
    "text": "11.2 grep function\n\n# Show all words that\n# \"start with a p, end with a y (with anything in the middle)\"\ngrep(stringr::words, pattern=\"^p.*y$\", value=TRUE)\n\n[1] \"party\"  \"pay\"    \"play\"   \"policy\" \"pretty\"\n\n# Starts with a p, ends with a y, nothing in the middle.\n# Only matches \"py\". \n# There are no words that match.\ngrep(stringr::words, pattern=\"^py$\", value=TRUE)\n\ncharacter(0)\n\n# match any word that start with p, ends with y and has a single\n# character between them\ngrep(stringr::words, pattern=\"^p.y$\", value=TRUE)\n\n[1] \"pay\"\n\n# match any word that start with p, ends with y and\n# has exactly two characters between them.\ngrep(stringr::words, pattern=\"^p..y$\", value=TRUE)\n\n[1] \"play\"\n\n# match any word that start with p, ends with y and\n# has exactly four characters between them.\ngrep(stringr::words, pattern=\"^p....y$\", value=TRUE)\n\n[1] \"policy\" \"pretty\"\n\n# match any sequence of characters between the p and the y\ngrep(stringr::words, pattern=\"^p.*y$\", value=TRUE)\n\n[1] \"party\"  \"pay\"    \"play\"   \"policy\" \"pretty\"\n\n# starts with a p\ngrep(stringr::words, pattern=\"^p\", value=TRUE)\n\n [1] \"pack\"       \"page\"       \"paint\"      \"pair\"       \"paper\"     \n [6] \"paragraph\"  \"pardon\"     \"parent\"     \"park\"       \"part\"      \n[11] \"particular\" \"party\"      \"pass\"       \"past\"       \"pay\"       \n[16] \"pence\"      \"pension\"    \"people\"     \"per\"        \"percent\"   \n[21] \"perfect\"    \"perhaps\"    \"period\"     \"person\"     \"photograph\"\n[26] \"pick\"       \"picture\"    \"piece\"      \"place\"      \"plan\"      \n[31] \"play\"       \"please\"     \"plus\"       \"point\"      \"police\"    \n[36] \"policy\"     \"politic\"    \"poor\"       \"position\"   \"positive\"  \n[41] \"possible\"   \"post\"       \"pound\"      \"power\"      \"practise\"  \n[46] \"prepare\"    \"present\"    \"press\"      \"pressure\"   \"presume\"   \n[51] \"pretty\"     \"previous\"   \"price\"      \"print\"      \"private\"   \n[56] \"probable\"   \"problem\"    \"proceed\"    \"process\"    \"produce\"   \n[61] \"product\"    \"programme\"  \"project\"    \"proper\"     \"propose\"   \n[66] \"protect\"    \"provide\"    \"public\"     \"pull\"       \"purpose\"   \n[71] \"push\"       \"put\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#grep-and-grepl",
    "href": "0200200-introToRegularExpressions-v036.html#grep-and-grepl",
    "title": "11  regular expressions (regex)",
    "section": "11.3 grep and grepl",
    "text": "11.3 grep and grepl\n\n# When value=FALSE grep returns the positions in the vector of \n# values that matched\ngrep(stringr::words, pattern=\"^p.*y$\", value=TRUE)\n\n[1] \"party\"  \"pay\"    \"play\"   \"policy\" \"pretty\"\n\ngrep(stringr::words, pattern=\"^p.*y$\", value=FALSE)\n\n[1] 604 607 623 628 643\n\n# default is value=FALSE\ngrep(stringr::words, pattern=\"^p.*y$\", value=FALSE)\n\n[1] 604 607 623 628 643\n\n\n\n#@ grep and grepl\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#@ grep stands for \"Globally search for a Regular Expression and Print the result\"\n#@\n#@ Grep will search through the entries in a character vector and display those\n#@ entries that match a specified pattern (see examples below). These patterns\n#@ are known as regular expressions or \"regex\".\n#@\n#@ The history of grep started with a a command that was used on the Unix operating\n#@ system. It has been adapted for use with many programming environments. R has\n#@ its own version.\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n# grep ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# grep returns character values or the indexes (i.e. position numbers) \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Find all fruit whose name contains the letter \"h\"\ngrep(pattern=\"h\", x=fruit, value=TRUE)   # value=TRUE, show the acutal values that match the pattern \n\n[1] \"cherry\"       \"black cherry\" \"peach\"        \"honeydew\"    \n\ngrep(pattern=\"h\", x=fruit, value=FALSE)  # value=FALSE, show the index (ie. position) of the values that match \n\n[1]  9 10 11 17\n\n# grepl ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# grepl returns logical values (i.e. TRUE/FALSE vectors)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngrepl(pattern=\"h\", x=fruit)    # find which values include an \"h\"\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE\n[13] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Summary: 3 ways to use grep or grepl\n#\n# - grep ( regexPattern , value=TRUE)  # returns the actual values that match  \n# - grep ( regexPattern , value=FALSE) # returns the index numbers of the values that match  \n# - grepl ( regexPattern )              # returns a logical vector that indicate which values match  \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# For now, let's focus on grep(... , value=TRUE) as it is easier to understand the results. \n\n\n# The pattern is searched for in the entire entry ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The pattern is considered \"matched\" if it appears anywhere in the data value.\n# For example:   grep(\"h\", fruit)\n#\n# returns all fruit that contain an \"h\", no matter whether the h is at the \n# beginning, end or middle of the word.\n#\n# You can change this behavior with the ^ and $ metacharacters (see below)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n# spaces in regex patterns are meaningful ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Spaces are NOT ignored. Spaces count as part of the pattern \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# fruits that contain a space\ngrep(pattern=\" \", x=fruit, value=TRUE) # all fruit that contain a space\n\n[1] \"N. American apple\" \"S. Korean Fig\"     \"star fruit\"       \n[4] \"prickly pear\"      \"Beurre Hardy pear\" \"black cherry\"     \n\n# serach for \"k\"  (i.e. JUST a \"k\")\ngrep(\"k\", fruit, value=TRUE) # \"prickly pear\"  \"black cherry\"  \"kumquat\"\n\n[1] \"prickly pear\" \"black cherry\" \"kumquat\"     \n\ngrep(\"ck\", fruit, value=TRUE) # \"prickly pear\"  \"black cherry\"  \"kumquat\"\n\n[1] \"prickly pear\" \"black cherry\"\n\n# search for \"k \"  (i.e. k followed by a space)\ngrep(\"k \", fruit, value=TRUE) # \"black cherry\"\n\n[1] \"black cherry\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#regex-patterns-do-not-understand-numbers",
    "href": "0200200-introToRegularExpressions-v036.html#regex-patterns-do-not-understand-numbers",
    "title": "11  regular expressions (regex)",
    "section": "11.4 regex patterns do NOT understand “numbers”",
    "text": "11.4 regex patterns do NOT understand “numbers”\n\n# regex patterns do NOT understand \"numbers\" ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Digits are NOT treated as numbers. They are treated the same as any\n# other character. Therefore grep(\"12\", SOME_VECTOR) will match any value\n# that contains a 1 followed by a 2, including \"123\" and \"34321234\".\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\naddresses # show all the addresses\n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"5678 Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. 623\"              \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[15] \"Three Main Street Apt 12343\"       \"City Hall Lockport, NY\"           \n\ngrep(\"23\", addresses, value=TRUE)  # matches anything that contains 23\n\n[1] \"12345 Sesame Street\"         \"9 Main St. apt. 623\"        \n[3] \"Two Main Street Apt 123c\"    \"Three Main Street Apt 12343\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#case-sensitivity",
    "href": "0200200-introToRegularExpressions-v036.html#case-sensitivity",
    "title": "11  regular expressions (regex)",
    "section": "11.5 case sensitivity",
    "text": "11.5 case sensitivity\n\n# Regular expressions (in R) are case sensitive by default ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# By default, R's version of grep is case sensitive.\n# There are a few different approaches for searching case-INsensitively ####.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# The first way - use ignore.case = TRUE\n#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\ngrep(\"H\",fruit, value=TRUE)  # contains a capital \"H\"\n\n[1] \"Beurre Hardy pear\"\n\ngrep(\"h\",fruit, value=TRUE)  # contains a lowercase \"h\"\n\n[1] \"cherry\"       \"black cherry\" \"peach\"        \"honeydew\"    \n\ngrep(\"h\", fruit, value=TRUE, ignore.case=TRUE) # contains AnY h\n\n[1] \"Beurre Hardy pear\" \"cherry\"            \"black cherry\"     \n[4] \"peach\"             \"honeydew\"         \n\ngrep(\"H\", fruit, value=TRUE, ignore.case=TRUE) # same thing\n\n[1] \"Beurre Hardy pear\" \"cherry\"            \"black cherry\"     \n[4] \"peach\"             \"honeydew\"         \n\n#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# Another way to search for for both CAPITAL and lowercase characters, e.g. [Hh]\n# For example, [hH] indicates that h or H is valid to be matched. \n# We will describe the exact meaning of the [square brackets] in a lot more \n# detail below.\n#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\ngrep(\"[hH]\", fruit, value=TRUE)\n\n[1] \"Beurre Hardy pear\" \"cherry\"            \"black cherry\"     \n[4] \"peach\"             \"honeydew\"         \n\n#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# another way using R's toupper or tolower functions.\n#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nmsg = \"She said 'Hello' to Joe.\"\nmsg\n\n[1] \"She said 'Hello' to Joe.\"\n\ntoupper(msg)\n\n[1] \"SHE SAID 'HELLO' TO JOE.\"\n\ntolower(msg)\n\n[1] \"she said 'hello' to joe.\"\n\ngrep(\"h\", tolower(fruit), value=TRUE)\n\n[1] \"beurre hardy pear\" \"cherry\"            \"black cherry\"     \n[4] \"peach\"             \"honeydew\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#str_view-from-the-stringr-package",
    "href": "0200200-introToRegularExpressions-v036.html#str_view-from-the-stringr-package",
    "title": "11  regular expressions (regex)",
    "section": "11.6 str_view from the stringr package",
    "text": "11.6 str_view from the stringr package\nThe str_view function from the stringr package can be very helpful when you’re trying to understand a regular expression. str_view shows exactly what parts of a string match the pattern. See the example below.\n\n# str_view is part of the stringr package\nlibrary(stringr)\n\ngreetings = c(\"hi there\", \"yo dude\", \"shalom\", \"bon jour\")\ncat(greetings, sep=\"\\n\")\n\nhi there\nyo dude\nshalom\nbon jour\n\n# match the letter h in each greeting\nstr_view(greetings, \"h\")\n\n[1] │ &lt;h&gt;i t&lt;h&gt;ere\n[3] │ s&lt;h&gt;alom",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#sub-and-gsub-functions",
    "href": "0200200-introToRegularExpressions-v036.html#sub-and-gsub-functions",
    "title": "11  regular expressions (regex)",
    "section": "11.7 sub and gsub functions",
    "text": "11.7 sub and gsub functions\n\n#@ sub and gsub functions ####\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#@\n#@ sub (SOME_REGEX_PATTERN, REPLACMENT, SOME_VECTOR)\n#@    sub returns a new vector. The return value is the same as SOME_VECTOR\n#@    except that the FIRST match of the pattern in each entry of SOME_VECTOR\n#@    is replaced with REPLACEMENT - see the examples below.\n#@\n#@ gsub (SOME_REGEX_PATTERN, REPLACMENT, SOME_VECTOR)\n#@    same as sub but ALL matches of the pattern are replaced (not just the\n#@    first in each entry of the the vector - see the exmaples below\n#@\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# replace the first letter \"e\" that appears in any fruit with the letter \"X\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\nsub(pattern=\"e\", replacement=\"X\", x=fruit)  # \"applX\"    \"N. AmXrican apple\"     etc\n\n [1] \"applX\"             \"N. AmXrican apple\" \"S. KorXan Fig\"    \n [4] \"fig\"               \"star fruit\"        \"pXar\"             \n [7] \"prickly pXar\"      \"BXurre Hardy pear\" \"chXrry\"           \n[10] \"black chXrry\"      \"pXach\"             \"plum\"             \n[13] \"kumquat\"           \"banana\"            \"bluXberry\"        \n[16] \"strawbXrry\"        \"honXydew\"          \"strawbXrries\"     \n[19] \"yumbXrry\"         \n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# replace ALL of the \"e\"s that appears in any fruit with the letter \"x\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\ngsub(pattern=\"e\", replacement=\"X\", fruit)   # \"applX\"    \"N. AmXrican applX\"     etc\n\n [1] \"applX\"             \"N. AmXrican applX\" \"S. KorXan Fig\"    \n [4] \"fig\"               \"star fruit\"        \"pXar\"             \n [7] \"prickly pXar\"      \"BXurrX Hardy pXar\" \"chXrry\"           \n[10] \"black chXrry\"      \"pXach\"             \"plum\"             \n[13] \"kumquat\"           \"banana\"            \"bluXbXrry\"        \n[16] \"strawbXrry\"        \"honXydXw\"          \"strawbXrriXs\"     \n[19] \"yumbXrry\"         \n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# remove all spaces from the addresses\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\ngsub(pattern=\" \", replacement=\"\", addresses)   # \"12345SesameStreet\"   \"OneMicro$oftWay\"   etc.\n\n [1] \"12345SesameStreet\"               \"OneMicro$oftWay\"                \n [3] \"3OliveSt.\"                       \"Two1stAve.\"                     \n [5] \"5678ParkPlace\"                   \"FortyFive2ndStreet\"             \n [7] \"NinetyNineConeSt.apartment7\"     \"9MainSt.apt.623\"                \n [9] \"FiveGoogleDrive\"                 \"4\\\\2RechovYafo\"                 \n[11] \"FifteenWatchamacallitBoulevard\"  \"NineteenWatchamacallitBoulevard\"\n[13] \"OneMainStreetApt12b\"             \"TwoMainStreetApt123c\"           \n[15] \"ThreeMainStreetApt12343\"         \"CityHallLockport,NY\"            \n\n# We will revisit sub and gsub later with more complex examples ...",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#strsplit-function",
    "href": "0200200-introToRegularExpressions-v036.html#strsplit-function",
    "title": "11  regular expressions (regex)",
    "section": "11.8 strsplit function",
    "text": "11.8 strsplit function\n\n##################################################################.\n# strsplit \n#\n# strsplit is used to split a string based on a \"delimeter\" that appears\n# between the different values. This \"delimeter\" can be a regular expression.\n# We'll come back to strsplit later, but let's introduce it here.\n##################################################################.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Example\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsentences = c(\"He said hi. She said bye. We went to the park.\",\n              \"I like ice cream! Do you? Sue likes pizza.\")\nsentences\n\n[1] \"He said hi. She said bye. We went to the park.\"\n[2] \"I like ice cream! Do you? Sue likes pizza.\"    \n\n# QUESTION - \n# Use strsplit to split the values in the sentences vector by \n# splitting based on spaces. Assign the result to the varible \"sentenceWords\".\n#\n# Write code to get the 3rd \"word\" from the 1st entry in the sentences \n# vector.\n\n\n?strsplit\n\nstarting httpd help server ... done\n\nsentenceWords = strsplit(sentences, split=\" \")\nsentenceWords\n\n[[1]]\n [1] \"He\"    \"said\"  \"hi.\"   \"She\"   \"said\"  \"bye.\"  \"We\"    \"went\"  \"to\"   \n[10] \"the\"   \"park.\"\n\n[[2]]\n[1] \"I\"      \"like\"   \"ice\"    \"cream!\" \"Do\"     \"you?\"   \"Sue\"    \"likes\" \n[9] \"pizza.\"\n\n# Notice that the result is a LIST:\nstr(sentenceWords)\n\nList of 2\n $ : chr [1:11] \"He\" \"said\" \"hi.\" \"She\" ...\n $ : chr [1:9] \"I\" \"like\" \"ice\" \"cream!\" ...\n\n# Show the 3rd word in the 1st sentence\nsentenceWords[[1]][3]\n\n[1] \"hi.\"\n\n\n\n11.8.1 — practice —\n\n# QUESTION - split each entry in the sentences variable into individual \n# sententces. \n# \n# WARNING - the value of the split argument is interpreted as a\n# regular expression pattern. Be careful.\n\n# 1st attempt - doesn't work. \nstrsplit(sentences, \".\")\n\n[[1]]\n [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n[26] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n\n[[2]]\n [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n[26] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n\n# This doesn't work since the 2nd argument is a regular expression.\n# The following will split based on periods.\nsentences\n\n[1] \"He said hi. She said bye. We went to the park.\"\n[2] \"I like ice cream! Do you? Sue likes pizza.\"    \n\nstrsplit(sentences, \"\\\\.\")\n\n[[1]]\n[1] \"He said hi\"           \" She said bye\"        \" We went to the park\"\n\n[[2]]\n[1] \"I like ice cream! Do you? Sue likes pizza\"\n\n# Use a \"regular expression\" to instead split on any of a period, \n# question mark, or exclamation point.\nsentences\n\n[1] \"He said hi. She said bye. We went to the park.\"\n[2] \"I like ice cream! Do you? Sue likes pizza.\"    \n\nstrsplit(sentences, \"[.?!]\")  # split on any one of .?!\n\n[[1]]\n[1] \"He said hi\"           \" She said bye\"        \" We went to the park\"\n\n[[2]]\n[1] \"I like ice cream\" \" Do you\"          \" Sue likes pizza\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#anchors-and",
    "href": "0200200-introToRegularExpressions-v036.html#anchors-and",
    "title": "11  regular expressions (regex)",
    "section": "11.9 “anchors” ^ and $",
    "text": "11.9 “anchors” ^ and $\n\n# ^ and $    ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Regular Expressions use special characters to control what is matched.\n# These characters are called \"meta-characters\".\n#\n#   ^  \"matches\" the start of the character value\n#   $  \"matches\" the end of the character value\n#\n#   The [square brackets] described above are also \"meta characters\" in\n#   regular expressions. (We will describe those in more detail next)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngrep(pattern=\"^a\", x=fruit, value=TRUE)  # find fruits that START with an \"a\"\n\n[1] \"apple\"\n\ngrep(\"a$\", fruit, value=TRUE)  # find fruits that END with an \"a\"\n\n[1] \"banana\"\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Write a command using grep to display all the fruits that start with\n# with a c or an s. Make your search case insensitive.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#         ANSWERS ####\ngrep(\"^[csCS]\", fruit, value=TRUE)\n\n[1] \"S. Korean Fig\" \"star fruit\"    \"cherry\"        \"strawberry\"   \n[5] \"strawberries\" \n\ngrep(\"^[cs]\", fruit, value=TRUE, ignore.case = TRUE)\n\n[1] \"S. Korean Fig\" \"star fruit\"    \"cherry\"        \"strawberry\"   \n[5] \"strawberries\" \n\ngrep(\"^[cs]\", tolower(fruit), value=TRUE)\n\n[1] \"s. korean fig\" \"star fruit\"    \"cherry\"        \"strawberry\"   \n[5] \"strawberries\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#periods",
    "href": "0200200-introToRegularExpressions-v036.html#periods",
    "title": "11  regular expressions (regex)",
    "section": "11.10 periods",
    "text": "11.10 periods\n\n# . (i.e. a period) ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# a period (ie  .  ) \"matches\" any single character.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngrep(\"^.a\", fruit, value=TRUE)  # 2nd letter is a\n\n[1] \"banana\"\n\ngrep(\"^..a\", fruit, value=TRUE)  # 3rd letter is a\n\n[1] \"star fruit\"   \"pear\"         \"black cherry\" \"peach\"       \n\ngrep(\"a.$\", fruit, value=TRUE)  # 2nd to last letter is an a\n\n[1] \"pear\"              \"prickly pear\"      \"Beurre Hardy pear\"\n[4] \"kumquat\"          \n\ngrep(\"....\", fruit, value=TRUE) # all fruit that are AT LEAST 4 characters long\n\n [1] \"apple\"             \"N. American apple\" \"S. Korean Fig\"    \n [4] \"star fruit\"        \"pear\"              \"prickly pear\"     \n [7] \"Beurre Hardy pear\" \"cherry\"            \"black cherry\"     \n[10] \"peach\"             \"plum\"              \"kumquat\"          \n[13] \"banana\"            \"blueberry\"         \"strawberry\"       \n[16] \"honeydew\"          \"strawberries\"      \"yumberry\"         \n\ngrep(\"^....$\", fruit, value=TRUE) # all fruit that are EXACTLY 4 characters long\n\n[1] \"pear\" \"plum\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#character-classes-eg.-abc",
    "href": "0200200-introToRegularExpressions-v036.html#character-classes-eg.-abc",
    "title": "11  regular expressions (regex)",
    "section": "11.11 “character classes” eg. [abc]",
    "text": "11.11 “character classes” eg. [abc]\n\n# [abc] matches a SINGLE \"a\", \"b\" or \"c\".    ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# characters in [square brackets] match a single copy of\n# any of those characters, e.g.\n#  [abc]    matches exactly one of a,b or c\n#\n# DEFINITION: \n# The [square brackets] with the characters in them are often referred to as \n# \"character classes\" or \"character sets\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n11.11.1 Examples\n\ngrep(\"[qbxz]\", fruit, value=TRUE)  # find fruit that contain q,b,x or z\n\n[1] \"black cherry\" \"kumquat\"      \"banana\"       \"blueberry\"    \"strawberry\"  \n[6] \"strawberries\" \"yumberry\"    \n\ngrep(\"[aeiou][aeiou]\", fruit, value=TRUE)  # two vowels in a row\n\n[1] \"S. Korean Fig\"     \"star fruit\"        \"pear\"             \n[4] \"prickly pear\"      \"Beurre Hardy pear\" \"peach\"            \n[7] \"kumquat\"           \"blueberry\"         \"strawberries\"     \n\ngrep(\"^.[aeiou][aeiou]\", fruit, value=TRUE)  # vowels in the 2nd and 3rd positions\n\n[1] \"pear\"              \"Beurre Hardy pear\" \"peach\"            \n\ngrep(\"[aeiou][aeiou].$\", fruit, value=TRUE)  # 2nd & 3rd to last characters are vowels\n\n[1] \"star fruit\"        \"pear\"              \"prickly pear\"     \n[4] \"Beurre Hardy pear\" \"kumquat\"           \"strawberries\"     \n\ngrep(\"[aeiou][aeiou][aeiou]\", fruit, value=TRUE)  # 3 vowels in a row\n\ncharacter(0)\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# replace the FIRST vowel that appears in any fruit with the letter \"X\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# replace ALL vowels that appears in any fruit with the letter \"X\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\ngsub(\"[aeiouAEIOU]\", \"X\", fruit)\n\n [1] \"XpplX\"             \"N. XmXrXcXn XpplX\" \"S. KXrXXn FXg\"    \n [4] \"fXg\"               \"stXr frXXt\"        \"pXXr\"             \n [7] \"prXckly pXXr\"      \"BXXrrX HXrdy pXXr\" \"chXrry\"           \n[10] \"blXck chXrry\"      \"pXXch\"             \"plXm\"             \n[13] \"kXmqXXt\"           \"bXnXnX\"            \"blXXbXrry\"        \n[16] \"strXwbXrry\"        \"hXnXydXw\"          \"strXwbXrrXXs\"     \n[19] \"yXmbXrry\"         \n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# remove ALL of the vowels that appear in any fruit\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\ngsub(\"[aeiouAEIOU]\", \"\", fruit)\n\n [1] \"ppl\"         \"N. mrcn ppl\" \"S. Krn Fg\"   \"fg\"          \"str frt\"    \n [6] \"pr\"          \"prckly pr\"   \"Brr Hrdy pr\" \"chrry\"       \"blck chrry\" \n[11] \"pch\"         \"plm\"         \"kmqt\"        \"bnn\"         \"blbrry\"     \n[16] \"strwbrry\"    \"hnydw\"       \"strwbrrs\"    \"ymbrry\"     \n\n\n\n\n11.11.2 dashes, e.g. [a-d]\n\n# Specify ranges with dash, e.g. [a-d] or [0-3] or [a-d0-3], etc ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Specify ranges with dash, e.g. [a-d] is same as [abcd], [0-3] is same as [0123] ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n11.11.3 Examples\n\ngrep(\"[j-m]\", fruit, value=TRUE)  # fruits that contain any of j,k,l,m\n\n[1] \"apple\"             \"N. American apple\" \"prickly pear\"     \n[4] \"black cherry\"      \"plum\"              \"kumquat\"          \n[7] \"blueberry\"         \"yumberry\"         \n\naddresses  # this was defined above\n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"5678 Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. 623\"              \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[15] \"Three Main Street Apt 12343\"       \"City Hall Lockport, NY\"           \n\ngrep(\"[0-9]\", addresses, value=TRUE)  # contains a digit\n\n [1] \"12345 Sesame Street\"              \"3 Olive St.\"                     \n [3] \"Two 1st Ave.\"                     \"5678 Park Place\"                 \n [5] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n [7] \"9 Main St. apt. 623\"              \"4\\\\2 Rechov Yafo\"                \n [9] \"One Main Street Apt 12b\"          \"Two Main Street Apt 123c\"        \n[11] \"Three Main Street Apt 12343\"     \n\ngrep(\"[6-9]\", addresses, value=TRUE)  # contains 6,7,8 or 9\n\n[1] \"5678 Park Place\"                  \"Ninety Nine Cone St. apartment 7\"\n[3] \"9 Main St. apt. 623\"             \n\ngrep(\"[0-9][0-9]\", addresses, value=TRUE)  # contains a number with at least 2 digits\n\n[1] \"12345 Sesame Street\"         \"5678 Park Place\"            \n[3] \"9 Main St. apt. 623\"         \"One Main Street Apt 12b\"    \n[5] \"Two Main Street Apt 123c\"    \"Three Main Street Apt 12343\"\n\ngrep(\"[0-9][0-9][0-9][0-9]\", addresses, value=TRUE)  # contains a # with at least 4 digits \n\n[1] \"12345 Sesame Street\"         \"5678 Park Place\"            \n[3] \"Three Main Street Apt 12343\"\n\ngrep(\"^[6-9]\", addresses, value=TRUE)  # contains 6,7,8 or 9 as the first character\n\n[1] \"9 Main St. apt. 623\"\n\ngrep(\"^.[6-9]\", addresses, value=TRUE) # 6,7,8 or 9 is second character\n\n[1] \"5678 Park Place\"\n\ngrep(\"[0-9]$\", addresses, value=TRUE) # last character is a digit\n\n[1] \"Ninety Nine Cone St. apartment 7\" \"9 Main St. apt. 623\"             \n[3] \"Three Main Street Apt 12343\"     \n\ngrep(\"[0-9][0-9][0-9]$\", addresses, value=TRUE) # ends with at least 3 digits\n\n[1] \"9 Main St. apt. 623\"         \"Three Main Street Apt 12343\"\n\ngrep(\"[0-9][0-9][0-9][0-9]$\", addresses, value=TRUE) # ends with at least 4 digits\n\n[1] \"Three Main Street Apt 12343\"\n\n\n\n\n11.11.4 combine multiple ranges one [brackets]\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# You can combine multiple ranges and values in a single [brackets]\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngrep(\"[1-3x-z]$\", addresses, value=TRUE) # ends with 1,2,3,x,y or z\n\n[1] \"One Micro$oft Way\"           \"9 Main St. apt. 623\"        \n[3] \"Three Main Street Apt 12343\"\n\ngrep(\"[of-hq]\", fruit, value=TRUE)  # seraches for any of o,f,g,h,q\n\n[1] \"S. Korean Fig\" \"fig\"           \"star fruit\"    \"cherry\"       \n[5] \"black cherry\"  \"peach\"         \"kumquat\"       \"honeydew\"     \n\n# REMEMBER THE [BRACKETS]!!!\ngrep(\"of-hq\", fruit, value=TRUE)  # searches for exactly :  \"of-hq\"\n\ncharacter(0)\n\n\n\n\n11.11.5 [^abc]\n\n# [^abc] matches a single character that is NOT a,b or c ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# When ^ is the FIRST character in the [^brackets] it means to match a \n# single character that is NOT one of the characters in the brackets\n#\n# [^abc]  - i.e. a single character that is NOT a,b or c\n# [^0-9]  - a non-digit\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngrep(\"^[^0-9]\", addresses, value=TRUE)  # does NOT start with a digit\n\n [1] \"One Micro$oft Way\"                 \"Two 1st Ave.\"                     \n [3] \"Forty Five 2nd Street\"             \"Ninety Nine Cone St. apartment 7\" \n [5] \"Five Google Drive\"                 \"Fifteen Watchamacallit Boulevard\" \n [7] \"Nineteen Watchamacallit Boulevard\" \"One Main Street Apt 12b\"          \n [9] \"Two Main Street Apt 123c\"          \"Three Main Street Apt 12343\"      \n[11] \"City Hall Lockport, NY\"           \n\ngrep(\"[^0-9]$\", addresses, value=TRUE)  # does NOT end with a digit\n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"5678 Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n [9] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[11] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[13] \"City Hall Lockport, NY\"           \n\ngrep(\"[^0-9]\", addresses, value=TRUE)\n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"5678 Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. 623\"              \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[15] \"Three Main Street Apt 12343\"       \"City Hall Lockport, NY\"           \n\n# Contains 5 non-vowels in a row (notice that space counts as a non-vowel)\ngrep(\"[^aeiou][^aeiou][^aeiou][^aeiou][^aeiou]\", fruit, value=TRUE, ignore.case=TRUE)\n\n[1] \"prickly pear\"      \"Beurre Hardy pear\" \"black cherry\"     \n\n\n\n\n11.11.6 metachars lose special meaning in brackets eg. [.$*]\n\n# meta characters in [brackets] other than ^ - and ] lose their special meaning ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Most meta characters inside of [brackets] are treated like any other character.\n# They do NOT have any special meaning in the brackets. Therefore you can use\n# them without any problem inside a character class. For example [.$]\n# matches either a period or a dollar sign (see exmaples below).\n#\n# The only exceptions are ^ - and ] which DO have a special meaning inside of\n# the [square brackets] - see more info below.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nstuff = c(\"This is a period: .\", \"apple\", \"45 oranges\", \"$2\", \"This is an open bracket: [\")\nstuff\n\n[1] \"This is a period: .\"        \"apple\"                     \n[3] \"45 oranges\"                 \"$2\"                        \n[5] \"This is an open bracket: [\"\n\n# EXAMPLE\n#\n# Match a period, left-square-bracket, or a dollar sign\n# You do NOT need backslashes inside of the [brackets]\ngrep(\"[.[$]\", stuff, value=TRUE)\n\n[1] \"This is a period: .\"        \"$2\"                        \n[3] \"This is an open bracket: [\"\n\n# ANOTHER EXAMPLE\n#\n# The following matches either a period or a digit.\n# You do NOT need to use a backslash before the period.\ngrep(\"[.1-9]\", stuff, value=TRUE)\n\n[1] \"This is a period: .\" \"45 oranges\"          \"$2\"                 \n\n# The backslash will not hurt (but it isn't necessary inside the character class)\n# (below we will explain why there are TWO backslashes - for now you can leave\n# off both of the backslashes)\ngrep(\"[\\\\.1-9]\", stuff, value=TRUE)\n\n[1] \"This is a period: .\" \"45 oranges\"          \"$2\"                 \n\n\n\n\n11.11.7 Special cases: ^ - ]\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Special cases:    ^    -    ]\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The following characters have to be addressed in a special way inside\n# of a character class. \n#\n# ^   As we saw above, if the first character in the brackets is ^ the regex will\n#     look for characters that are NOT in the brackets. If ^ appears anywhere else\n#     inside the brackets it has no special meaning.\n#\n# -   As we saw above, [a-d] is the same as [abcd]. Therefore the - has a special\n#     meaning inside of a character class. If you want to actually search\n#     for a -, it must be the first, e.g. [-abc] or last character, eg. [abc-]\n#     in the class.\n#\n# ]   has a special meaning - i.e. to end the character class. Therefore if \n#     you want to seach for an actual \"]\", the \"]\" should be specified\n#     as the very FIRST character in the class, e.g. []abc]\n#-------------------------------------------------------------------\n\n# Examples:\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n# The \".\" inside of [brackets] simply means an actual period.\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n\nstuff = c(\"...\", \"def\", \"...bbbzzzbz.bzz...z.b\", \"^^^\")\nstuff\n\n[1] \"...\"                   \"def\"                   \"...bbbzzzbz.bzz...z.b\"\n[4] \"^^^\"                  \n\ngrep (\"[.x]\", stuff, value=TRUE)\n\n[1] \"...\"                   \"...bbbzzzbz.bzz...z.b\"\n\n\n\n\n11.11.8 matching ^ inside [square brackets]\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n# The \"^\" inside of [brackets] has a different meaning if it is in the \n# first position or if it is anywhere else. For example:\n#\n# [^abc]   matches anything that is NOT an \"a\",\"b\" or \"c\"\n#\n# [a^bc]   \n# [abc^]   both of these examples matches one \"a\",\"b\",\"c\" or \"^\" character\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n\ncaretStuff = c(\"^^^\", \"hello\", \"???\")\ncaretStuff\n\n[1] \"^^^\"   \"hello\" \"???\"  \n\ngrep (\"[^a-z]\", caretStuff, value=TRUE)   # \"^^^\" \"???\"\n\n[1] \"^^^\" \"???\"\n\ngrep (\"[a-z^]\", caretStuff, value=TRUE)   # \"^^^\" \"hello\"\n\n[1] \"^^^\"   \"hello\"\n\ngrep (\"[^^]\", caretStuff, value=TRUE)     # \"hello\" \"???\"\n\n[1] \"hello\" \"???\"  \n\n# find all entries that have any symbol that is not a \".\", \"b\" or \"z\"\n\nstuff = c(\"...\", \"def\", \"...bbbzzzbz.bzz...z.b\", \"^^^\")\nstuff\n\n[1] \"...\"                   \"def\"                   \"...bbbzzzbz.bzz...z.b\"\n[4] \"^^^\"                  \n\ngrep (\"[^.bz]\", stuff, value=TRUE)\n\n[1] \"def\" \"^^^\"\n\n#grep(\"[a-z.]\", c())\n\n\n\n11.11.9 Matching a - inside [square brackets]\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Matching a dash (i.e. - ) inside a character class\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# As we saw earlier, inside of [bracketes] a dash special meaning (to indicate a range).\n# To actually match a dash as one of the characters place the dash as either the \n# first or last character in the brackets.\n\n\ndashStuff = c(\"---\", \"hello\", \"xxx\")\ndashStuff\n\n[1] \"---\"   \"hello\" \"xxx\"  \n\ngrep (\"[-xyz]\", dashStuff, value=TRUE)   # \"---\" \"xxx\"\n\n[1] \"---\" \"xxx\"\n\ngrep (\"[xyz-]\", dashStuff, value=TRUE)   # \"---\" \"xxx\"   (same thing)\n\n[1] \"---\" \"xxx\"\n\ngrep (\"[a-f]\", dashStuff, value=TRUE)   # \"hello\"\n\n[1] \"hello\"\n\ngrep (\"[-a-f]\", dashStuff, value=TRUE)   # \"---\" \"hello\"\n\n[1] \"---\"   \"hello\"\n\n\n\n\n11.11.10 Matching a ] inside [square brackets]\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# To match a closing-square-bracket \"]\" inside a character class you must\n# specify the ] as the very FIRST symbol in the character class.\n#\n# NOTE - there are no special rules for matching an open-square-bracket, \"[\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nstuff = c(\"]\", \"apple\", \"zzz\" )\nstuff\n\n[1] \"]\"     \"apple\" \"zzz\"  \n\ngrep(\"]\", stuff, value=TRUE)    #  \"]\"\n\n[1] \"]\"\n\n# The pattern \"[]a]\" matches a single character that is either \"]\" or \"a\".\n# It finds \"]\" and also \"apple\" (since \"apple\" it contains an \"a\").\n#\n# This works since \"]\" is placed as the very first character in the \n# [brackets] so it is simply one of the characters that is searched for.\n\ngrep(\"[]a]\", stuff, value=TRUE) #  \"]\"  \"apple\"\n\n[1] \"]\"     \"apple\"\n\n# This is VERY different for the pattern \"[a]]\"\n#\n# The following example shows what happens if you put the \"]\" in any\n# position other than the first. The pattern \"[a]]\" is broken down as follows:\n#\n#   [a]   This is the single character \"a\". Note\n#\n#   ]     This does NOT signify the end of the character class, but is \n#         rather just a regular character that must be part of the text to be \n#         matched.\n#\n# Therefore [a]] is looking for the EXACT text \"a]\" somewhere in the text\n# being searched.\n\ngrep(\"[a]]\", stuff, value=TRUE) # No matches - looking for \"a]\" in the text\n\ncharacter(0)",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#searching-with-regular-expressions-in-a-text-editor",
    "href": "0200200-introToRegularExpressions-v036.html#searching-with-regular-expressions-in-a-text-editor",
    "title": "11  regular expressions (regex)",
    "section": "11.12 Searching with regular expressions in a “text editor”",
    "text": "11.12 Searching with regular expressions in a “text editor”\nA “text editor” is a program that is used to edit “text files”. A text file can only contain “plain text” - i.e. no pictures, no music, only one font,\nRStudio’s text editor\nThe text editor that is in RStudio can be used to create many different types of files. For example, it can be used to create both “R Script files” (i.e. .R files) and “Quarto Documents” (i.e. .qmd files). In addition, it can be used to create “plain text files”. To do so, choose the following menu choices from RStudio’s menu: “File | New File | Text File”\n\n# NOTE: regular expressions are used in many different languages and environments.\n# In general in regular expression in OTHER environments, \n# if you want to actually match a metacharacter (e.g. period, parentheses,\n# caret, dollar sign, etc) you precede the metacharacter with a backslash.\n#\n# For example, you can do this in RStudios text editor - just type ctrl-f or cmd-f\n# and click \"regex\" checkbox. Then type your regular expression into the \n# search box.\n# For example\n# Try searching the addresses.txt file for the following in the RStudio text\n# editor:\n#\n#   one|1\n#   .\n#   \\.\n#   $\n#   \\$\n#\n# Matching meta characters requires that you \"escape\" the meta-character\n# by preceding it with a backslash e.g.  \\.",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#matching-meta-characters",
    "href": "0200200-introToRegularExpressions-v036.html#matching-meta-characters",
    "title": "11  regular expressions (regex)",
    "section": "11.13 Matching meta-characters",
    "text": "11.13 Matching meta-characters\n\n# Matching meta-characters ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# NOTE: regular expressions are used in many different languages and environments.\n# In general in regular expression in OTHER environments, \n# if you want to actually match a metacharacter (e.g. period, parentheses,\n# caret, dollar sign, etc) you precede the metacharacter with a backslash.\n#\n# For example, you can do this in RStudios text editor - just type ctrl-f or cmd-f\n# and click \"regex\" checkbox. Then type your regular expression into the \n# search box.\n#\n# For example\n# Try searching the addresses.txt file for the following in the RStudio text\n# editor:\n#\n#   one|1\n#   .\n#   \\.\n#   $\n#   \\$\n#\n# Matching meta characters requires that you \"escape\" the meta-character\n# by preceding it with a backslash e.g.  \\.\n#\n#\n#\n# When writing regular expression patterns in R you must use TWO \\\\'s to escape a metacharacter ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# HOWEVER, in R, since character values already use a backslash\n# such as \\n for a new line, you must use TWO backslashes in the regex\n# pattern. The first backslash escapes the 2nd backslash from R\n# so that R's character values don't interpret it in a special way.\n# See the examples below.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n11.13.1 Reminder of how backslashes () are used in R\n\n# Reminder of how backslashes (\\) are used in R ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Remember that R uses backslashes to change the meaning (or to \"escape\" \n# the meaning) of the character that follows the backslash. \n# For example in the following cat command, \\n, is displayed as a \n# \"newline character\" and \\t is displayed as a tab.\n\ncat(\"Hello\\nJoe\\thow are you\\n\\ndoing?\\n\\tI'm fine.\")\n\nHello\nJoe how are you\n\ndoing?\n    I'm fine.\n\n# Similarly in the following cat command the \\\" escapes the meaning\n# of the quote. It no longer implies the end of the quotation. The \n# meaning of \\\" is simply to include a quotation mark as part of the \n# text.\n\ncat(\"Lincoln said \\\"Four score and seven years ago today...\\\"\")\n\nLincoln said \"Four score and seven years ago today...\"\n\n# If the following line were not commented it would cause an error\n# because the quotation is not actually closed due to the \\ before the\n# final quotation mark.\n#\n#cat(\"This is a backslash: \\\")   # ERROR\n\n# The following works correctly. Note that \\\\ is needed to escape\n# the normal meaning of the backslash character!\n#cat(\"This is a backslash: \\\\\")   # ERROR\n\n#cat(\"This is a period \\.\")   # ERROR \\. is NOT an R escape sequence\n\n# You must use TWO backslashes in R's regular expressions ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# In R you must use two backslashes in a regex pattern to \n# escape a metacharacter.\n\n\ngrep(\"\\\\.\", addresses, value=TRUE)  # all addresses that contain a period\n\n[1] \"3 Olive St.\"                      \"Two 1st Ave.\"                    \n[3] \"Ninety Nine Cone St. apartment 7\" \"9 Main St. apt. 623\"             \n\ngrep(\".\", addresses, value=TRUE)  # All the addresses\n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"5678 Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. 623\"              \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[15] \"Three Main Street Apt 12343\"       \"City Hall Lockport, NY\"           \n\nstuff = c(\"\", \"apple\", \"\", \"banana\")\nstuff\n\n[1] \"\"       \"apple\"  \"\"       \"banana\"\n\ngrep(\".\", stuff, value=FALSE)\n\n[1] 2 4\n\ngrep(\".\", stuff, value=TRUE)\n\n[1] \"apple\"  \"banana\"\n\n# This is an ERROR in R but would be correct in other \n# languages or environment that use regular expressions\n#grep(\"\\.\", addresses, value=\"TRUE\")  # ERROR - R doesn't recognize \\.\n\n# Without the backslash you will find all addresses that contain\n# at least a single character (i.e. all the addresses)\ngrep(\".\", addresses, value=\"TRUE\")  \n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"5678 Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. 623\"              \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[15] \"Three Main Street Apt 12343\"       \"City Hall Lockport, NY\"           \n\ngrep(\"\\\\$\", addresses, value=TRUE)   # addresses that contain a dollar sign\n\n[1] \"One Micro$oft Way\"\n\ngrep(\"$\", addresses, value=TRUE)    # all addresses - why?? - they all have an ending\n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"5678 Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. 623\"              \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[15] \"Three Main Street Apt 12343\"       \"City Hall Lockport, NY\"           \n\n\n\n\n11.13.2 To search for an actual backslash you must use 4 backslashes in the pattern\n\n# To search for an actual backslash you must use 4 backslashes in the pattern ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Searching for an actual backslash in the data can be tricky. \n# Remember, one of our addresses had a backslash in it. Let's find it.\n#\n# To look for a single backslash in the data you must use FOUR backslashes.\n# Just as R character values need to \"escape\" a backslash with a 2nd backslash,\n# so too do regular expressions need to escape a backslash with a 2nd backslash.\n# Therefore if you want to write a regular expression in R that searches for\n# a backslash, you must write FOUR backslashes in a row. The first two resolve\n# to a single backslash. The 3rd and 4th resolve to a single backslash. Then finally\n# the two single backslashes are used in the regular expression to match a \n# single actual backslash in the data.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nanswer = grep(\"\\\\\\\\\", addresses, value=TRUE)  # look for a single backslash in the data\n\nanswer\n\n[1] \"4\\\\2 Rechov Yafo\"\n\ncat(answer)\n\n4\\2 Rechov Yafo\n\nstuff=\"\\\\\\\\\"\nstuff\n\n[1] \"\\\\\\\\\"\n\ncat(stuff)\n\n\\\\",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#matching-quotes",
    "href": "0200200-introToRegularExpressions-v036.html#matching-quotes",
    "title": "11  regular expressions (regex)",
    "section": "11.14 Matching QUOTES",
    "text": "11.14 Matching QUOTES\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Matching QUOTES\n#\n# \"Quotation marks\" are NOT meta-characters in regular expressions. They\n# have no special meaning in a regular expression. However, as with all \n# R code you must make sure to use a single backslash if the quotation mark\n# is inside of quotation marks (e.g.  \"\\\"\" ) - see the example below.\n#\n# Note that when using R's regular expression functions, regex\n# meta-characters, such as the period or ^ for which you want to remove \n# the special meaning require a DOUBLE backslash (as explained above).\n#\n# A regex pattern in VS Code (or a similar editor) that includes \" or ' \n# would not need any backslashes since these aren't regex meta characters.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nquoteStuff = c(\"Joe says great stuff.\", \"Franklin said \\\"a penny saved ...\\\"\")\nquoteStuff\n\n[1] \"Joe says great stuff.\"               \"Franklin said \\\"a penny saved ...\\\"\"\n\ncat(quoteStuff, sep=\"\\n\")\n\nJoe says great stuff.\nFranklin said \"a penny saved ...\"\n\ngrep (\"\\\"\", quoteStuff, value=TRUE) #  \"Franklin said \\\"a penny saved ...\\\"\"\n\n[1] \"Franklin said \\\"a penny saved ...\\\"\"\n\ngrep (\"\\\\.\", quoteStuff, value=TRUE) #  \"Franklin said \\\"a penny saved ...\\\"\"\n\n[1] \"Joe says great stuff.\"               \"Franklin said \\\"a penny saved ...\\\"\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#different-flavors-or-dialects-of-regular-expressions.",
    "href": "0200200-introToRegularExpressions-v036.html#different-flavors-or-dialects-of-regular-expressions.",
    "title": "11  regular expressions (regex)",
    "section": "11.15 Different “flavors” or “dialects” of regular expressions.",
    "text": "11.15 Different “flavors” or “dialects” of regular expressions.\n\n# Different \"flavors\" or \"dialects\" of regular expressions. ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Regular expressions have been around for a long time. Different \"dialects\"\n# of regular expressions have popped up over the years. \n#\n# Some programming languages and tools use slightly different \"rules\" \n# for regular expressions. This can be frustrating. However, the basic set\n# of regular expresion rules remains the same for most programming languages \n# and tools. \n#\n# Regular expressions first became popular with the Unix operating system in \n# the 1970s. There were many different versions of Unix being marketed by \n# different companies, each with slight differences. POSIX is a standard that\n# defines how things should be done in a standard way across all the different\n# versions of Unix. POSIX addresses regular expressions too. \n#\n# POSIX introduced \"named character classes\" as described below. R will \n# recognize these. \n#\n# Other additions to the regular expression notation were introduced by \n# the once very popular Perl programming language. You can get these features\n# to work in R by specifying perl=TRUE as one of the arguments for grep\n# and other functions in R that work with regular expressions. \n# For more details about perl regular expressions, see ?regex.\n#\n# As we said above, regular expressions are NOT totally standardized across all \n# languages and environments. For example (as of Feb 10, 2022)\n# there are subtle differences between the rules for regular expressions\n# that are used in R and those that are used in the \n# Visual Studio Code (VS Code) text editor. You can see a summary of the \n# rules used by VS Code here:\n#   https://docs.microsoft.com/en-us/visualstudio/ide/using-regular-expressions-in-visual-studio?view=vs-2022\n#\n# Although there may be some differences between different languaes and \n# environments, the vast majority of regular expression meta characters\n# work the same across the different environments. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n11.15.1 [[:digit:]] vs \\d - different shorthand notations for character classes\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Two different shorthand notations for character classes\n# - POSIX named character classes , e.g. [[:alnum:]]  [[:digit:]]   etc. \n# - backslash shortcuts , e.g. \\s \\S \\d \\D  etc.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n“POSIX” named character classes, e.g. [[:digit:]]\n\n# \"POSIX\" named character classes, e.g. [[:alnum:]] ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# NOTE: These are available in R. \n#\n#       They currently are NOT available in VSCode\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Bracket notation in regular expressions (e.g. [aeiou] or [0-9]) are known as \n# character classes. \n#\n# You can use several \"named character classes\" as shorthand for some common\n# character classes. These are shown below. Notice the [[double brackets]]\n# We'll explain more about the the [[double brackets]] below.\n#\n# [[:upper:]]   same as [A-Z]\n# [[:lower:]]   same as [a-z]\n# [[:space:]]   same as [ \\r\\n\\t]\n# [[:punct:]]   all \"special\" characters, eg. !@#$% etc...\n# [[:digit:]]   same as [0-9]\n# [[:alpha:]]   same as [a-zA-Z]\n# [[:alnum:]]   same as [a-zA-Z0-9]\n#\n# The [[double brackets]] shown above are necessary since these\n# \"named character classes\" must actually be placed inside a pair of \n# [square brackets]. For example, you can also use the named\n# character classes inside a larger character class.\n#\n# For example the following will match any single character\n# from the following list:    -,+,*,/,(,),0,1,2,3,4,5,6,7,8,9\n#\n#   [-+*/()[:digit:]]    is the same as [-+*/()0-9]\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n11.15.2 — practice —\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Search for addresses that contain at least one digit. Use a POSIX\n# named character class.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER \ngrep(\"[[:digit:]]\", addresses, value=TRUE)   # uses POSIX named character classes\n\n [1] \"12345 Sesame Street\"              \"3 Olive St.\"                     \n [3] \"Two 1st Ave.\"                     \"5678 Park Place\"                 \n [5] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n [7] \"9 Main St. apt. 623\"              \"4\\\\2 Rechov Yafo\"                \n [9] \"One Main Street Apt 12b\"          \"Two Main Street Apt 123c\"        \n[11] \"Three Main Street Apt 12343\"     \n\nstr_view(addresses, \"[[:digit:]]\")\n\n [1] │ &lt;1&gt;&lt;2&gt;&lt;3&gt;&lt;4&gt;&lt;5&gt; Sesame Street\n [3] │ &lt;3&gt; Olive St.\n [4] │ Two &lt;1&gt;st Ave.\n [5] │ &lt;5&gt;&lt;6&gt;&lt;7&gt;&lt;8&gt; Park Place\n [6] │ Forty Five &lt;2&gt;nd Street\n [7] │ Ninety Nine Cone St. apartment &lt;7&gt;\n [8] │ &lt;9&gt; Main St. apt. &lt;6&gt;&lt;2&gt;&lt;3&gt;\n[10] │ &lt;4&gt;\\&lt;2&gt; Rechov Yafo\n[13] │ One Main Street Apt &lt;1&gt;&lt;2&gt;b\n[14] │ Two Main Street Apt &lt;1&gt;&lt;2&gt;&lt;3&gt;c\n[15] │ Three Main Street Apt &lt;1&gt;&lt;2&gt;&lt;3&gt;&lt;4&gt;&lt;3&gt;\n\n# NOTE - the pattern \"[:digit:]\" with one set of [brackets] does NOT work.\n#\n# Since there is only one set of [brackets], the pattern matches any one of\n# the characters that are between the [brackets], i.e. match\n# one of the characters \":\", \"d\", \"i\", \"g\", \"i\", \"t\" or \":\"\n# This is equivalent to \"[:digt]\"  (I removed the 2nd \":\" and the 2nd \"i\" as\n# they are repetitive.)\n\n# THIS DOESN'T WORK! - see note above\ngrep(\"[:digit:]\", addresses, value=TRUE)  # looks for one of the following :,d,i,g,i,t,:\n\n [1] \"12345 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"Forty Five 2nd Street\"             \"Ninety Nine Cone St. apartment 7\" \n [7] \"9 Main St. apt. 623\"               \"Five Google Drive\"                \n [9] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[11] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[13] \"Three Main Street Apt 12343\"       \"City Hall Lockport, NY\"           \n\ngrep(\"^[N[:digit:]]\", addresses, value=TRUE)   # same as [N0-9]\n\n[1] \"12345 Sesame Street\"               \"3 Olive St.\"                      \n[3] \"5678 Park Place\"                   \"Ninety Nine Cone St. apartment 7\" \n[5] \"9 Main St. apt. 623\"               \"4\\\\2 Rechov Yafo\"                 \n[7] \"Nineteen Watchamacallit Boulevard\"\n\n\n\n# QUESTION:\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Write a command that replaces any sequence of digits or mathematical \n# operators with the text \"&lt;&lt;MATH-EXPRESSION&gt;&gt;\"\n#\n# You can use the following \"mathStuff\" variable to test your answer.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nmathStuff &lt;- c(\"What is 3+2 ? Do you know the answer?\",\n               \"99.5 desgrees in Farenheit is 99.5*(5/9)-32 degrees in Celcius\")\n\nmathStuff\n\n[1] \"What is 3+2 ? Do you know the answer?\"                         \n[2] \"99.5 desgrees in Farenheit is 99.5*(5/9)-32 degrees in Celcius\"\n\n\n\n# ANSWER\n\ngsub(\"[-+*/().[:digit:]]+\", \"&lt;&lt;MATH-EXPRESSION&gt;&gt;\", mathStuff)\n\n[1] \"What is &lt;&lt;MATH-EXPRESSION&gt;&gt; ? Do you know the answer?\"                              \n[2] \"&lt;&lt;MATH-EXPRESSION&gt;&gt; desgrees in Farenheit is &lt;&lt;MATH-EXPRESSION&gt;&gt; degrees in Celcius\"\n\n\n# QUESTION:\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Write a grep command that matches punctuation and letters, but not numbers.\n# You can use the following data to test your answer. Use POSIX named\n# character classes.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nstuff = c(\"1234\",  # This should NOT match since it doesn't contain letters or punctuation\n          \"12.34\", # This SHOULD match since it contains punctuation.\n          \".\",     # This SHOULD match since it contains punctuation.\n          \"hi\")    # This SHOULD match since it contains at least one letter\n\n# ANSWER\n\n# The following will match any punctuation or letters but not numbers\ngrep(\"[[:punct:][:alpha:]]\", stuff, value=TRUE)   #   \".\"    \"hi\"\n\n[1] \"\\\\\\\\\"\n\n\n\n# QUESTION \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Search for fruits that contain spaces using the POSIX\n# named character classes for spaces\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# ANSWER\ngrep(\"[[:space:]]\", fruit, value=TRUE)\n\n[1] \"N. American apple\" \"S. Korean Fig\"     \"star fruit\"       \n[4] \"prickly pear\"      \"Beurre Hardy pear\" \"black cherry\"     \n\n\n\n# QUESTION \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Search fruit for those that contain punctuation (e.g. periods, commas, etc)\n# using the POSIX named character classes\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# ANSWER\n\ngrep (\"[[:punct:]]\", fruit, value=TRUE)\n\n[1] \"N. American apple\" \"S. Korean Fig\"    \n\n\n\n# QUESTION \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Show fruit that contain either an x,y,z or some punctuation.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# ANSWER\n\n# NOTE that there are TWO sets of brackets. The POSIX named character\n# class, [:punct:], is itself inside a set of [brackets].\n\ngrep(\"[xyz[:punct:]]\", fruit, value=TRUE)\n\n [1] \"N. American apple\" \"S. Korean Fig\"     \"prickly pear\"     \n [4] \"Beurre Hardy pear\" \"cherry\"            \"black cherry\"     \n [7] \"blueberry\"         \"strawberry\"        \"honeydew\"         \n[10] \"yumberry\"         \n\n\n\n# QUESTION \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Search all ADDRESSES for those that contain punctuation (e.g. periods,\n# commas, etc) or actual digits (e.g. 0123456789) using POSIX named\n# character classes\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# ANSWER\n\ngrep(\"[[:punct:][:digit:]]\", addresses, value=TRUE)\n\n [1] \"12345 Sesame Street\"              \"One Micro$oft Way\"               \n [3] \"3 Olive St.\"                      \"Two 1st Ave.\"                    \n [5] \"5678 Park Place\"                  \"Forty Five 2nd Street\"           \n [7] \"Ninety Nine Cone St. apartment 7\" \"9 Main St. apt. 623\"             \n [9] \"4\\\\2 Rechov Yafo\"                 \"One Main Street Apt 12b\"         \n[11] \"Two Main Street Apt 123c\"         \"Three Main Street Apt 12343\"     \n[13] \"City Hall Lockport, NY\"          \n\n# This also works\ngrep(\"[[:punct:]0-9]\", addresses, value=TRUE)\n\n [1] \"12345 Sesame Street\"              \"One Micro$oft Way\"               \n [3] \"3 Olive St.\"                      \"Two 1st Ave.\"                    \n [5] \"5678 Park Place\"                  \"Forty Five 2nd Street\"           \n [7] \"Ninety Nine Cone St. apartment 7\" \"9 Main St. apt. 623\"             \n [9] \"4\\\\2 Rechov Yafo\"                 \"One Main Street Apt 12b\"         \n[11] \"Two Main Street Apt 123c\"         \"Three Main Street Apt 12343\"     \n[13] \"City Hall Lockport, NY\"          \n\n\n\n# QUESTION \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Search all ADDRESSES for those that contain some punctuation that \n# comes immediately after the letter t. Use POSIX named classes.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# ANSWER\ngrep(\"[tT][[:punct:]]\", addresses, value=TRUE)\n\n[1] \"3 Olive St.\"                      \"Ninety Nine Cone St. apartment 7\"\n[3] \"9 Main St. apt. 623\"              \"City Hall Lockport, NY\"          \n\n# ANOTHER WAY\ngrep(\"[tT][^[:alnum:]]\", addresses, value=TRUE)\n\n [1] \"One Micro$oft Way\"                 \"3 Olive St.\"                      \n [3] \"Two 1st Ave.\"                      \"Ninety Nine Cone St. apartment 7\" \n [5] \"9 Main St. apt. 623\"               \"Fifteen Watchamacallit Boulevard\" \n [7] \"Nineteen Watchamacallit Boulevard\" \"One Main Street Apt 12b\"          \n [9] \"Two Main Street Apt 123c\"          \"Three Main Street Apt 12343\"      \n[11] \"City Hall Lockport, NY\"           \n\n\n\n# QUESTION \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# answer the previous question without using POSIX named classes.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngrep(\"[tT][,.!?]\", addresses, value=TRUE)\n\n[1] \"3 Olive St.\"                      \"Ninety Nine Cone St. apartment 7\"\n[3] \"9 Main St. apt. 623\"              \"City Hall Lockport, NY\"          \n\n\n\nbackslash shortcuts for character classes, e.g. etc.\n\n# backslash shortcuts for character classes, e.g. \\s \\S \\d \\D etc. ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The following are also shorthand notation that you can use for some\n# characer classes.\n#\n# Note that in R you must use a double backslash, e.g. \\\\s instead of \\s\n#\n# \\s   is the same as [ \\n\\t\\r]  also same as [[:space:]]\n#      It matches anything which is considered whitespace.\n#      This could be a space, tab, line break etc.\n#\n# \\S   is the same as [^ \\n\\t\\r]\n#      It matches the opposite of \\s, that is anything which is not considered\n#      whitespace.\n#\n# \\d   is the same as [0-9]  (ie. it matches a single digit)  same as [[:digit:]]\n#\n# \\D   is the same as [^0-9] (i.e. it matches a single NON-digit)\n#\n# \\w - matches anything which is considered a word character. That is\n#      [A-Za-z0-9_]. Note the inclusion of the underscore character '_'. This is\n#      because in programming and other areas we regularly use the underscore as part\n#      of, say, a variable or function name.\n#\n# \\W - matches  [^A-Za-z0-9_] the opposite of \\w, that is anything which is not considered a\n#      word character.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#word-boundries",
    "href": "0200200-introToRegularExpressions-v036.html#word-boundries",
    "title": "11  regular expressions (regex)",
    "section": "11.16 WORD BOUNDRIES: ::",
    "text": "11.16 WORD BOUNDRIES: ::\n# WORD BOUNDRIES:  \\b ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# \\b matches a \"word boundary\"   (remember in R use \\\\b)\n# \n# You can use this before a pattern to mean that the pattern must\n# come at the beginning of a word - see examples below.\n#\n# You can use this after a pattern to mean that the pattern must\n# come at the end of a word - see examples below.\n#\n# Note that a \"word boundary\" is not a particular character such as a \n# space or comma, but rather is a position in the text. \n#\n# NOTE - a \"word\" may include letters, digits or underscores\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nheWords = c(\"he\", \"here\", \"there\", \"the\", \"who was she?\", \"headache\")\nheWords\n\n[1] \"he\"           \"here\"         \"there\"        \"the\"          \"who was she?\"\n[6] \"headache\"    \n\n# Example: word starts with \"he\"\ngrep (\"\\\\bhe\", heWords, value=TRUE)  # \"he\" \"here\" (NOT \"there\",\"the\",\"who was she?\")\n\n[1] \"he\"       \"here\"     \"headache\"\n\n# Example: word ends with \"he\"\ngrep (\"he\\\\b\", heWords, value=TRUE)  # \"he\" \"the\" \"who was she?\" (NOT \"here\",\"there\")\n\n[1] \"he\"           \"the\"          \"who was she?\" \"headache\"    \n\n# Example: match only the word \"he\"\ngrep (\"\\\\bhe\\\\b\", heWords, value=TRUE)  # \"he\"\n\n[1] \"he\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# You can use \\b with more complicated patterns too.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Examples: \ngrep (\"\\\\b[Hh]\", fruit, value=TRUE)  # fruits that have a word that starts with H or h\n\n[1] \"Beurre Hardy pear\" \"honeydew\"         \n\ngrep (\"[aeiouAEIOU]\\\\b\", fruit, value=TRUE)  # fruits that end with a vowel\n\n[1] \"apple\"             \"N. American apple\" \"Beurre Hardy pear\"\n[4] \"banana\"           \n\n:::",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#pattern1pattern2-matches-pattern1-or-pattern2",
    "href": "0200200-introToRegularExpressions-v036.html#pattern1pattern2-matches-pattern1-or-pattern2",
    "title": "11  regular expressions (regex)",
    "section": "11.17 “pattern1|pattern2” matches pattern1 OR pattern2",
    "text": "11.17 “pattern1|pattern2” matches pattern1 OR pattern2\n\n# \"pattern1|pattern2\"  matches pattern1 OR pattern2 ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Combining patterns\n#\n#    PATTERN1|PATTERN2  matches if either PATTERN1 or PATTERN2 is found\n#\n#    (PATTERN)          you may surround patterns with (parentheses) if necessary\n#\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngrep(\"black|blue|green\", fruit, value=TRUE) # contains black,blue or green\n\n[1] \"black cherry\" \"blueberry\"   \n\ngrep(\"^(1|One)\", addresses, value=TRUE, ignore.case=TRUE) # 1 or One at beginning \n\n[1] \"12345 Sesame Street\"     \"One Micro$oft Way\"      \n[3] \"One Main Street Apt 12b\"\n\ngrep(\"(^1|^One)\", addresses, value=TRUE) # same thing \n\n[1] \"12345 Sesame Street\"     \"One Micro$oft Way\"      \n[3] \"One Main Street Apt 12b\"\n\ngrep(\"^1|^One\", addresses, value=TRUE) # same thing \n\n[1] \"12345 Sesame Street\"     \"One Micro$oft Way\"      \n[3] \"One Main Street Apt 12b\"\n\ngrep(\"[0-9]\", addresses, value=TRUE)\n\n [1] \"12345 Sesame Street\"              \"3 Olive St.\"                     \n [3] \"Two 1st Ave.\"                     \"5678 Park Place\"                 \n [5] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n [7] \"9 Main St. apt. 623\"              \"4\\\\2 Rechov Yafo\"                \n [9] \"One Main Street Apt 12b\"          \"Two Main Street Apt 123c\"        \n[11] \"Three Main Street Apt 12343\"     \n\ngrep(\"0|1|2|3|4|5|6|7|8|9\", addresses, value=TRUE)  # Same as [0-9]\n\n [1] \"12345 Sesame Street\"              \"3 Olive St.\"                     \n [3] \"Two 1st Ave.\"                     \"5678 Park Place\"                 \n [5] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n [7] \"9 Main St. apt. 623\"              \"4\\\\2 Rechov Yafo\"                \n [9] \"One Main Street Apt 12b\"          \"Two Main Street Apt 123c\"        \n[11] \"Three Main Street Apt 12343\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#breaking-up-long-patterns-with-paste0",
    "href": "0200200-introToRegularExpressions-v036.html#breaking-up-long-patterns-with-paste0",
    "title": "11  regular expressions (regex)",
    "section": "11.18 breaking up long patterns with paste0",
    "text": "11.18 breaking up long patterns with paste0\n\n# breaking up long patterns with paste0 ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Do NOT include extra whitespace in patterns!!!\n# \n# For long patterns you can use paste0 to break up the pattern\n# so it is more readable in the code.\n#\n# See examples below.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n11.18.1 example\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Show those addresses that contain one of the numbers 1-9 spelled out in words,\n# e.g. \"one\", \"two\", etc\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER - note that writing the pattern using paste0 with collapse = \"\"\n# makes the pattern easy to understand. You can also comment on \n# individual portions of the pattern. \n\npattern = paste0(\"\\\\bone\\\\b|\",     # match the word \"one\"\n                 \"\\\\btwo\\\\b|\",     # match the word \"two\"\n                 \"\\\\bthree\\\\b|\",   # etc.\n                 \"\\\\bfour\\\\b|\",\n                 \"\\\\bfive\\\\b|\",\n                 \"\\\\bsix\\\\b|\",\n                 \"\\\\bseven\\\\b|\",\n                 \"\\\\beight\\\\b|\",\n                 \"\\\\bnine\\\\b\")\n\ngrep(pattern, addresses, value=TRUE, ignore.case = TRUE)\n\n[1] \"One Micro$oft Way\"                \"Two 1st Ave.\"                    \n[3] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n[5] \"Five Google Drive\"                \"One Main Street Apt 12b\"         \n[7] \"Two Main Street Apt 123c\"         \"Three Main Street Apt 12343\"     \n\n# Note that the following also works but is\n#   - MUCH harder to read \n#   - MUCH harder to check for errors and\n#   - cannot be commented on for different parts of the pattern\n\ngrep(\n  \"\\\\bone\\\\b|\\\\btwo\\\\b|\\\\bthree\\\\b|\\\\bfour\\\\b|\\\\bfive\\\\b|\\\\bsix\\\\b|\\\\bseven\\\\b|\\\\beight\\\\b|\\\\bnine\\\\b\",\n  addresses, value=TRUE, ignore.case = TRUE)\n\n[1] \"One Micro$oft Way\"                \"Two 1st Ave.\"                    \n[3] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n[5] \"Five Google Drive\"                \"One Main Street Apt 12b\"         \n[7] \"Two Main Street Apt 123c\"         \"Three Main Street Apt 12343\"     \n\n\n\n\n11.18.2 example\n\n# A more complex example ####\n\n# QUESTION \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Display those addresses that contain a number that is exactly one\n# digit long. For example: \n#\n#   addresses =\n#    c(\"3 Olive St.\",              # should match (because of 3)\n#      \"Forty Five 2nd Street\",    # should match (because of 2nd)\n#      \"Ninety Nine Cone St. apartment 7\",\n#                                  # should match (because of 7)\n#      \"7\",                        # should match\n#\n#      \"12345 Sesame Street\",      # should NOT match (12345 is five digits)\n#      \"One main Street Apt 12b\",  # should NOT match (12 is two digits)\n#      \"Two Main St. Apt 99\",      # should NOT match (99 is two digits) \n#      \"45\")                       # should NOT match\n#\n#   &gt; YOUR COMMAND GOES HERE\n#   [1] \"3 Olive St.\"\n#   [2] \"Forty Five 2nd Street\"\n#   [3] \"Ninety Nine Cone St. apartment 7\"\n#   [4] \"7\"\n#\n# NOTE: the pattern \"[0-9]\" will NOT work as it will match every one of \n# values above\n#\n# NOTE: the pattern \"\\\\b[0-9]\\\\b\" is a good try but will not match\n# \"Forty Five 2nd Street\" as the 2 in \"2nd\" is NOT followed by a word boundary.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\n\n# Note - there are 4 possible ways for a single digit appear in the text:\n#\n# (a) The digit can appear at the very beginning of the text and be followed by\n#     a non-digit, e.g. \"3 Olive street\". \n#\n#     The pattern: \"^[0-9][^0-9]\"     \n#     matches \"3 Olive street\"\n#     but doesn't match \"Forty Five 2nd Street\" (since the 2 is not at the\n#                                                beginning of the text).\n#\n# Similarly, each of the following patterns will match a single digit for\n# some texts but not for others. \n#\n# (b) [^0-9][0-9][^0-9] : NONdigit digit NONdigit anywhere in the text\n# (c) [^0-9][0-9]$      : last two characters are a NONdigit followed by a single digit\n# (d) ^[0-9]$           : whole thing is JUST one digit\n#\n# For actual addresses you probably don't have to worry about the last\n# case, but for other types of data you might.\n#\n# You can write a pattern that deals with all of these cases by\n# separating the different \"sub-patterns\" from each other with \"|\" symbols.\n# For example, the following answers the question, but the pattern is VERY\n# hard to read. (see below for a better way to write this code.)\n\ngrep(\"^[0-9][^0-9]|[^0-9][0-9][^0-9]|[^0-9][0-9]$|^[0-9]$\", addresses, value=TRUE)\n\n[1] \"3 Olive St.\"                      \"Two 1st Ave.\"                    \n[3] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n[5] \"9 Main St. apt. 623\"              \"4\\\\2 Rechov Yafo\"                \n\n# we can use paste0 to make this easier to read\n\npattern &lt;- \n  paste0 ( \"^[0-9][^0-9]\" ,     # starts with digit followed by a NONdigit\n         \"|[^0-9][0-9][^0-9]\",  # NONdigit digit NONdigit anywhere in the text \n         \"|[^0-9][0-9]$\",       # ends with a NONdigit followed by a single digit\n         \"|^[0-9]$\")            # whole thing is JUST one digit \n\ngrep(pattern, addresses, value=TRUE)\n\n[1] \"3 Olive St.\"                      \"Two 1st Ave.\"                    \n[3] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n[5] \"9 Main St. apt. 623\"              \"4\\\\2 Rechov Yafo\"                \n\n\n\n\n11.18.3 example\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Write a command that displays all addresses that contain the\n# number \"one\" or 1.\n#\n# Notice that the following will NOT work. This gets \"Cone\" and 12345 too:\n#\n#   grep(\"one|1\", addresses, value=TRUE, ignore.case=TRUE) # NO - matches Cone and 12345\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\n\n# The following is the way to do it. Regular expressions require \n# a very thoughtful approach!\n#\n# The word \"one\" or the number \"1\" (not including the number 123)\npattern = paste0(\"^one[^a-z]|\",       # one at beginning\n                 \"[^a-z]one[^a-z]|\",  # one in middle\n                 \"[^a-z]one$|\",       # one at end\n                 \"^one$|\",            # ONLY the word \"one\"\n                 \"^1[^0-9]|\",         # 1 at beginning\n                 \"[^0-9]1[^0-9]|\",    # 1 in middle\n                 \"[^0-9]1$|\",         # 1 at end\n                 \"^1$\")               # ONLY the number 1\n\n\npattern\n\n[1] \"^one[^a-z]|[^a-z]one[^a-z]|[^a-z]one$|^one$|^1[^0-9]|[^0-9]1[^0-9]|[^0-9]1$|^1$\"\n\ngrep(pattern, addresses, value=TRUE, ignore.case=TRUE)\n\n[1] \"One Micro$oft Way\"       \"Two 1st Ave.\"           \n[3] \"One Main Street Apt 12b\"\n\n# Same thing but MUCH harder to read!!!\n# You should break up long patterns with paste0 and comment them as shown above.\n\ngrep(\n  \"^one[^a-z]|[^a-z]one[^a-z]|[^a-z]one$|^one$|^1[^0-9]|[^0-9]1[^0-9]|[^0-9]1$|^1$\",\n  addresses, value=TRUE, ignore.case=TRUE)\n\n[1] \"One Micro$oft Way\"       \"Two 1st Ave.\"           \n[3] \"One Main Street Apt 12b\"\n\n\n\n\n11.18.4 example\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# df is a dataframe. Write a command that shows all rows from df\n# for which the 2nd character in the first column is \"x\". \n# \n# Hints: \n#   a. Access a dataframe as you normally would but use grep or lgrep to\n#      return either the row numbers or TRUE/FALSE\n#      values that identify the rows to be displayed.\n# \n#   b. Remember that you are NOT told what the column names are. Therefore you\n#      must use a number to stipulate the first column and NOT a column name.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Use this example data\ndf = data.frame( partNum = c(\"ax4321\", \"az12\", \"bx1234\", \"bw987\"),\n                 partName = c(\"widget\",\"thingie\",\"gadget\",\"gizmo\"),\n                 price =    c(0.50, 0.60, 1.70, 0.80),\n                 stringsAsFactors = FALSE)\ndf\n\n  partNum partName price\n1  ax4321   widget   0.5\n2    az12  thingie   0.6\n3  bx1234   gadget   1.7\n4   bw987    gizmo   0.8\n\n# Show the rows that contain \"x\" as the 2nd character in the partNum\n\n\n# One answer - using grep\ndf[ grep ( \"^.x\", df$partNum , ignore.case=TRUE ) ,   ]\n\n  partNum partName price\n1  ax4321   widget   0.5\n3  bx1234   gadget   1.7\n\n# Another answer - using grepl\ndf[ grepl ( \"^.x\", df$partNum , ignore.case=TRUE ) ,   ]\n\n  partNum partName price\n1  ax4321   widget   0.5\n3  bx1234   gadget   1.7\n\n\n\n\n11.18.5 example\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Using the same data as above, only show those rows that contain an \"x\"\n# in the 2nd character of the partNum whose price is also less than 1.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndf\n\n  partNum partName price\n1  ax4321   widget   0.5\n2    az12  thingie   0.6\n3  bx1234   gadget   1.7\n4   bw987    gizmo   0.8\n\ndf[ grepl ( \"^.x\", df$partNum , ignore.case=TRUE ) & df$price &lt; 1 ,   ]\n\n  partNum partName price\n1  ax4321   widget   0.5",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#quantifiers-nm-n-n",
    "href": "0200200-introToRegularExpressions-v036.html#quantifiers-nm-n-n",
    "title": "11  regular expressions (regex)",
    "section": "11.19 Quantifiers: {n,m} {n} {n,} + * ?",
    "text": "11.19 Quantifiers: {n,m} {n} {n,} + * ?\n\n#@ Quantifiers: {n,m}  {n}  {n,}  +  *  ?  ####\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#@\n#@ Quantifiers are symbols in the pattern that identify how many repetetitions\n#@ to look for of a particular sub-pattern. The quantifiers include\n#@\n#@   SOME_SUB_PATTERN{n,m}    (where n and m are numbers)\n#@   SOME_SUB_PATTERN{n}      (where n is a number)\n#@   SOME_SUB_PATTERN{n,}      (where n is a number)\n#@   SOME_SUB_PATTERN+\n#@   SOME_SUB_PATTERN*\n#@   SOME_SUB_PATTERN?\n#@\n#@ See below for an explanation of each type of quantifier.\n#@\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n\n11.19.1 Quantifiers with {curly braces} eg. {3} {2,5} {3,}\n\n# Quantifiers with {curly braces}   eg. {3}   {2,5}   {3,}   ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# \n#    SOME_PATTERN{3}       three matches in a row\n#    SOME_PATTERN{3,6}     between three and six matches in a row\n#    SOME_PATTERN{3,}      at least 3 matches in a row\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# EXAMPLE\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# \"[0-9]{4}\" matches 4 digits in a row, same as \"[0-9][0-9][0-9][0-9]\"\n#\n# Note that this will also return those entries that have more than 4 digits\n# in a row since these entries ALSO have 4 digits in a row (plus some extra\n# digits)\n\ngrep(\"[0-9]{4}\", addresses, value=TRUE)  # 4 digits , same as \"[0-9][0-9][0-9][0-9]\"\n\n[1] \"12345 Sesame Street\"         \"5678 Park Place\"            \n[3] \"Three Main Street Apt 12343\"\n\n# Note that if we use gsub, only the first 4 digits will be substituted.\ngsub(\"[0-9]{4}\", \"xxxx\", addresses)  # 4 digits , same as \"[0-9][0-9][0-9][0-9]\"\n\n [1] \"xxxx5 Sesame Street\"               \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"xxxx Park Place\"                   \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. 623\"              \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt 123c\"         \n[15] \"Three Main Street Apt xxxx3\"       \"City Hall Lockport, NY\"           \n\ngrep(\"[0-9]{3}\", addresses, value=TRUE)  # 3 digits \n\n[1] \"12345 Sesame Street\"         \"5678 Park Place\"            \n[3] \"9 Main St. apt. 623\"         \"Two Main Street Apt 123c\"   \n[5] \"Three Main Street Apt 12343\"\n\n# Note that if we use gsub, only the first 3 digits will be substituted.\ngsub(\"[0-9]{3}\", \"xxxx\", addresses)  # 4 digits , same as \"[0-9][0-9][0-9][0-9]\"\n\n [1] \"xxxx45 Sesame Street\"              \"One Micro$oft Way\"                \n [3] \"3 Olive St.\"                       \"Two 1st Ave.\"                     \n [5] \"xxxx8 Park Place\"                  \"Forty Five 2nd Street\"            \n [7] \"Ninety Nine Cone St. apartment 7\"  \"9 Main St. apt. xxxx\"             \n [9] \"Five Google Drive\"                 \"4\\\\2 Rechov Yafo\"                 \n[11] \"Fifteen Watchamacallit Boulevard\"  \"Nineteen Watchamacallit Boulevard\"\n[13] \"One Main Street Apt 12b\"           \"Two Main Street Apt xxxxc\"        \n[15] \"Three Main Street Apt xxxx43\"      \"City Hall Lockport, NY\"           \n\ngrep(\"[0-9]{3}\", addresses, value=TRUE)  # 3 digits \n\n[1] \"12345 Sesame Street\"         \"5678 Park Place\"            \n[3] \"9 Main St. apt. 623\"         \"Two Main Street Apt 123c\"   \n[5] \"Three Main Street Apt 12343\"\n\ngrep(\"\\\\b[0-9]{3}\\\\b\", addresses, value=TRUE)  # 3 digits \n\n[1] \"9 Main St. apt. 623\"\n\n# EXAMPLE\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# match a word that is exactly 4 letters long\n\npattern = \n  paste0 (\"^[a-zA-Z]{4}[^a-zA-Z]\",\n          \"|[^a-zA-Z][a-zA-Z]{4}[^a-zA-Z]\",\n          \"|[^a-zA-Z][a-zA-Z]{4}$\",\n          \"|^[a-zA-Z]{4}$\")\n\npattern =\n  paste0 (\"\\\\b[a-zA-Z]{4}\\\\b\")\n\n# use the same pattern for both addressess and fruit\n\ngrep(pattern, addresses, value=TRUE)\n\n [1] \"5678 Park Place\"                  \"Forty Five 2nd Street\"           \n [3] \"Ninety Nine Cone St. apartment 7\" \"9 Main St. apt. 623\"             \n [5] \"Five Google Drive\"                \"4\\\\2 Rechov Yafo\"                \n [7] \"One Main Street Apt 12b\"          \"Two Main Street Apt 123c\"        \n [9] \"Three Main Street Apt 12343\"      \"City Hall Lockport, NY\"          \n\ngrep(pattern, fruit, value=TRUE)\n\n[1] \"star fruit\"        \"pear\"              \"prickly pear\"     \n[4] \"Beurre Hardy pear\" \"plum\"             \n\n# Another way - using \\b\npattern = \"\\\\b[a-zA-Z]{4}\\\\b\"\ngrep(pattern, addresses, value=TRUE)\n\n [1] \"5678 Park Place\"                  \"Forty Five 2nd Street\"           \n [3] \"Ninety Nine Cone St. apartment 7\" \"9 Main St. apt. 623\"             \n [5] \"Five Google Drive\"                \"4\\\\2 Rechov Yafo\"                \n [7] \"One Main Street Apt 12b\"          \"Two Main Street Apt 123c\"        \n [9] \"Three Main Street Apt 12343\"      \"City Hall Lockport, NY\"          \n\n# Use a text editor (e.g. the one in RStudio) to see how this works ...\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Paste the following in the text editor to see how this pattern works.\n#\n#  \\b[a-zA-Z]{4}\\b\n#\n# This will match any 4 character word. It will NOT match 3 or 5 character words.\n# Note that in VS Code you should use only one backslash (i.e. \\b ) but in R\n# you would use two backslashes (i.e. \\\\b ) as explained above.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# match a word that is at least 4 letters long\n# Use {4,} instead of {4}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Paste this into VSCode regex search.\n#   ^[a-zA-Z]{4,}[^a-zA-Z]|[^a-zA-Z][a-zA-Z]{4,}[^a-zA-Z]|[^a-zA-Z][a-zA-Z]{4,}$|^[a-zA-Z]{4,}$\n\n\n# match a word that is at least 3,4 or 5 letters long\n# Use {3,5} instead of {4}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Paste this into VSCode regex search.\n#   ^[a-zA-Z]{3,5}[^a-zA-Z]|[^a-zA-Z][a-zA-Z]{3,5}[^a-zA-Z]|[^a-zA-Z][a-zA-Z]{3,5}$|^[a-zA-Z]{3,5}$\n\n\n# ANOTHER EXAMPLE\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# match a word that is exactly 7 letters long\npattern = \n  paste0 (\"^[a-zA-Z]{7}[^a-zA-Z]\",\n          \"|[^a-zA-Z][a-zA-Z]{7}[^a-zA-Z]\",\n          \"|[^a-zA-Z][a-zA-Z]{7}$\",\n          \"|^[a-zA-Z]{7}$\")\n\n# use the same pattern for both addresses and fruit\ngrep(pattern, addresses, value=TRUE)\n\n[1] \"Fifteen Watchamacallit Boulevard\"\n\ngrep(pattern, fruit, value=TRUE)\n\n[1] \"prickly pear\" \"kumquat\"     \n\n# match any word that is between 4 and 7 letters long\npattern = \n  paste0 (\"^[a-zA-Z]{4,7}[^a-zA-Z]\",\n          \"|[^a-zA-Z][a-zA-Z]{4,7}[^a-zA-Z]\",\n          \"|[^a-zA-Z][a-zA-Z]{4,7}$\",\n          \"|^[a-zA-Z]{4,7}$\")\n\ngrep(pattern, addresses, value=TRUE)\n\n [1] \"12345 Sesame Street\"              \"One Micro$oft Way\"               \n [3] \"3 Olive St.\"                      \"5678 Park Place\"                 \n [5] \"Forty Five 2nd Street\"            \"Ninety Nine Cone St. apartment 7\"\n [7] \"9 Main St. apt. 623\"              \"Five Google Drive\"               \n [9] \"4\\\\2 Rechov Yafo\"                 \"Fifteen Watchamacallit Boulevard\"\n[11] \"One Main Street Apt 12b\"          \"Two Main Street Apt 123c\"        \n[13] \"Three Main Street Apt 12343\"      \"City Hall Lockport, NY\"          \n\ngrep(pattern, fruit, value=TRUE)      # ... \"apple\" ... \"peach\" ... (5 letter long words too)\n\n [1] \"apple\"             \"N. American apple\" \"S. Korean Fig\"    \n [4] \"star fruit\"        \"pear\"              \"prickly pear\"     \n [7] \"Beurre Hardy pear\" \"cherry\"            \"black cherry\"     \n[10] \"peach\"             \"plum\"              \"kumquat\"          \n[13] \"banana\"           \n\n# match a word that is at least 7 letters long\npattern = \n  paste0 (\"^[a-zA-Z]{7,}[^a-zA-Z]\",\n          \"|[^a-zA-Z][a-zA-Z]{7,}[^a-zA-Z]\",\n          \"|[^a-zA-Z][a-zA-Z]{7,}$\",\n          \"|^[a-zA-Z]{7,}$\")\n\ngrep(pattern, addresses, value=TRUE)\n\n[1] \"Ninety Nine Cone St. apartment 7\"  \"Fifteen Watchamacallit Boulevard\" \n[3] \"Nineteen Watchamacallit Boulevard\" \"City Hall Lockport, NY\"           \n\ngrep(pattern, fruit, value=TRUE)\n\n[1] \"N. American apple\" \"prickly pear\"      \"kumquat\"          \n[4] \"blueberry\"         \"strawberry\"        \"honeydew\"         \n[7] \"strawberries\"      \"yumberry\"         \n\n# Exactly 3 digits (see example in last section of exactly one digit)\npattern = paste0(\n  \"^[0-9]{3}[^0-9]\",\n  \"|[^0-9][0-9]{3}[^0-9]\",\n  \"|[^0-9][0-9]{3}$\",\n  \"|^[0-9]{3}$\"\n)\ngrep(pattern, addresses, value=TRUE)\n\n[1] \"9 Main St. apt. 623\"      \"Two Main Street Apt 123c\"\n\ngrep(\"[^aeiou]{5}\", fruit, value=TRUE)  # at least 5 non vowels in a row\n\n[1] \"N. American apple\" \"prickly pear\"      \"Beurre Hardy pear\"\n[4] \"black cherry\"     \n\ngrep(\"[^aeiou]{6}\", fruit, value=TRUE)  # at least 6 non vowels in a row\n\n[1] \"prickly pear\"\n\ngrep(\"[^aeiou]{7}\", fruit, value=TRUE)  # at least 7 non vowels in a row\n\ncharacter(0)\n\ngrep(\"^.[aeiou]{2}\", fruit, value=TRUE)  # vowels in the 2nd and 3rd positions\n\n[1] \"pear\"              \"Beurre Hardy pear\" \"peach\"            \n\ngrep(\"[aeiou]{2}.$\", fruit, value=TRUE)  # 2nd & 3rd to last characters are vowels\n\n[1] \"star fruit\"        \"pear\"              \"prickly pear\"     \n[4] \"Beurre Hardy pear\" \"kumquat\"           \"strawberries\"     \n\n\n\n# QUESTION\n# Search for fruit that are 4 or 6 letters long.\n#\n\ngrep (\"^[a-zA-Z]{4}$|^[a-zA-Z]{6}$\", fruit, value=TRUE)\n\n[1] \"pear\"   \"cherry\" \"plum\"   \"banana\"\n\ngrep (\"(^[a-zA-Z]{4}$)|(^[a-zA-Z]{6}$)\", fruit, value=TRUE)\n\n[1] \"pear\"   \"cherry\" \"plum\"   \"banana\"\n\ngrep (\"^(([a-zA-Z]{4})|([a-zA-Z]{6}))$\", fruit, value=TRUE)\n\n[1] \"pear\"   \"cherry\" \"plum\"   \"banana\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#quantifiers-with-and",
    "href": "0200200-introToRegularExpressions-v036.html#quantifiers-with-and",
    "title": "11  regular expressions (regex)",
    "section": "11.20 Quantifiers with * + and ?",
    "text": "11.20 Quantifiers with * + and ?\n\n# Quantifiers with    *   +  and  ?  ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#      PATTERN* is the same as PATTERN{0,}  i.e. zero or more repetitions\n# \n#      PATTERN+ is the same as PATTERN{1,}  i.e. one or more repetitions\n#\n#      PATTERN? is the same as PATTERN{0,1}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\ngrep(\"^[^aeiouAEIOU].*[^aeiouAEIOU]$\", fruit, value=TRUE) # start and end with non-vowel \n\n [1] \"S. Korean Fig\"     \"fig\"               \"star fruit\"       \n [4] \"pear\"              \"prickly pear\"      \"Beurre Hardy pear\"\n [7] \"cherry\"            \"black cherry\"      \"peach\"            \n[10] \"plum\"              \"kumquat\"           \"blueberry\"        \n[13] \"strawberry\"        \"honeydew\"          \"strawberries\"     \n[16] \"yumberry\"         \n\n# match at least two spaces in the text (including just two spaces)\npattern = \".* .* .*\"       \n\npattern = \".*e.*e.*\"       \ngrep(pattern, fruit, value=TRUE) \n\n[1] \"N. American apple\" \"Beurre Hardy pear\" \"blueberry\"        \n[4] \"honeydew\"          \"strawberries\"     \n\nspacesStuff = c(\"nospaces\",\n          \"this has three spaces\",\n          \"just two spaces\", \n          \"one space\", \n          \"two  spaces\", \n          \"three   spaces\", \n          \"\",\n          \" \", \n          \"  \", \n          \"   \")\nspacesStuff\n\n [1] \"nospaces\"              \"this has three spaces\" \"just two spaces\"      \n [4] \"one space\"             \"two  spaces\"           \"three   spaces\"       \n [7] \"\"                      \" \"                     \"  \"                   \n[10] \"   \"                  \n\ngrep(pattern, spacesStuff, value=TRUE) \n\n[1] \"this has three spaces\" \"one space\"             \"three   spaces\"       \n\n\n\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Find solutions for the questions at the website.\n# The website is free to use.\n#\n#         http://play.inginf.units.it/\n#\n# 1. When you get to this page, scroll all the way to the bottom.\n#\n# 2. You will be prompted for your \"regex skill level\" and other basic signup\n#    info. It, seems that you must fill in this info in order for the example\n#    questions to work correctly. However, the exact answers to these questions\n#    don't seem to matter (it seems that you get the same questions no \n#    matter what \"skill level\" you choose)\n# \n# 3. Press the \"Next\" button.\n#\n# 4. You will then be prompted with a list of regex metacharacters \n# Some of these are a little challenging: http://play.inginf.units.it/#/\n#\n# You can find sample answers here: https://avicoder.me/2019/01/21/regex-fun/\n# There could definitely be other valid answers.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWERS THAT WE DID TOGETHER IN CLASS\n\n# level 1\n#   \\d+\n\n\n# level 2\n#   [a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}\n#   ([a-zA-Z0-9]{2}:){5}[a-zA-Z0-9]{2}\n#   ([0-9a-zA-Z][0-9a-zA-Z]:){5}[0-9a-zA-Z][0-9a-zA-Z]\n\n\n# level 3\n#\n#   ftp://ftp[^.]*\\.[a-zA-Z]+\\.[a-zA-Z]+(\\.[a-zA-Z]+)?/pub/FreeBSD/\n#   ftp://ftp[^.]*(\\.[a-zA-Z]+)+/pub/FreeBSD/\n#   ftp://ftp\\d*(\\.[a-zA-Z]+)+/pub/FreeBSD/\n\n\n# level 4\n#   \\$[^$]+\\$",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#gsub-works-with-patterns",
    "href": "0200200-introToRegularExpressions-v036.html#gsub-works-with-patterns",
    "title": "11  regular expressions (regex)",
    "section": "11.21 gsub works with patterns",
    "text": "11.21 gsub works with patterns\n\n# gsub ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# gsub works with patterns\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ngsub(\"[aeiou]\", \"x\", fruit)   # replace all vowels with x's\n\n [1] \"xpplx\"             \"N. Amxrxcxn xpplx\" \"S. Kxrxxn Fxg\"    \n [4] \"fxg\"               \"stxr frxxt\"        \"pxxr\"             \n [7] \"prxckly pxxr\"      \"Bxxrrx Hxrdy pxxr\" \"chxrry\"           \n[10] \"blxck chxrry\"      \"pxxch\"             \"plxm\"             \n[13] \"kxmqxxt\"           \"bxnxnx\"            \"blxxbxrry\"        \n[16] \"strxwbxrry\"        \"hxnxydxw\"          \"strxwbxrrxxs\"     \n[19] \"yxmbxrry\"         \n\ngsub(\"[^aeiou]\", \"x\", fruit)   # replace all non-vowels with x's\n\n [1] \"axxxe\"             \"xxxxxexixaxxaxxxe\" \"xxxxoxeaxxxix\"    \n [4] \"xix\"               \"xxaxxxxuix\"        \"xeax\"             \n [7] \"xxixxxxxxeax\"      \"xeuxxexxaxxxxxeax\" \"xxexxx\"           \n[10] \"xxaxxxxxexxx\"      \"xeaxx\"             \"xxux\"             \n[13] \"xuxxuax\"           \"xaxaxa\"            \"xxuexexxx\"        \n[16] \"xxxaxxexxx\"        \"xoxexxex\"          \"xxxaxxexxiex\"     \n[19] \"xuxxexxx\"         \n\ngsub(\"[^aeiou]+\", \"x\", fruit)   # replace one or more non-vowels with a single x\n\n [1] \"axe\"         \"xexixaxaxe\"  \"xoxeaxix\"    \"xix\"         \"xaxuix\"     \n [6] \"xeax\"        \"xixeax\"      \"xeuxexaxeax\" \"xex\"         \"xaxex\"      \n[11] \"xeax\"        \"xux\"         \"xuxuax\"      \"xaxaxa\"      \"xuexex\"     \n[16] \"xaxex\"       \"xoxexex\"     \"xaxexiex\"    \"xuxex\"      \n\ngsub(\"[^aeiou]*\", \"x\", fruit)\n\n [1] \"xaxex\"         \"xexixaxaxex\"   \"xoxexaxix\"     \"xix\"          \n [5] \"xaxuxix\"       \"xexax\"         \"xixexax\"       \"xexuxexaxexax\"\n [9] \"xex\"           \"xaxex\"         \"xexax\"         \"xux\"          \n[13] \"xuxuxax\"       \"xaxaxax\"       \"xuxexex\"       \"xaxex\"        \n[17] \"xoxexex\"       \"xaxexixex\"     \"xuxex\"        \n\ngsub(\"[^aeiou]*\", \"x\", \"apple\")\n\n[1] \"xaxex\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#backreferences-1-2-etc",
    "href": "0200200-introToRegularExpressions-v036.html#backreferences-1-2-etc",
    "title": "11  regular expressions (regex)",
    "section": "11.22 backreferences \\1 \\2 etc",
    "text": "11.22 backreferences \\1 \\2 etc\n\n# BACKREFERENCES  ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Parenthesized expressions in a regex can be referred \"back\" to \n# with \\1, \\2 ... \n# (remember in R you need two backslashes - i.e. \\\\1, \\\\2, ...)\n#\n# The original regex standard only allowed for up to nine\n# backreferences, ie. \\1 \\2 \\3 ... \\9  \n# It did not allow for \\10. Some environments have ways to\n# allow you to reference \\10 and further but I personally\n# don't know how to do that in R ... I guess you could \n# research that if you need to but it usually doesn't\n# come up. If it becomes an issue, there is almost always\n# a simple way to workaround the situation\n# using loops and other coding approaches.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n# Find fruits that have 3 letters in the pattern xyx or aba\ngrep (\"([a-z])[a-z]\\\\1\", fruit, value=TRUE)\n\n[1] \"banana\"    \"blueberry\"\n\ngrep (\"([a-z])([a-z])\\\\1\\\\2\", fruit, value=TRUE)\n\n[1] \"banana\"\n\ngrep(\"([a-z][a-z])\\\\1\", fruit, value=TRUE)\n\n[1] \"banana\"\n\ngsub (\"([a-z])([a-z])\\\\1\", \"\\\\2\\\\1\\\\2\", fruit)\n\n [1] \"apple\"             \"N. American apple\" \"S. Korean Fig\"    \n [4] \"fig\"               \"star fruit\"        \"pear\"             \n [7] \"prickly pear\"      \"Beurre Hardy pear\" \"cherry\"           \n[10] \"black cherry\"      \"peach\"             \"plum\"             \n[13] \"kumquat\"           \"bnanna\"            \"blubebrry\"        \n[16] \"strawberry\"        \"honeydew\"          \"strawberries\"     \n[19] \"yumberry\"         \n\ngsub(\"^(.)(.)(.)\",   # reverse the first 3 characters  \n     \"\\\\3\\\\2\\\\1\", \n     fruit)\n\n [1] \"ppale\"             \" .NAmerican apple\" \" .SKorean Fig\"    \n [4] \"gif\"               \"atsr fruit\"        \"aepr\"             \n [7] \"irpckly pear\"      \"ueBrre Hardy pear\" \"ehcrry\"           \n[10] \"albck cherry\"      \"aepch\"             \"ulpm\"             \n[13] \"mukquat\"           \"nabana\"            \"ulbeberry\"        \n[16] \"rtsawberry\"        \"noheydew\"          \"rtsawberries\"     \n[19] \"muyberry\"         \n\n# QUESTION\n# Write a command to swap the first character and last character of\n# each fruit\n\ngsub( \"^(.)(.*)(.)$\" , \"\\\\3\\\\2\\\\1\" , fruit)\n\n [1] \"eppla\"             \"e. American applN\" \"g. Korean FiS\"    \n [4] \"gif\"               \"ttar fruis\"        \"reap\"             \n [7] \"rrickly peap\"      \"reurre Hardy peaB\" \"yherrc\"           \n[10] \"ylack cherrb\"      \"heacp\"             \"mlup\"             \n[13] \"tumquak\"           \"aananb\"            \"ylueberrb\"        \n[16] \"ytrawberrs\"        \"woneydeh\"          \"strawberries\"     \n[19] \"yumberry\"         \n\ngsub( \"^(.)(.*)(.)$\" , \"\\\\3-\\\\2-\\\\1\" , fruit)\n\n [1] \"e-ppl-a\"             \"e-. American appl-N\" \"g-. Korean Fi-S\"    \n [4] \"g-i-f\"               \"t-tar frui-s\"        \"r-ea-p\"             \n [7] \"r-rickly pea-p\"      \"r-eurre Hardy pea-B\" \"y-herr-c\"           \n[10] \"y-lack cherr-b\"      \"h-eac-p\"             \"m-lu-p\"             \n[13] \"t-umqua-k\"           \"a-anan-b\"            \"y-lueberr-b\"        \n[16] \"y-trawberr-s\"        \"w-oneyde-h\"          \"s-trawberrie-s\"     \n[19] \"y-umberr-y\"         \n\n# QUESTION \n# Find fruits that start and end with the same letter\n#\n\ngrep(\"^(.).*\\\\1$\", fruit, value=TRUE)\n\n[1] \"strawberries\" \"yumberry\"    \n\nshoppingList = c(\"35 yumberry pops\", \n                 \"four strawberries         \", \n                 \" five apples\",\n                 \"six yumberry and strawberries pops\")\nshoppingList\n\n[1] \"35 yumberry pops\"                   \"four strawberries         \"        \n[3] \" five apples\"                       \"six yumberry and strawberries pops\"\n\n# QUESTION\n# Use sub or gsub to replace words that start and end with the same letter\n# with the first letter then \"XXXX\" then the last letter of the word\n\ngsub(\"\\\\b(.).*\\\\1\\\\b\", \"\\\\1XXXX\\\\1\", shoppingList)\n\n[1] \"35 yumberry pops\"           \"four strawberries         \"\n[3] \" XXXX apples\"               \"sXXXXs\"                    \n\n# Make the * UN-greedy by following it with a ?\ngsub(\"\\\\b(.).*?\\\\1\\\\b\", \"\\\\1XXXX\\\\1\", shoppingList)\n\n[1] \"35 yumberry pops\"           \"four strawberries         \"\n[3] \" XXXX apples\"               \"sXXXXs\"                    \n\n#\ngsub(\"\\\\b([a-z])[a-z]*?\\\\1\\\\b\", \"\\\\1XXXX\\\\1\", shoppingList)\n\n[1] \"35 yXXXXy pops\"             \"four sXXXXs         \"      \n[3] \" five apples\"               \"six yXXXXy and sXXXXs pops\"",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#greedy-vs-non-greedy-quantifiers",
    "href": "0200200-introToRegularExpressions-v036.html#greedy-vs-non-greedy-quantifiers",
    "title": "11  regular expressions (regex)",
    "section": "11.23 “greedy” vs “non-greedy” quantifiers",
    "text": "11.23 “greedy” vs “non-greedy” quantifiers\n\n# \"greedy\" vs \"non-greedy\" quantifiers ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# By default, quantifiers (e.g. + * ?) are \"greedy\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# By **default** quantifiers are \"greedy\". In other words ...\n#\n# A \"greedy\" match works as follows:\n#\n#   1. The regex engine tries to start matching the regex at the beginning o\n#      of the text\n#\n#   2. If there are any quantifiers (e.g. * + ?) in the regex, the reular\n#      expression engine tries to match AS MUCH of the text as possible.\n#      (see the example in VSCode described below).\n#\n#   3. \n#   \n# by as much as it can. This behavior can be changed by using \n# \"non-greedy\" quantifiers as shown below. To make a quantifier non-greedy\n# just follow it with a question mark.\n#\n\n\n# Greedy quantifiers: match as MUCH as possible while still being able to\n# match rest of the pattern. The greedy quantifiers:\n#\n#   PATTERN{n,m}  minimum of n, maximum of m\n#   PATTERN{n,}   n or more\n#   PATTERN+      same as {1,} i.e. one or more \n#   PATTERN*      same as {0,} i.e. zero or more of the preceding pattern\n#   PATTERN?      same as {0,1} ie. zero or one (i.e. optional)\n#\n# UNgreedy (or stingy) quantifiers:\n# match as LITTLE as possible while still being able to\n# match rest of the pattern. The greedy quantifiers:\n#\n#   PATTERN{n,m}?  minimum of n, maximum of m\n#   PATTERN{n,}?   n or more\n#   PATTERN+?      same as {1,} i.e. one or more \n#   PATTERN*?      same as {0,} i.e. zero or more of the preceding pattern\n#   PATTERN??      same as {0,1} ie. zero or one (i.e. optional)\n#\n\n# EXAMPLES:\n\n# greedy   {n,m}\n# ungreedy {n,m}?\n\nsub(\"[0-9]{3,5}\", \"x\", \"123456 1234\")  # {3,5} greedy   \"x6 1234\"\n\n[1] \"x6 1234\"\n\nsub(\"[0-9]{3,5}?\", \"x\", \"123456 1234\") # {3,5}? UNgreedy \"x456 1234\"\n\n[1] \"x456 1234\"\n\ngsub(\"[0-9]{3,5}\", \"x\", \"123456 1234\")  # {3,5} greedy   \"x6 x\"\n\n[1] \"x6 x\"\n\ngsub(\"[0-9]{3,5}?\", \"x\", \"123456 1234\") # {3,5}? UNgreedy \"xx x4\"\n\n[1] \"xx x4\"\n\n# greedy   +\n# ungreedy +?\n\nsub(\"[0-9]+\", \"x\", \"123456 1234\")      # +  greedy   \"x 1234\"       \n\n[1] \"x 1234\"\n\nsub(\"[0-9]+?\", \"x\", \"123456 1234\")     # +? UNgreedy \"x23456 1234\"  \n\n[1] \"x23456 1234\"\n\ngsub(\"[0-9]+\", \"x\", \"123456 1234\")     # +     greedy   \"x x\"\n\n[1] \"x x\"\n\ngsub(\"[0-9]+?\", \"x\", \"123456 1234\")    # +?    UNgreedy \"xxxxxx xxxx\"\n\n[1] \"xxxxxx xxxx\"\n\n# greedy   *\n# ungreedy *?\n\nsub(\"[0-9]*\", \"x\", \"123456 1234\")      # *  greedy   \"x 1234\"\n\n[1] \"x 1234\"\n\nsub(\"[0-9]*?\", \"x\", \"123456 1234\")     # *? UNgreedy \"x123456 1234\"\n\n[1] \"x123456 1234\"\n\ngsub(\"[0-9]*\", \"x\", \"123456 1234\")     # *     greedy   \"x x\"\n\n[1] \"x x\"\n\ngsub(\"[0-9]*?\", \"x\", \"123456 1234\")    # *?    UNgreedy \"xxxxxx xxxx\"\n\n[1] \"x1x2x3x4x5x6x x1x2x3x4x\"\n\n# greedy   ?\n# ungreedy ??\n\nsub(\"[0-9]?\", \"x\", \"123456 1234\")      # ?  greedy   \"x23456 1234\"\n\n[1] \"x23456 1234\"\n\nsub(\"[0-9]??\", \"x\", \"123456 1234\")     # ?? UNgreedy \"x123456 1234\"\n\n[1] \"x123456 1234\"\n\ngsub(\"[0-9]?\", \"x\", \"123456 1234\")     # ?   greedy   \"xxxxxx xxxx\"\n\n[1] \"xxxxxx xxxx\"\n\ngsub(\"[0-9]??\", \"x\", \"123456 1234\")    # ??  UNgreedy  \"x1x2x3x4x5x6x x1x2x3x4x\"\n\n[1] \"x1x2x3x4x5x6x x1x2x3x4x\"\n\nsub(\"[a-z]*?\", \"x\", \"abcde\")\n\n[1] \"xabcde\"\n\n\n\n11.23.1 examples\n\n# Question\n# Extract JUST the first quotation from each of the following.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nquotations = c('Bill said \"hi\" to Jill. She replied \"bye\" to him and \"hello\" to the driver.',\n               'Tony said \"I love ice cream!\" to his mom. He then said \"I love mom:)\"')\n\n# ANSWER: use greedy and UNgreedy quantifiers as appropriate\nsub('(.*?)(\".*?\")(.*)', \"\\\\2\", quotations)\n\n[1] \"\\\"hi\\\"\"                \"\\\"I love ice cream!\\\"\"\n\n# ANOTHER ANSWER: This also works and perhaps is easier to understand (or perhaps not :)\nsub('([^\"]*)(\"[^\"]*\")(.*)', \"\\\\2\", quotations)\n\n[1] \"\\\"hi\\\"\"                \"\\\"I love ice cream!\\\"\"\n\n###################################.\n# The following are NOT answers\n###################################.\n\n# NOT an answer - Compare with the following - this one gets the last quotation\nsub('(.*)(\".*\")(.*)', \"\\\\2\", quotations)\n\n[1] \"\\\"hello\\\"\"        \"\\\"I love mom:)\\\"\"\n\n# It's helpful to see what happens with the str_view function in the following\n# cases\n\n# This matches everything from the first quotation mark to the last\nstr_view(quotations, '\".*\"')\n\n[1] │ Bill said &lt;\"hi\" to Jill. She replied \"bye\" to him and \"hello\"&gt; to the driver.\n[2] │ Tony said &lt;\"I love ice cream!\" to his mom. He then said \"I love mom:)\"&gt;\n\n# The following is more what we want. *? is now a non-greedy quantifier. \n# Therefore, it matches the first quoted info.\n# Then str_view continues by showing you the next match (i.e. the 2nd\n# quoted info), then the 3rd match, etc.\nstr_view(quotations, '\".*?\"')\n\n[1] │ Bill said &lt;\"hi\"&gt; to Jill. She replied &lt;\"bye\"&gt; to him and &lt;\"hello\"&gt; to the driver.\n[2] │ Tony said &lt;\"I love ice cream!\"&gt; to his mom. He then said &lt;\"I love mom:)\"&gt;\n\n\n\nAN ASIDE - the 1st question mark is not actually necessary in this case\n\n# This also works - see below for why the first ? is not necessary in this case.\nsub('(.*)(\".*?\")(.*)', \"\\\\2\", quotations)\n\n[1] \"\\\"hi\\\"\"                \"\\\"I love ice cream!\\\"\"\n\n\n\n# Use VSCode to understand greedy VS non-greedy quantifiers\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Use VSCode to open a text file that contains a lot of English text.\n#\n# Do a regex search in VSCode for\n#   e.*e\n#\n# This is a \"greedy\" search (since it uses * instead of *?).\n# It searches for \"e\" following by anything followed by another \"e\".\n# This will highlight on each line all the text starting from the \n# first e on the line until the last e on the line.\n#\n# Now search again using a non-greedy quantifier, i.e. .*?\n#   e.*?e\n#\n# The results will be potentially several matches on each line. \n# Each match starts with an \"e\" and extends to the next \"e\" but no further.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#the-complete-list-of-quantifiers",
    "href": "0200200-introToRegularExpressions-v036.html#the-complete-list-of-quantifiers",
    "title": "11  regular expressions (regex)",
    "section": "11.24 The complete list of quantifiers",
    "text": "11.24 The complete list of quantifiers\n\n# The complete list of quantifiers \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# In general you can use ? to turn any greedy quantifier into a non-greedy\n# quantifier\n#\n#   *  - zero or more (greedy)\n#   *? - zero or more (non-greedy)\n#\n#   +  - one or more (greedy)\n#   +? - one or more (non-greedy)\n#\n#   ?  - zero or one (greedy)\n#   ?? - zero or one (non-greedy)\n#\n# NOTE the following also allow for non-greedy ? modifier. However, these\n# are not really necessary - see the notes below.\n#\n#   {3,5}  - 3,4 or 5 repetitions (greedy - i.e. will match all 5 if they are there)\n#   {3,5}? - (non-greedy - will match 3 even if there are 5)\n#            Notice - you could just write {3} instead of {3,5}? (think about it)\n#\n#   {3,}   - (greedy)     3 or more matches in a row, matches as many as there are\n#   {3,}?  - (non-greedy) will always match first 3 even if there are more (non-greedy)\n#            Notice - you could just write {3} instead of {3,}? (think about it)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n11.24.1 examples\n\n# EXAMPLE\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nquotedCsv = c('\"a,b,c\",\"apple,orange\",\"watermellon\"')\ncat(quotedCsv)\n\n\"a,b,c\",\"apple,orange\",\"watermellon\"\n\n# The following gsub uses a greedy quantifier, ie. *.\n# It will match as much as it can.\n\n# greedy\ngsub('\".*\"', 'QUOTES', quotedCsv)   # \"QUOTES\"\n\n[1] \"QUOTES\"\n\n# non-greedy\ngsub('\".*?\"', 'QUOTES', quotedCsv) # \"QUOTES,QUOTES,QUOTES\"\n\n[1] \"QUOTES,QUOTES,QUOTES\"\n\n# A MORE COMPLEX EXAMPLE\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ntext = \"She sells sea shells by the sea shore.\"\n\nresult = gsub(\"(.*)(sea)(.*)\", \"1st \\\\1\\n2nd \\\\2\\n3rd \\\\3\", text)\n\ncat(result)\n\n1st She sells sea shells by the \n2nd sea\n3rd  shore.\n\n# Reults are \"greedy\", i.e. the .* in the beginning matches as much as \n# it can as long as the whole regex will work. The result is:\n\n# 1st part: She sells sea shells by the \n# 2nd part: sea\n# 3rd part: shore.\n\n# The following DOES NOT happen\n#\n# 1st part:    She sells \n# 2nd part:    sea\n# 3rd par:     shells by the sea shore.\n\n\n# we can make the regex UN-GREEDY by using a ? AFTER the *\n#\n\ntext = \"She sells sea shells by the sea shore.\"\n\n\nresult = gsub(\"(.*?)(sea)(.*)\", \"1st \\\\1\\n2nd \\\\2\\n3rd \\\\3\", text)\n\ncat(result)\n\n1st She sells \n2nd sea\n3rd  shells by the sea shore.",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#challenges",
    "href": "0200200-introToRegularExpressions-v036.html#challenges",
    "title": "11  regular expressions (regex)",
    "section": "11.25 Challenges",
    "text": "11.25 Challenges\n# Challenges ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Use the following for the challenges below\n\nstuff = c(\"His ssn is 876543890.\",\n          \"Call me at 212 950 3216 when you have time.\",\n          \"Please call Joe at 777-7777\",\n          \"Sue's number is (555)123   4567.\",\n          \"7182345678 is the number for the helpdesk.\",\n          \"Email Anne at anne@anneco.com and explain.\",\n          \"Meet me @ 10pm.\",\n          \"Mikes company is called mike@large\",\n          \"To work in Whatsapp internationally you need to enter his number as +1 555 555 5555.\")\nstuff\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Write a regular expression to find telephone numbers\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\npattern = paste0 ( \"(^|\\\\D)\",              # start with a non-digit or the start of the text\n                   \"(\\\\(?\\\\d{3}\\\\)?)?\",    # optional area code with optional (parentheses)\n                   \" *\",                   # zero or more spaces\n                   \"\\\\d{3}\",               # first 3 digits\n                   \" *-? *\",               # any number of spaces surrounding an optional dash\n                   \"\\\\d{4}\",\n                   \"(\\\\D|$)\")  # end with a non digit or a the end of the text\n\npattern\ngrep (pattern, stuff, value=TRUE)\n\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Challenge: \n# \n# Extract just the telephone numbers in a standard format.\n#\n# Make sure to use parentheses in the pattern.\n#\n# Substitute JUST the parts you want.\n#\n# Use grep (... value=FALSE ...) to get the positions that \n# matched and keep only those.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# Show how to extract just the area code, first 3 and last 4 digits\nstuff\nnewpattern = paste0 ( \"(^|.*\\\\D)\",  # tel# at beginning or after a non-digit\n                      \"(\\\\(?(\\\\d{3})\\\\)?)?\", # optional area code with optional (parentheses)\n                      \"( *)\",      # zero or more spaces\n                      \"(\\\\d{3})\",  # first 3 digits\n                      \"( *-? *)\",  # any number of spaces surrounding an optional dash\n                      \"(\\\\d{4})\",  # last 4 digits\n                      \"(\\\\D.*|$)\"  # tel # at end or before non-digit\n)\ngrep(newpattern, stuff, value=TRUE)\npositionsWithTelNums = grep(newpattern, stuff)\nreformatted = gsub(newpattern, \"\\\\2 \\\\5 \\\\7\", stuff) \n\nreformatted[positionsWithTelNums]\n\n\n\n\nresult = gsub (newpattern, \n               paste0(\"1stPart \\\\1\\n\",\n                      \"2ndPart \\\\2\\n\",\n                      \"3rdPart \\\\3\\n4thPart \\\\4\\n\",\n                      \"5thPart \\\\5\\n6thPart \\\\6\\n7thPart \\\\7\\n8thPart \\\\8\\n\"),\n               stuff)\n\nresult\n\ncat(result[1])\ncat(result[2])\ncat(result[3])\n\n# The following example shows a \"bug\" in the regex. \n# Since regular expressions are \"greedy\", the area code is matched\n# in the 1st part if it is indeed surrounded by parentheses. \n# We can fix this but it is tricky.\ncat(result[4])\n\ncat(result[5])\ncat(result[6])\ncat(result[7])\ncat(result[8])\ncat(result[9])\n\n# See the pattern used above\n\ntelNums = gsub(newpattern, \"\\\\3 \\\\5-\\\\7\", stuff)\ntelNums\ncat(telNums, sep=\"\\n\")\n\npositionsWithTelNums = grep(newpattern, stuff, value=FALSE)\npositionsWithTelNums\n\ntelNums\ntelNums [ positionsWithTelNums ]\n\n\nstuff\ngsub(newpattern, \"XXXXXXXXXX\", stuff)\n\n\n\n\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# CHALLENGE\n#\n# - write a regular expression to find email addresses and extract them \n#   from a character vector\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# CHALLENGE\n#\n# Get a vector of all the words from \"The adventures of Sherlock Holmes\".\n# You can find the UTF-8 encoding version here:\n#    https://www.gutenberg.org/files/1661/1661-0.txt\n#\n# HINT: use\n#  - readLines  with  url(\"https://www.gutenberg.org/files/1661/1661-0.txt\")\n#  - strsplit\n#  - unlist    (remember that strsplit returns a LIST)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nbook = readLines(url(\"https://www.gutenberg.org/files/1661/1661-0.txt\"),\n                 encoding=\"UTF-8\")\nhead(book)\n\nwords = strsplit(book, \" +\")\n\nhead(words)\n\nwords = unlist(words)\n\nhead(words, 100)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# CHALLENGE\n#\n# Get a vector of the 10 most common words in \"The Adventures of Sherlock Holmes\"\n# HINT: Use the table function.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nwordTable = table(words)\nhead(wordTable)\n\nsorted = sort(wordTable)\nhead(wordTable)\n\ntail(sorted)\n\n\n# Lookahead and lookbehind ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#\n# Lookahead and lookbehind are used to match a portion of the text but NOT\n# consider it part of the match. To use this you MUST set the following\n# argument in grep, strsplit, gsub, etc:    perl=TRUE\n#\n#    Positive Lookahead (?=pattern)\n#    Negative Lookahead (?!pattern)\n#    Positive Lookbehind    (?&lt;= pattern)\n#    Negative Lookbehind    (?&lt;! pattern)\n# \n# See this page\n#  https://debuggingdata.com/post/r/regular-expressions-look-arounds/\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nstuff = c(\"a100\", \"200b\" , \"@300\", \"400@\")\nstuff\n\n# Lookbehind\ngsub(\"(?&lt;=[a-z])\\\\d+\", \"NUMBER\", stuff, perl=TRUE)\n\n\n# Lookbehind  (not equal to )\ngsub(\"(?&lt;![a-z0-9])\\\\d+\", \"NUMBER\", stuff, perl=TRUE)\n\n\n# Lookahead\ngsub(\"\\\\d+(?=[a-z])\", \"NUMBER\", stuff, perl=TRUE)\n\n# Lookahead   (not equal to )\ngsub(\"\\\\d+(?![a-z0-9])\", \"NUMBER\", stuff, perl=TRUE)\n\n\nquotations\n\n# Replace all letters between quotation marks with XXXX\ngsub('(?&lt;=\")[a-zA-Z!.? ]+(?=\")', \"XXXX\", quotations, perl=TRUE)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# CHALLENGE\n#\n# Get a vector of all the sentences from \"The adventures of Sherlock Holmes\".\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nbook = readLines(url(\"https://www.gutenberg.org/files/1661/1661-0.txt\"),\n                 encoding=\"UTF-8\")\n\nbook[100:110]\n\nnewBook = paste0(book, collapse=\" \")\n\nlength(newBook)\n\nstr(newBook)\n\nsentences = strsplit(newBook, \"[.?!]\")[[1]]\n\nstr(sentences)\n\nlength(sentences)\n\nsentences[3]\nhead(sentences)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# CHALLENGE\n#\n# Get a vector of all quotations from \"The adventures of Sherlock Holmes\".\n# HINT: use an un-greedy search\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n# Other arguments and functions ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# help pages\n\n?regex\n\n?grep\n\n?strsplit\n\n\n# grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,\n#      fixed = FALSE, useBytes = FALSE, invert = FALSE)\n#\n# grepl(pattern, x, ignore.case = FALSE, perl = FALSE,\n#       fixed = FALSE, useBytes = FALSE)\n#\n# sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,\n#     fixed = FALSE, useBytes = FALSE)\n#\n# gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,\n#      fixed = FALSE, useBytes = FALSE)\n#\n\ntext = \"She sells sea shells by the sea shore.\"\n\nsub(\"sea\", \"xxxxx\", text)\n\ngsub(\"sea\", \"xxxxx\", text)\n\nsub(\"s\", \"x\", text)\n\ngsub(\"s\", \"x\", text)\n\ngsub(\".\", \"x\", text)\n\ngsub(\"\\\\.\", \"x\", text)\n\ngsub(\".\", \"x\", text, fixed=TRUE)\n\n\nwords = strsplit(text, \" \")\n\nwords\n\n# Get the 2nd word from the text:\nwords[[1]][2]\n\n\nwords = strsplit(addresses, \" \")\n\n\nwords\n\n# Get the 2nd word from the 3rd address\nwords[[3]][2]\n\n\n# Other functions - sub vs gsub, regexpr, gregexpr, regexec ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# See the documentation for the following functions: \n#\n# regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,\n#         fixed = FALSE, useBytes = FALSE)\n#\n# gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,\n#          fixed = FALSE, useBytes = FALSE)\n#\n# regexec(pattern, text, ignore.case = FALSE, perl = FALSE,\n#         fixed = FALSE, useBytes = FALSE)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "0200200-introToRegularExpressions-v036.html#more-practice-with-regex---see-the-following-websites",
    "href": "0200200-introToRegularExpressions-v036.html#more-practice-with-regex---see-the-following-websites",
    "title": "11  regular expressions (regex)",
    "section": "11.26 More practice with regex - see the following websites",
    "text": "11.26 More practice with regex - see the following websites\n# More practice with regex  ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# See the following sites:\n\n# http://regextutorials.com/\n# https://regexone.com/\n# https://librarycarpentry.org/lc-data-intro/03-quiz/index.html\n# https://www.hackerrank.com/domains/regex\n# https://regex.sketchengine.co.uk/\n\n\n# Period comes between rest of line and first word\npattern = paste0(\"(^[A-Za-z]+)\",     # first word on line\n                 \"(\\\\s+)\",           # spaces after the first word\n                 \"(.*)\"              # rest of the line\n                 )\n\nstr_replace_all(sentences, pattern=pattern, replacement=\"\\\\3\\\\2\\\\1\")\n\n\n\n# Period comes between rest of line and first word\npattern = paste0(\"(^[A-Za-z]+)\",     # first word on line\n                 \"(\\\\s+)\",           # spaces after the first word\n                 \"(.*)\",              # rest of the line except for the final period\n                 \"([?!.])\"\n)\n\nmovedFirstWordToEnd = str_replace_all(sentences, pattern=pattern, replacement=\"\\\\3\\\\2\\\\1\\\\4\")\nstr_to_sentence(movedFirstWordToEnd)\n\n#########################\n\n# change the case on the first word to uppercase\n# change the case on the last word to lowercase\n\ntoupper(c(\"hello\", \"goodbye\"))\n\n\n\n#str_replace_all(sentences, pattern=\"(^[A-Za-z]+)(\\\\s+)(.*)\", \"\\\\3\\\\2\\\\1\")",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>regular expressions (regex)</span>"
    ]
  },
  {
    "objectID": "000260-PracticeWithRegulaExpressions-v003.html",
    "href": "000260-PracticeWithRegulaExpressions-v003.html",
    "title": "12  Practice with Regular Expressions",
    "section": "",
    "text": "Please refer to the following websites for some practice with creating Regular Expressions (regex). Solutions are available online if you get stuck.\n\nThe following website has a tutorial and practice problems as you work through the tutorial: https://regexone.com/ ( also see: https://umar-yusuf.blogspot.com/2021/03/regexonecom-alternative-solution.html )\nThe following is another website with a short tutorial and practice problems: http://regextutorials.com/\nThe following website encourages you to practice regex concepts through puzzles that are very similar to typical “crossword” puzzles. Make sure to read “how to play”. There is a website and an app for your phone. They are both good (the phone app is much easier for using on a phone than the website): https://regexcrossword.com/",
    "crumbs": [
      "Regular Expressions",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Practice with Regular Expressions</span>"
    ]
  },
  {
    "objectID": "0400050-whatIsTidyverse-v001.html",
    "href": "0400050-whatIsTidyverse-v001.html",
    "title": "13  What is the “tidyverse”",
    "section": "",
    "text": "13.1 Installation and Loading\nTo install all tidyverse packages:\nTo load the core tidyverse packages:\nAlternatively, you can install and load each package separately.",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is the \"tidyverse\"</span>"
    ]
  },
  {
    "objectID": "0400050-whatIsTidyverse-v001.html#installation-and-loading",
    "href": "0400050-whatIsTidyverse-v001.html#installation-and-loading",
    "title": "13  What is the “tidyverse”",
    "section": "",
    "text": "install.packages(\"tidyverse\")\n\nlibrary(tidyverse)",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is the \"tidyverse\"</span>"
    ]
  },
  {
    "objectID": "0400050-whatIsTidyverse-v001.html#core-tidyverse-packages",
    "href": "0400050-whatIsTidyverse-v001.html#core-tidyverse-packages",
    "title": "13  What is the “tidyverse”",
    "section": "13.2 Core Tidyverse Packages",
    "text": "13.2 Core Tidyverse Packages\nThe core tidyverse includes packages that you’ll likely use in almost every analysis. When you run library(tidyverse), these packages are automatically loaded:\n\n13.2.1 ggplot2\n\nPurpose: Creates elegant data visualizations using the Grammar of Graphics\nKey features: Layered approach to building plots, extensive customization options\nCommon uses: Creating statistical graphics, from basic scatter plots to complex multi-layered visualizations\nLearn more: https://ggplot2.tidyverse.org\n\n\n\n13.2.2 dplyr\n\nPurpose: Data manipulation and transformation\nKey features: Functions for filtering, selecting, mutating, summarizing, and joining data\nCommon uses: Subset rows, select columns, create new variables, calculate summaries\nLearn more: https://dplyr.tidyverse.org\n\n\n\n13.2.3 tidyr\n\nPurpose: Data tidying and reshaping\nKey features: Functions for pivoting data between wide and long formats, handling missing values\nCommon uses: Restructuring data to make it tidy (each variable in a column, each observation in a row)\nLearn more: https://tidyr.tidyverse.org\n\n\n\n13.2.4 readr\n\nPurpose: Fast and friendly reading of rectangular data (like CSV files)\nKey features: Consistent parsing, progress bars, warnings about parsing problems\nCommon uses: Reading CSV, TSV, and other delimited files\nLearn more: https://readr.tidyverse.org\n\n\n\n13.2.5 purrr\n\nPurpose: Functional programming tools\nKey features: Functions for working with vectors and lists, replacing many loop functions\nCommon uses: Applying functions to lists, working with nested data structures\nLearn more: https://purrr.tidyverse.org\n\n\n\n13.2.6 tibble\n\nPurpose: Modern reimagining of data frames\nKey features: Better printing, stricter subsetting, and enhanced creation of data frames\nCommon uses: Creating and working with data frames in a more consistent way\nLearn more: https://tibble.tidyverse.org\n\n\n\n13.2.7 stringr\n\nPurpose: String manipulation\nKey features: Consistent interface for working with strings\nCommon uses: Pattern matching, string extraction, modification, and joining\nLearn more: https://stringr.tidyverse.org\n\n\n\n13.2.8 forcats\n\nPurpose: Working with categorical variables (factors)\nKey features: Tools for reordering factor levels, recoding, and collapsing factors\nCommon uses: Managing and modifying factor variables\nLearn more: https://forcats.tidyverse.org",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is the \"tidyverse\"</span>"
    ]
  },
  {
    "objectID": "0400050-whatIsTidyverse-v001.html#non-core-tidyverse-packages",
    "href": "0400050-whatIsTidyverse-v001.html#non-core-tidyverse-packages",
    "title": "13  What is the “tidyverse”",
    "section": "13.3 Non-Core Tidyverse Packages",
    "text": "13.3 Non-Core Tidyverse Packages\nThese packages are part of the tidyverse but aren’t loaded automatically with library(tidyverse). You’ll need to load them individually when needed:\n\n13.3.1 readxl\n\nPurpose: Reading Excel files\nLoad with: library(readxl)\nLearn more: https://readxl.tidyverse.org\n\n\n\n13.3.2 haven\n\nPurpose: Reading SPSS, Stata, and SAS files\nLoad with: library(haven)\nLearn more: https://haven.tidyverse.org\n\n\n\n13.3.3 lubridate\n\nPurpose: Working with dates and times\nLoad with: library(lubridate)\nLearn more: https://lubridate.tidyverse.org\n\n\n\n13.3.4 hms\n\nPurpose: Working with time-of-day values\nLoad with: library(hms)\nLearn more: https://hms.tidyverse.org\n\n\n\n13.3.5 jsonlite\n\nPurpose: Working with JSON data\nLoad with: library(jsonlite)\nLearn more: https://jsonlite.tidyverse.org\n\n\n\n13.3.6 xml2\n\nPurpose: Working with XML data\nLoad with: library(xml2)\nLearn more: https://xml2.tidyverse.org\n\n\n\n13.3.7 rvest\n\nPurpose: Web scraping\nLoad with: library(rvest)\nLearn more: https://rvest.tidyverse.org",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is the \"tidyverse\"</span>"
    ]
  },
  {
    "objectID": "0400050-whatIsTidyverse-v001.html#finding-help-and-learning-more",
    "href": "0400050-whatIsTidyverse-v001.html#finding-help-and-learning-more",
    "title": "13  What is the “tidyverse”",
    "section": "13.4 Finding Help and Learning More",
    "text": "13.4 Finding Help and Learning More\n\nEach package has its own website (links provided above) with comprehensive documentation, vignettes, and examples.\nWithin R, you can access help for any function using the ? operator:\n\n?select  # Get help for dplyr's select function\n\nCheatsheets are available for many tidyverse packages:\n\n\nAccess in RStudio: Help &gt; Cheatsheets\nDownload from: https://posit.co/resources/cheatsheets/\n\n\nThe official tidyverse website (https://www.tidyverse.org) provides additional resources and learning materials.\nThe “R for Data Science” book (https://r4ds.hadley.nz/) is an excellent resource for learning the tidyverse ecosystem.",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is the \"tidyverse\"</span>"
    ]
  },
  {
    "objectID": "0400050-whatIsTidyverse-v001.html#understanding-core-vs-non-core-packages",
    "href": "0400050-whatIsTidyverse-v001.html#understanding-core-vs-non-core-packages",
    "title": "13  What is the “tidyverse”",
    "section": "13.5 Understanding Core vs Non-Core Packages",
    "text": "13.5 Understanding Core vs Non-Core Packages\nThe distinction between core and non-core tidyverse packages is primarily about frequency of use and interdependence:\n\n13.5.1 Core Packages:\n\nLoaded automatically with library(tidyverse)\nUsed in most data analysis workflows\nWork together seamlessly\nShare common design principles and documentation styles\nUpdated and maintained on a coordinated release schedule\n\n\n\n13.5.2 Non-Core Packages:\n\nMust be loaded individually\nServe more specialized purposes\nStill follow tidyverse design principles\nMay be used less frequently\nMay have different release schedules\nOften depend on core packages but are not required for basic data analysis workflows\n\nRemember that being “non-core” doesn’t mean less important—it simply means the package serves a more specialized purpose that isn’t needed in every analysis.",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>What is the \"tidyverse\"</span>"
    ]
  },
  {
    "objectID": "0400100-usingPipes-v001.html",
    "href": "0400100-usingPipes-v001.html",
    "title": "14  Using pipes, i.e. %>% and |>",
    "section": "",
    "text": "14.1 Intro to the “pipe”, i.e. %&gt;% from the magrittr package\n# The pipe symbol, i.e. %&gt;% that we will be discussing below\n# is part of the magrittr package. You can install/load magrittr directly.\n# Alternatively, magrittr is automatically installed/loaded with most of the\n# tidyverse packages. \nif(!require(magrittr)) {install.packages(\"magrittr\");require(magrittr);}\n\nLoading required package: magrittr\n\n# For more info see:\n#\n# help(package=\"magrittr\")`",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Using pipes, i.e. %>% and |></span>"
    ]
  },
  {
    "objectID": "0400100-usingPipes-v001.html#using-the-operator.",
    "href": "0400100-usingPipes-v001.html#using-the-operator.",
    "title": "14  Using pipes, i.e. %>% and |>",
    "section": "14.2 Using the %>% operator.",
    "text": "14.2 Using the %&gt;% operator.\nThe %&gt;% operator is used to send the output of one command into the into a 2nd commmand. Specifically, the info on the left side of the %&gt;% is sent into the first argument of the function on the right hand side of the %&gt;% See the example below.\n\n# The following is code that does NOT use a \"pipe\".\nx = seq(4,6)\nrep(x, 3)\n\n[1] 4 5 6 4 5 6 4 5 6\n\n# The following code uses a \"pipe\", i.e. %&gt;%, to send\n# the info from the left of the %&gt;% into the first argument\n# of the function that appears on the right hand side\n# of the %&gt;%\nseq(4, 6) %&gt;% rep(3)\n\n[1] 4 5 6 4 5 6 4 5 6\n\n# We can extend this further\nseq(4, 6)  %&gt;%  rep(3)  %&gt;%  sum()\n\n[1] 45\n\n# To make it easier to read, we can put each function\n# call on a separate line.\nseq(4, 6) %&gt;%\n  rep(3) %&gt;%\n  sum()\n\n[1] 45\n\n# Notice in the code above that the %&gt;% appears at the end of \n# each line. This is necessary to indicate to R that the command\n# isn't finished yet.\n\n# Without pipes, we could have coded the same thing using the\n# following R code. This still works but the pipes make it easier\n# to read and understand the code.\n\nx = seq(4,6)\ny = rep(x, 3)\nsum(y)\n\n[1] 45",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Using pipes, i.e. %>% and |></span>"
    ]
  },
  {
    "objectID": "0400100-usingPipes-v001.html#passing-a-value-to-an-argument-that-is-not-the-1st-argument",
    "href": "0400100-usingPipes-v001.html#passing-a-value-to-an-argument-that-is-not-the-1st-argument",
    "title": "14  Using pipes, i.e. %>% and |>",
    "section": "14.3 Passing a value to an argument that is not the 1st argument",
    "text": "14.3 Passing a value to an argument that is not the 1st argument\nIf you want to send a value to an argument that is not the first, you can use the period as shown in the code below.\n\n# define a vector of numbers\nnums = c(1,3)\n\n# This is without the pipe:\nrep(\"hello\", sum(nums))\n\n[1] \"hello\" \"hello\" \"hello\" \"hello\"\n\n# This is with the pipe. We use the . in the rep function to show\n# where the output of the pipe should go.\n\nsum(nums) %&gt;%\n  rep(\"hello\", .)\n\n[1] \"hello\" \"hello\" \"hello\" \"hello\"",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Using pipes, i.e. %>% and |></span>"
    ]
  },
  {
    "objectID": "0400100-usingPipes-v001.html#you-can-also-use-the-operator",
    "href": "0400100-usingPipes-v001.html#you-can-also-use-the-operator",
    "title": "14  Using pipes, i.e. %>% and |>",
    "section": "14.4 You can also use the |> operator",
    "text": "14.4 You can also use the |&gt; operator\nThe %&gt;% was and is still part of the magrittr package. The pipe was seen as such a useful tool that as of R version 4.1 “base-R” started to include its own version of the pipe. The base-R version of the pipe is |&gt; while the magrittr version of the pipe is %&gt;%\nThe pipe symbol that is now built into R (without needing to load the magrittr package) provides basic pipe functionality. However, if you want extra features (e.g. using the . to show where the data should be placed) then you still need to use the magrittr version of the pipe.\n\n# The following is the new base-R version of the pipe\nseq(4, 6) |&gt;\n  rep(3) |&gt;\n  sum()\n\n[1] 45\n\n# Unfortunately you cannot use |&gt; to send the output to any location\n# other than the 1st argument. For example:\nnums = c(1,3)\n\n# this doesn't work:\nsum(nums) |&gt;        # using the new base-R pipe symbol |&gt;\n  rep(\"hello\", .)   \n\nError: object '.' not found\n\n# but this does\nsum(nums) %&gt;%       # using magrittr pipe symbol %&gt;%\n  rep(\"hello\", .)   \n\n[1] \"hello\" \"hello\" \"hello\" \"hello\"",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Using pipes, i.e. %>% and |></span>"
    ]
  },
  {
    "objectID": "0400200-stringr-tutorials-v003.html",
    "href": "0400200-stringr-tutorials-v003.html",
    "title": "15  stringr tutorial",
    "section": "",
    "text": "15.1 stringr: Basic String Manipulation\nchr_data &lt;- c(\"Data\", \"Daft\", \"YouTube\", \"channel\",\n             \"learn\", \"and\", \"have\", \"FUN!\")\n# Check the length of a string\nstr_length(\"Hi there! How are you?\")\n\n[1] 22\n\nstr_length(chr_data)\n\n[1] 4 4 7 7 5 3 4 4\n# Convert string letters to uppercase\nstr_to_upper(chr_data)\n\n[1] \"DATA\"    \"DAFT\"    \"YOUTUBE\" \"CHANNEL\" \"LEARN\"   \"AND\"     \"HAVE\"   \n[8] \"FUN!\"\n# Convert string letters to lowercase\nstr_to_lower(chr_data)\n\n[1] \"data\"    \"daft\"    \"youtube\" \"channel\" \"learn\"   \"and\"     \"have\"   \n[8] \"fun!\"\n# Convert string to title (first letter uppercase)\nstr_to_title(chr_data)\n\n[1] \"Data\"    \"Daft\"    \"Youtube\" \"Channel\" \"Learn\"   \"And\"     \"Have\"   \n[8] \"Fun!\"\n# Convert string to sentence (only first letter of first word uppercase)\nstr_to_sentence(\"make me into a SENTENCE!\")\n\n[1] \"Make me into a sentence!\"\n# Trim whitespace\nstr_trim(\"  Trim Me!   \")\n\n[1] \"Trim Me!\"\n# Pad strings with whitespace\nstr_pad(\"Pad Me!\", width = 15, side=\"both\")\n\n[1] \"    Pad Me!    \"\n# Truncate strings to a given length\nstr_trunc(\"If you have a long string, you might want to truncate it!\", \n          width = 50)\n\n[1] \"If you have a long string, you might want to tr...\"",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>stringr tutorial</span>"
    ]
  },
  {
    "objectID": "0400200-stringr-tutorials-v003.html#stringr-split-and-join-strings",
    "href": "0400200-stringr-tutorials-v003.html#stringr-split-and-join-strings",
    "title": "15  stringr tutorial",
    "section": "15.2 stringr: Split and Join Strings",
    "text": "15.2 stringr: Split and Join Strings\n\n# Split strings\nstr_split(\"Split Me!\", pattern = \" \")\n\n[[1]]\n[1] \"Split\" \"Me!\"  \n\nfood &lt;- c(\n  \"apples and oranges and pears and bananas\",\n  \"pineapples and mangos and guavas\"\n)\n\nstringr::str_split(food, \" and \")\n\n[[1]]\n[1] \"apples\"  \"oranges\" \"pears\"   \"bananas\"\n\n[[2]]\n[1] \"pineapples\" \"mangos\"     \"guavas\"    \n\n\n\n# Join strings (equivalent to base R paste())\nstr_c(\"Join\", \"Me!\", sep=\"_\")\n\n[1] \"Join_Me!\"\n\n# Join strings (equivalent to base R paste())\nstr_c(c(\"Join\", \"vectors\"), c(\"Me!\", \"too!\"), sep=\"_\")\n\n[1] \"Join_Me!\"     \"vectors_too!\"\n\n\n\n# Collapse a vector of strings into a single string\nstr_c(c(\"Turn\", \"me\", \"into\", \"one\", \"string!\"), collapse= \" \")\n\n[1] \"Turn me into one string!\"\n\n\n\n# Convert NA values in character vector to string \"NA\"\nstr_replace_na(c(\"Make\", NA, \"strings!\"))\n\n[1] \"Make\"     \"NA\"       \"strings!\"",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>stringr tutorial</span>"
    ]
  },
  {
    "objectID": "0400200-stringr-tutorials-v003.html#stringr-sorting-strings",
    "href": "0400200-stringr-tutorials-v003.html#stringr-sorting-strings",
    "title": "15  stringr tutorial",
    "section": "15.3 stringr: Sorting Strings",
    "text": "15.3 stringr: Sorting Strings\n\nsort_data &lt;- c(\"sort\", \"me\", \"please!\")\n\n# Get vector of indicies that would sort a string alphabetically\nstr_order(sort_data)\n\n[1] 2 3 1\n\n\n\n# Use discovered ordering to extract data in sorted order\nsort_data[str_order(sort_data)]\n\n[1] \"me\"      \"please!\" \"sort\"   \n\n\n\n# Directly extract sorted strings\nstr_sort(sort_data)\n\n[1] \"me\"      \"please!\" \"sort\"   \n\n\n\n# Extract in reverse sorted order\nstr_sort(sort_data, decreasing = TRUE)\n\n[1] \"sort\"    \"please!\" \"me\"",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>stringr tutorial</span>"
    ]
  },
  {
    "objectID": "0400200-stringr-tutorials-v003.html#stringr-string-interpolation",
    "href": "0400200-stringr-tutorials-v003.html#stringr-string-interpolation",
    "title": "15  stringr tutorial",
    "section": "15.4 stringr: String Interpolation",
    "text": "15.4 stringr: String Interpolation\n\nfirst &lt;- c(\"Luke\", \"Han\", \"Jean-Luc\")\nlast &lt;- c(\"Skywalker\", \"Solo\", \"Picard\")\n\n# Interpolate (insert variable values) into strings with str_glue()\nstr_glue(\"My name is {first}. {first} {last}.\")\n\nMy name is Luke. Luke Skywalker.\nMy name is Han. Han Solo.\nMy name is Jean-Luc. Jean-Luc Picard.\n\n\n\nminimum_age &lt;- 18\nover_minimum &lt;- c(5, 17, 33)\n\n# Interpolate the result of an execution into a string\nstr_glue(\"{first} {last} is {minimum_age + over_minimum} years old.\")\n\nLuke Skywalker is 23 years old.\nHan Solo is 35 years old.\nJean-Luc Picard is 51 years old.\n\n\n\nnum &lt;- c(1:5)\n\n# Interpolate the result of function calls\nstr_glue(\"The square root of {num} is {round(sqrt(num), 3)}.\")\n\nThe square root of 1 is 1.\nThe square root of 2 is 1.414.\nThe square root of 3 is 1.732.\nThe square root of 4 is 2.\nThe square root of 5 is 2.236.\n\n\n\nfuel_efficiency &lt;- 30\n\n# Interpolate strings using data from a data frame\nmtcars %&gt;% rownames_to_column(\"Model\") %&gt;%\n         filter(mpg &gt; fuel_efficiency) %&gt;%\n         str_glue_data(\"The {Model} gets {mpg} mpg.\")\n\nThe Fiat 128 gets 32.4 mpg.\nThe Honda Civic gets 30.4 mpg.\nThe Toyota Corolla gets 33.9 mpg.\nThe Lotus Europa gets 30.4 mpg.",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>stringr tutorial</span>"
    ]
  },
  {
    "objectID": "0400200-stringr-tutorials-v003.html#stringr-string-matching",
    "href": "0400200-stringr-tutorials-v003.html#stringr-string-matching",
    "title": "15  stringr tutorial",
    "section": "15.5 stringr: String Matching",
    "text": "15.5 stringr: String Matching\n\nhead(data,8)\n\n       author score\n1  butt_ghost     3\n2 buntaro_pup     1\n3  iidealized     2\n4   [deleted]     1\n5   stathibus     6\n6 soulslicer0     2\n7 swiftsecond     1\n                                                                                                                                                                                                                       body\n1                                                                                      Hdf5. It's structured, it's easy to get data in and out, and it's fast. Plus it will scale if you ever get up there in dataset size.\n2                                                                                                                                                                                                          yep, good point.\n3                                                            Google must have done (and is doing) serious internal research in ranking. I've heard they're pretty good at that and they've even made some money doing it :P\n4                                                                                                                                                                                                                 [deleted]\n5                                                                                                   Sebastian Thrun's book, Probabilistic Robotics, goes through this in great detail. Get it, read it, make it your bible.\n6 This. Such a legendary book. Kalman filters, particle filters, recursive Bayesian filters and a whole bunch of other stuff. I learnt so much. Read these 3 for starts from the book, then come back and ask the questions\n7                                                                                                                                                                                                   Do you still need help?\n\n\n\n# Detecting the presence of a pattern in strings\nstr_detect(data$body[1:100], pattern=\"deep\")\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE    NA    NA    NA    NA    NA\n [13]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [25]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [37]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [49]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [61]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [73]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [85]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [97]    NA    NA    NA    NA\n\n\n\n# Get the indicies of matched strings\nstr_inds &lt;- str_which(data$body[1:100], pattern=\"deep\")\nstr_inds\n\ninteger(0)\n\n\n\n# Extract matched strings using detected indicies\ndata$body[str_inds]\n\ncharacter(0)\n\n\n\n# Count the number of matches\nstr_count(data$body[1:100], \"deep\")\n\n  [1]  0  0  0  0  0  0  0 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n [26] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n [51] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n [76] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n\n\n\n# Get the position of matches\nstr_locate_all(data$body[1], \"deep\")\n\n[[1]]\n     start end\n\n\n\n# Get a list of the first match found in each string as a vector\nstr_extract(data$body[1:3], \"deep|the|and\")\n\n[1] \"and\" NA    \"and\"\n\n\n\n# Get a list of the first match found in each string as matrix\nstr_match(data$body[1:3], \"deep|the|and\")\n\n     [,1] \n[1,] \"and\"\n[2,] NA   \n[3,] \"and\"\n\n\n\n# Get a list of the all matches found in each string as list of matricies\nstr_match_all(data$body[1:3], \"deep|the|and\")\n\n[[1]]\n     [,1] \n[1,] \"and\"\n[2,] \"and\"\n[3,] \"the\"\n\n[[2]]\n     [,1]\n\n[[3]]\n     [,1] \n[1,] \"and\"\n[2,] \"the\"\n[3,] \"and\"\n[4,] \"the\"",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>stringr tutorial</span>"
    ]
  },
  {
    "objectID": "0400200-stringr-tutorials-v003.html#stringr-subset-and-replace-strings",
    "href": "0400200-stringr-tutorials-v003.html#stringr-subset-and-replace-strings",
    "title": "15  stringr tutorial",
    "section": "15.6 stringr: Subset and Replace Strings",
    "text": "15.6 stringr: Subset and Replace Strings\n\nhead(data,8)\n\n       author score\n1  butt_ghost     3\n2 buntaro_pup     1\n3  iidealized     2\n4   [deleted]     1\n5   stathibus     6\n6 soulslicer0     2\n7 swiftsecond     1\n                                                                                                                                                                                                                       body\n1                                                                                      Hdf5. It's structured, it's easy to get data in and out, and it's fast. Plus it will scale if you ever get up there in dataset size.\n2                                                                                                                                                                                                          yep, good point.\n3                                                            Google must have done (and is doing) serious internal research in ranking. I've heard they're pretty good at that and they've even made some money doing it :P\n4                                                                                                                                                                                                                 [deleted]\n5                                                                                                   Sebastian Thrun's book, Probabilistic Robotics, goes through this in great detail. Get it, read it, make it your bible.\n6 This. Such a legendary book. Kalman filters, particle filters, recursive Bayesian filters and a whole bunch of other stuff. I learnt so much. Read these 3 for starts from the book, then come back and ask the questions\n7                                                                                                                                                                                                   Do you still need help?\n\n\n\n# Get a string subset based on character position\nstr_sub(data$body[1], start=1, end=100)\n\n[1] \"Hdf5. It's structured, it's easy to get data in and out, and it's fast. Plus it will scale if you ev\"\n\n\n\n# Get a string subset based on words\nword(data$body[1], start=1, end=10)\n\n[1] \"Hdf5. It's structured, it's easy to get data in and\"\n\n\n\n# Get the strings that contain a certain pattern\nstr_subset(data$body[1:100], pattern=\"deep\")\n\ncharacter(0)\n\n\n\n# Replace a substring with a new string by substring position\nstr_sub(data$body[1], start=1, end=100) &lt;- str_to_upper(str_sub(data$body[1], \n                                                                start=1, \n                                                                end=100))\nstr_sub(data$body[1], start=1, end=100)\n\n[1] \"HDF5. IT'S STRUCTURED, IT'S EASY TO GET DATA IN AND OUT, AND IT'S FAST. PLUS IT WILL SCALE IF YOU EV\"\n\n\n\n# Replace first occurrence of a substring with a new string by matching\nstr_replace(data$body[1], pattern=\"deep|DEEP\", replacement=\"multi-layer\")\n\n[1] \"HDF5. IT'S STRUCTURED, IT'S EASY TO GET DATA IN AND OUT, AND IT'S FAST. PLUS IT WILL SCALE IF YOU EVer get up there in dataset size.\"\n\n\n\n# Replace all occurrences of a substring with a new string by matching\nstr_replace_all(data$body[1], pattern=\"deep|DEEP\", replacement=\"multi-layer\")\n\n[1] \"HDF5. IT'S STRUCTURED, IT'S EASY TO GET DATA IN AND OUT, AND IT'S FAST. PLUS IT WILL SCALE IF YOU EVer get up there in dataset size.\"",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>stringr tutorial</span>"
    ]
  },
  {
    "objectID": "0400200-stringr-tutorials-v003.html#stringr-viewing-strings",
    "href": "0400200-stringr-tutorials-v003.html#stringr-viewing-strings",
    "title": "15  stringr tutorial",
    "section": "15.7 stringr: Viewing Strings",
    "text": "15.7 stringr: Viewing Strings\n\n# Basic printing\nprint(data$body[1:10])\n\n [1] \"HDF5. IT'S STRUCTURED, IT'S EASY TO GET DATA IN AND OUT, AND IT'S FAST. PLUS IT WILL SCALE IF YOU EVer get up there in dataset size.\"                                                                                     \n [2] \"yep, good point.\"                                                                                                                                                                                                         \n [3] \"Google must have done (and is doing) serious internal research in ranking. I've heard they're pretty good at that and they've even made some money doing it :P\"                                                           \n [4] \"[deleted]\"                                                                                                                                                                                                                \n [5] \"Sebastian Thrun's book, Probabilistic Robotics, goes through this in great detail. Get it, read it, make it your bible.\"                                                                                                  \n [6] \"This. Such a legendary book. Kalman filters, particle filters, recursive Bayesian filters and a whole bunch of other stuff. I learnt so much. Read these 3 for starts from the book, then come back and ask the questions\"\n [7] \"Do you still need help?\"                                                                                                                                                                                                  \n [8] NA                                                                                                                                                                                                                         \n [9] NA                                                                                                                                                                                                                         \n[10] NA                                                                                                                                                                                                                         \n\n\n\ndeep_learning_posts &lt;- data$body[str_which(data$body, \"deep learning\")]\n\n# View strings in HTML format with the first occurence of a pattern highlighted\nstr_view(deep_learning_posts, pattern=\"deep\")\n\n\n# View strings in HTML format with the first all occurences highlighted\nstr_view_all(deep_learning_posts, pattern=\"deep\")\n\nWarning: `str_view_all()` was deprecated in stringr 1.5.0.\nℹ Please use `str_view()` instead.\n\n\n\n# Format strings into paragraphs of a given width with str_wrap()\nwrapped &lt;- str_wrap(data$body[str_which(data$body, \"deep learning\")][1], \n                    width = 50)\nwrapped \n\n[1] NA\n\n\n\n# Print wrapped string with output obeying newlines\nwrapped %&gt;% cat()\n\nNA\n\n\n\n# Display wrapped paragraph as HTML, inserting paragraph breaks\nstr_wrap(data$body[str_which(data$body, \"deep learning\")][1], width = 50) %&gt;%\nstr_replace_all(\"\\n\", \"&lt;br&gt;\") %&gt;%\nstr_view_all(pattern = \"deep\")\n\n[1] │ NA",
    "crumbs": [
      "Intro to tidyverse",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>stringr tutorial</span>"
    ]
  },
  {
    "objectID": "050050-tdyvrsGgplot2-v0001.html",
    "href": "050050-tdyvrsGgplot2-v0001.html",
    "title": "16  Intro to ggplot2",
    "section": "",
    "text": "16.1 Code from sections 1.1 thorugh 1.3 of r4ds2e\nBelow is a summary of the code that we went through.\nPlease see the following webpage for more info: https://r4ds.hadley.nz/data-visualize\nif(!require(palmerpenguins)){install.packages(\"palmerpenguins\");require(palmerpenguins);}\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\nif(!require(dplyr)){install.packages(\"dplyr\");require(dplyr);} # needed for glimpse\nif(!require(ggplot2)){install.packages(\"ggplot2\");require(ggplot2);}\n# Here are the first few rows data.\n# When viewing a tibble, you may not see all the columns if your screen is too narrow.\n\npenguins\n\nError: object 'penguins' not found\n\n# You can use the dplyr::glimpse function to \n# view the names and datatypes of ALL the columns as well as \n# view the first few values of each column.\nglimpse(penguins)\n\nError: object 'penguins' not found\n\n# You can also use the following command to \"View\" the entire tibble in the \n# RStudio viewer window:\n#\n#View(penguins)  # It is a capital \"V\" in \"View\"\n\n# Setting up the \"aesthetics\"\n# This doesn't display any actual data.\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n)\n\nError: object 'penguins' not found\n\n# You will start seeing \"data\" on the plot once you set the \"geometry\".\n# Here we set the \"geometry\" to be geom_point().\n# Each \"dot\" on the plot represents a row of data from the tibble, i.e. one penguin.\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point()\n\nError: object 'penguins' not found\n\n# We can add some color and shapes to each dot on the plot based on the species.\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species, shape=species)\n) +\n  geom_point()\n\nError: object 'penguins' not found\n\n# The function call, geom_smooth(method = \"lm\") \n# adds linear regressions lines, one for each species. \n#\n# Since \"color=species, shape=species\" was mapped in the ggplot function, the data was\n# divided into 3 different subsets, one for each species. \n# That is why there are 3 different linear regression lines, one for\n# each species (compare this with the next plot).\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species, shape=species)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\nError: object 'penguins' not found\n\n# In the following plot, \"color=species, shape=species\", was moved\n# from the ggplot function to the geom_point function.\n# Since we did not set the color in the ggplot function we no longer\n# consider the data as three different subsets and we get a single linear \n# regression line for the entire set of data.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(mapping = aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\")\n\nError: object 'penguins' not found\n\n# Finally, the following plot adds a title and subtitle to the graph\n# and labels for the x-axis, y-axis and legend.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Body mass and flipper length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n    color = \"Penguin Species\", shape = \"Penguin Species\"\n  )\n\nError: object 'penguins' not found",
    "crumbs": [
      "visualizations with ggplot2",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Intro to ggplot2</span>"
    ]
  },
  {
    "objectID": "050050-tdyvrsGgplot2-v0001.html#other-stuff",
    "href": "050050-tdyvrsGgplot2-v0001.html#other-stuff",
    "title": "16  Intro to ggplot2",
    "section": "16.2 Other stuff",
    "text": "16.2 Other stuff\nThe info above goes through the main ideas of how to use ggplot2. Using that knowledge you should be in good shape for learning on your own how to use other more advanced features of ggplot2.\nThe rest of the webpage, https://r4ds.hadley.nz/data-visualize, shows how to use several other features of ggplot2. The following topics are described on the rest of that webpage:\n\nOther geometries (histograms, box plots, etc)\nHow to use several other geometries (i.e. bar blots, histograms, density plots, box plots, stacked bar plots).\nFacets\nHow to break up a graph into several smaller graphs using the facet_wrap function.\nHow to save a plot to an image file\nYou can use the ggsave function to save an image file with a copy of the last plot that you created. You can then import the image file to other files, e.g. a Word document, a powerpoint, etc.\nSee ?ggsave for more info.",
    "crumbs": [
      "visualizations with ggplot2",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Intro to ggplot2</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html",
    "href": "0500100-tdyvrsDplyr-v005.html",
    "title": "17  Intro to dplyr",
    "section": "",
    "text": "17.1 Get the data\nThe data we are using in this section contains information about salespeople who are employees of a company. Each row of the data contains info about one salesperson. The salespeople get paid some “base pay” as well as a commission that is a percent of the total dollar amount of sales they make.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#get-the-data",
    "href": "0500100-tdyvrsDplyr-v005.html#get-the-data",
    "title": "17  Intro to dplyr",
    "section": "",
    "text": "17.1.1 Load the R packages we’ll neeed\n\nif(!require(tibble)){install.packages(\"tibble\");require(tibble);}\nif(!require(dplyr)){install.packages(\"dplyr\");require(dplyr);}\nif(!require(readr)){install.packages(\"readr\");require(readr);}\n\n\n\n17.1.2 Download the file\nThe data is contained in a csv file. If you’d like to follow along with this tutorial on your own computer you can download the .csv file we are using by clicking here.\n\n\n17.1.3 Import the data by clicking on some buttons …\n\nThe code in the next section below uses read_csv function to read the data into R. If you are not comfortable with R, I recommend that you instead, follow the instructions starting in the next bullet to import the data into R.\nIf you are not familiar with R, you may have some trouble running the read_csv() code shown below. Instead, I recommend that you follow the following instructions to import the file into R.\nTo do so, click on “Import Dataset” button on the “Environment” tab (usually found in the upper-right-hand window pane in RStudio).\nChoose “From Text (base)” and locate your file. You should see something like this:\n\nMake sure to change the “Name” portion (see circled section in picture) to read “sales”, then press the “import” button. This will open up a new tab in RStudio that shows the contents of the file. You can safely navigate away from this tab or close the tab and the data will remain imported and can be seen by typing “sales” (without the “quotes”).\n\n\n\n17.1.4 Import the data by typing some R code …\nThe following code reads the data into R. Alternatively, you can follow the instructions above to click on some buttons to import the data.\n\n# Read in the data into a tibble\n#\n# Note that the following code uses the readr::read_csv function from the readr\n# package which is part of the tidyverse collection of packages. \n# This function is similar to the base-R read.csv function.\n# \n# read_csv returns a tibble, which is the data structure that the \n# tidyverse packages use in lieu of dataframes. A tibble is basically\n# a dataframe with extra features.\n# By contrast, the base-r read.csv function returns a dataframe.\n \nsales = read_csv(\"salespeople-v002.csv\", na=c(\"\",\"NULL\"), show_col_types=FALSE)",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#display-the-data",
    "href": "0500100-tdyvrsDplyr-v005.html#display-the-data",
    "title": "17  Intro to dplyr",
    "section": "17.2 Display the data",
    "text": "17.2 Display the data\nSince the data is in a tibble, by default, only the first 10 rows are displayed. In addition, only the columns that fit on the screen will be displayed. If the rows are too wide for the screen, then some columns may not be displayed and/or the contents of some columns may be shortened.\n\n# Display the first few rows and columns of the sales data\nsales\n\n# A tibble: 24 × 7\n   first  last    title region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Joe    Smith   Mana… usa                 40              100               10\n 2 Sam    Lee     Sale… usa                 40              200                6\n 3 Sue    Sallin… Sale… asia                30              150               10\n 4 Barb   Brown   Sr. … asia                35               79                4\n 5 Jack   Martin  Mana… europe              20               40                3\n 6 Kate   Carey   Sr. … europe              20               69                2\n 7 Emy    Parsons Sale… africa              25               87                3\n 8 Monica Oja     Sale… africa              35               98               10\n 9 Jim    Kuruzo… Sr. … usa                 35              140                3\n10 Zeke   Cohen   Mana… usa                 30              250               10\n# ℹ 14 more rows",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#display-more-rowscolumns-of-the-tibble",
    "href": "0500100-tdyvrsDplyr-v005.html#display-more-rowscolumns-of-the-tibble",
    "title": "17  Intro to dplyr",
    "section": "17.3 Display more rows/columns of the tibble",
    "text": "17.3 Display more rows/columns of the tibble\n\n17.3.1 print( SOME_TIBBLE, n=NUMBER_OF_ROWS)\n\n# Use the print function to modify the output. Use the following arguments:\n#    n - number of rows to display (Inf, i.e. infinity, for all rows)\n#    width - maximum width of a row to display (might wrap if it's too long for your screen)\nprint(sales, n=3)\n\n# A tibble: 24 × 7\n  first last      title region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Joe   Smith     Mana… usa                 40              100               10\n2 Sam   Lee       Sale… usa                 40              200                6\n3 Sue   Sallinger Sale… asia                30              150               10\n# ℹ 21 more rows\n\n\n\n\n17.3.2 print( SOME_TIBBLE, width=WIDTH_OF_DATA)\n# Display all rows and all columns\nprint(sales, n=Inf, width=Inf)\n\n\n17.3.3 print doesn’t change the tibble\nThe print function doesn’t change the tibble. print just controls what is displayed to the screen. Therefore if you save the results to a variable, the variable will still contain the entire tibble.\n\n# display first 3 rows\nprint(sales, n=3)\n\n# A tibble: 24 × 7\n  first last      title region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Joe   Smith     Mana… usa                 40              100               10\n2 Sam   Lee       Sale… usa                 40              200                6\n3 Sue   Sallinger Sale… asia                30              150               10\n# ℹ 21 more rows\n\n# capture in a variable\nx = print(sales, n=3)\n\n# A tibble: 24 × 7\n  first last      title region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Joe   Smith     Mana… usa                 40              100               10\n2 Sam   Lee       Sale… usa                 40              200                6\n3 Sue   Sallinger Sale… asia                30              150               10\n# ℹ 21 more rows\n\n# x still contains ALL the rows\nx\n\n# A tibble: 24 × 7\n   first  last    title region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Joe    Smith   Mana… usa                 40              100               10\n 2 Sam    Lee     Sale… usa                 40              200                6\n 3 Sue    Sallin… Sale… asia                30              150               10\n 4 Barb   Brown   Sr. … asia                35               79                4\n 5 Jack   Martin  Mana… europe              20               40                3\n 6 Kate   Carey   Sr. … europe              20               69                2\n 7 Emy    Parsons Sale… africa              25               87                3\n 8 Monica Oja     Sale… africa              35               98               10\n 9 Jim    Kuruzo… Sr. … usa                 35              140                3\n10 Zeke   Cohen   Mana… usa                 30              250               10\n# ℹ 14 more rows\n\n\n\n\n17.3.4 slice_head, slice_tail, slice_sample, etc\nAmong some of the many functions included in dplyr are the various “slice_…” functions. These include\n\nslice - choose rows by row numbers\nslice_head - choose the first n rows (similar to base-R head function)\nslice_tail - choose the last n rows (similar to base-R tail function)\nslice_max - choose the rows with the largest values\nslice_min - choose the rows with the smallest values\nslice_sample - randomly choose a few rows\n\nThese functions return a new tibble with just the specified rows that can be saved in a variable. This is different from how the print function works (see above).\nSee some examples below. See the R documentation for specifics about the various forms of the slice_… functions.\n\n# select just first 3 rows\nsales |&gt; slice_head(n=3)\n\n# A tibble: 3 × 7\n  first last      title region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Joe   Smith     Mana… usa                 40              100               10\n2 Sam   Lee       Sale… usa                 40              200                6\n3 Sue   Sallinger Sale… asia                30              150               10\n\n# save that in a variable\nx = sales |&gt; slice_head(n=3)\n\n# x only contains 3 rows\nx\n\n# A tibble: 3 × 7\n  first last      title region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Joe   Smith     Mana… usa                 40              100               10\n2 Sam   Lee       Sale… usa                 40              200                6\n3 Sue   Sallinger Sale… asia                30              150               10\n\n# print appears to do the same thing\n# but print only affects what is displayed to the screen, not \n# what is \"returned\" and can be saved in a variable.\ny = sales |&gt; print(n=3)\n\n# A tibble: 24 × 7\n  first last      title region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Joe   Smith     Mana… usa                 40              100               10\n2 Sam   Lee       Sale… usa                 40              200                6\n3 Sue   Sallinger Sale… asia                30              150               10\n# ℹ 21 more rows\n\n# y still has all of the rows\ny\n\n# A tibble: 24 × 7\n   first  last    title region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Joe    Smith   Mana… usa                 40              100               10\n 2 Sam    Lee     Sale… usa                 40              200                6\n 3 Sue    Sallin… Sale… asia                30              150               10\n 4 Barb   Brown   Sr. … asia                35               79                4\n 5 Jack   Martin  Mana… europe              20               40                3\n 6 Kate   Carey   Sr. … europe              20               69                2\n 7 Emy    Parsons Sale… africa              25               87                3\n 8 Monica Oja     Sale… africa              35               98               10\n 9 Jim    Kuruzo… Sr. … usa                 35              140                3\n10 Zeke   Cohen   Mana… usa                 30              250               10\n# ℹ 14 more rows\n\n\n\n\n17.3.5 Other ways of viewing the data\n# To see the entire tibble in a separate tab in RStudio\n# you can use the following command\n#\n#View(sales)\n\n# Show all column names and datatypes plus some actual data\nglimpse(sales)\n\n# Show just the column names (could be useful for a quick reminder when you need it)\ncolnames(sales)",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#convert-between-tibbles-and-dataframes",
    "href": "0500100-tdyvrsDplyr-v005.html#convert-between-tibbles-and-dataframes",
    "title": "17  Intro to dplyr",
    "section": "17.4 Convert between tibbles and dataframes",
    "text": "17.4 Convert between tibbles and dataframes\nThe majority of the dplyr functions work with tibbles or dataframes. However, the tidyverse in general and dplyr specifically is designed to work better with tibbles.\nIf you need to, you can always convert a tibble to a dataframe or a dataframe to a tibble.\n\n# Convert the tibble to a data.frame\ndfSales = as.data.frame(sales)\n\n# Convert a dataframe to a tibble\ntblSales = as_tibble(dfSales)\n\n# A tibble is also a dataframe.\n# This is similar to how a square is also a rectangle.\n# You can see that from the class of the variable. \n# The class of a tibble contains \"tbl_df\" \"tbl\" as well as \"data.frame\"\nclass(tblSales)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n# However, a dataframe is not necessarily a tibble.\n# This is similar ot how a rectangle is not necessarily a square.\n# Notice how the class of dfSales is only \"data.frame\"\nclass(dfSales)\n\n[1] \"data.frame\"\n\n# The head function is designed to work with dataframes\nhead(dfSales, 3)\n\n  first      last       title region baseInThousands salesInThousands\n1   Joe     Smith     Manager    usa              40              100\n2   Sam       Lee Salesperson    usa              40              200\n3   Sue Sallinger Salesperson   asia              30              150\n  yearsWithCompany\n1               10\n2                6\n3               10\n\n# Therefore the head function also works with tibbles\nhead(tblSales, 3)\n\n# A tibble: 3 × 7\n  first last      title region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Joe   Smith     Mana… usa                 40              100               10\n2 Sam   Lee       Sale… usa                 40              200                6\n3 Sue   Sallinger Sale… asia                30              150               10\n\n\n\n#######################################################################\n# However, features of some functions that are designed to\n# work with tibbles might not work with data.frames.\n#######################################################################\n\n\n# This works fine - display the first 3 rows of the tibble.\nprint(tblSales, n=3) \n\n# A tibble: 24 × 7\n  first last      title region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Joe   Smith     Mana… usa                 40              100               10\n2 Sam   Lee       Sale… usa                 40              200                6\n3 Sue   Sallinger Sale… asia                30              150               10\n# ℹ 21 more rows\n\n# ERROR - n argument is not designed to work with dataframes that aren't tibbles\nprint(dfSales, n=3) \n\nError in print.default(m, ..., quote = quote, right = right, max = max): invalid 'na.print' specification",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#select",
    "href": "0500100-tdyvrsDplyr-v005.html#select",
    "title": "17  Intro to dplyr",
    "section": "17.5 select",
    "text": "17.5 select\nUse the select function to get just the specified columns.\nThe first argument to the select function is named .data (notice the period before .data). It is used to specify which tibble or dataframe you are working with. The other arguments are used to specify which columns you’d like to see from the dataframe/tibble. Note that there are NO quotes around the column names (this differs from the base-r way of specifying column names in a dataframe).\n\n# Show just the specified columns from the sales tibble\nselect(.data=sales, first, last, salesInThousands)\n\n# A tibble: 24 × 3\n   first  last       salesInThousands\n   &lt;chr&gt;  &lt;chr&gt;                 &lt;dbl&gt;\n 1 Joe    Smith                   100\n 2 Sam    Lee                     200\n 3 Sue    Sallinger               150\n 4 Barb   Brown                    79\n 5 Jack   Martin                   40\n 6 Kate   Carey                    69\n 7 Emy    Parsons                  87\n 8 Monica Oja                      98\n 9 Jim    Kuruzovich              140\n10 Zeke   Cohen                   250\n# ℹ 14 more rows\n\n\nThe columns appear in whatever order you specified in the select function. If you want to bring a few columns to the front followed by the rest of the columns, you can use the everything() function.\n\n# Show the specified columns first, followed by the other columns.\nselect(.data=sales, first, last, everything())\n\n# A tibble: 24 × 7\n   first  last    title region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Joe    Smith   Mana… usa                 40              100               10\n 2 Sam    Lee     Sale… usa                 40              200                6\n 3 Sue    Sallin… Sale… asia                30              150               10\n 4 Barb   Brown   Sr. … asia                35               79                4\n 5 Jack   Martin  Mana… europe              20               40                3\n 6 Kate   Carey   Sr. … europe              20               69                2\n 7 Emy    Parsons Sale… africa              25               87                3\n 8 Monica Oja     Sale… africa              35               98               10\n 9 Jim    Kuruzo… Sr. … usa                 35              140                3\n10 Zeke   Cohen   Mana… usa                 30              250               10\n# ℹ 14 more rows",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#filter",
    "href": "0500100-tdyvrsDplyr-v005.html#filter",
    "title": "17  Intro to dplyr",
    "section": "17.6 filter",
    "text": "17.6 filter\nThe filter function is used to retrieve the rows from a tibble that match a condition.\n\nThe first argument of the filter function is also .data. Just as with the select function this argument for the filter function is expected to be a tibble or a dataframe.\nThe next argument to filter is a logical expression. You can use the names of the columns of the tibble/dataframe in the expression. filter will examine each row of the tibble/dataframe and only return those rows whose values match the stated condition.\n\nThe following code displays only those rows whose salesInThousands is less than 100.\n\nfilter(.data=sales, salesInThousands &lt; 100)\n\n# A tibble: 5 × 7\n  first  last    title  region baseInThousands salesInThousands yearsWithCompany\n  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n1 Barb   Brown   Sr. S… asia                35               79                4\n2 Jack   Martin  Manag… europe              20               40                3\n3 Kate   Carey   Sr. S… europe              20               69                2\n4 Emy    Parsons Sales… africa              25               87                3\n5 Monica Oja     Sales… africa              35               98               10",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#using-the-dplyr-functions-in-a-pipeline",
    "href": "0500100-tdyvrsDplyr-v005.html#using-the-dplyr-functions-in-a-pipeline",
    "title": "17  Intro to dplyr",
    "section": "17.7 Using the dplyr functions in a “pipeline”",
    "text": "17.7 Using the dplyr functions in a “pipeline”\nThe tidyverse functions are designed so that you can be apply them one after the other. The clearest way to do that is to “pipe” the output of one function into the input of another.\nThe following pipeline first applies select to generate a new tibble that only contains the specified columns. Then the filter function then chooses only those rows that meet the specified condition.\n\nsales |&gt; \n  select(first, last, salesInThousands) |&gt;\n  filter(salesInThousands &lt; 100)\n\n# A tibble: 5 × 3\n  first  last    salesInThousands\n  &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1 Barb   Brown                 79\n2 Jack   Martin                40\n3 Kate   Carey                 69\n4 Emy    Parsons               87\n5 Monica Oja                   98\n\n# In this example we could apply the filter before select.\n# It technically doesn't matter which order you apply the functions in \n# as long as you realize that the output of one function is fed into \n# the input of the next function.\n\nsales |&gt; \n  filter(salesInThousands &lt; 100) |&gt;\n  select(first, last, salesInThousands) \n\n# A tibble: 5 × 3\n  first  last    salesInThousands\n  &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1 Barb   Brown                 79\n2 Jack   Martin                40\n3 Kate   Carey                 69\n4 Emy    Parsons               87\n5 Monica Oja                   98\n\n# You can save the results in a variable as follows\nlowSales = \n  sales |&gt; \n    filter(salesInThousands &lt; 100) |&gt;\n    select(first, last, salesInThousands) \n\n# Now the lowSales variable contains the results\nlowSales\n\n# A tibble: 5 × 3\n  first  last    salesInThousands\n  &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1 Barb   Brown                 79\n2 Jack   Martin                40\n3 Kate   Carey                 69\n4 Emy    Parsons               87\n5 Monica Oja                   98\n\n# You can continue to use the new variable for further processing\nlowSales |&gt; filter(salesInThousands &gt; 80)\n\n# A tibble: 2 × 3\n  first  last    salesInThousands\n  &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1 Emy    Parsons               87\n2 Monica Oja                   98",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#important-dplyr-functions-for-manipulating-tibbles",
    "href": "0500100-tdyvrsDplyr-v005.html#important-dplyr-functions-for-manipulating-tibbles",
    "title": "17  Intro to dplyr",
    "section": "17.8 Important dplyr functions for manipulating tibbles",
    "text": "17.8 Important dplyr functions for manipulating tibbles\nThe dplyr package contains many different functions. The following are the basic dplyr functions that can be used to work with the data in a single tibble or dataframe.\nYou can combine calls to these functions to retrieve data from a tibble in many different ways. The documentation sometimes refers to these functions as “dplyr verbs” since each of them “do something” to the data. More details about these functions are covered in the sections below.\nThese dplyr functions all take a tibble as their first argument and return a modified tibble. Therefore each of these functions can be called as part of\na pipeline (see previous section). This allows us to start with some raw data in a tibble and manipulate it in numerous ways.\n\nselect - choose the columns you want (this was described above)\nfilter - choose the rows based on a condition (also described above)\narrange - reorder the rows based on the specified sorting rules\nmutate - add additional columns to the tibble/dataframe\ngroup_by - identify which rows will be aggregated by a subsequent call to the summarize function (see below) Note that group_by isn’t too useful unless it is followed by a subsequent call to summarize.\nsummarize - aggregrate several rows of data into a single row of data by using “aggregate functions” such as max(), min(), etc\n\nThere are many other functions included with dplyr. For a full list of what’s included with dplyr run help(package=\"dplyr\"). You can also download a “cheat sheet” that lists all the funcitons at https://www.rstudio.org/links/data_transformation_cheat_sheet (this cheat sheet and others are available from the “Help &gt; Cheat Sheets” menu in RStudio)",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#arrange",
    "href": "0500100-tdyvrsDplyr-v005.html#arrange",
    "title": "17  Intro to dplyr",
    "section": "17.9 arrange",
    "text": "17.9 arrange\nThe arrange function reorders the rows based on specified sorting rules.\n\n# Arrange all of the rows based on salesInThousands. \nsales |&gt; \n  arrange(salesInThousands)\n\n# A tibble: 24 × 7\n   first  last    title region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Jack   Martin  Mana… europe              20               40                3\n 2 Kate   Carey   Sr. … europe              20               69                2\n 3 Barb   Brown   Sr. … asia                35               79                4\n 4 Emy    Parsons Sale… africa              25               87                3\n 5 Monica Oja     Sale… africa              35               98               10\n 6 Joe    Smith   Mana… usa                 40              100               10\n 7 Jack   Aames   Sale… usa                 43              105                4\n 8 Larry  Green   Sr. … europe              20              113                4\n 9 Zeke   Smith   Sale… asia                20              120                3\n10 Jim    Kuruzo… Sr. … usa                 35              140                3\n# ℹ 14 more rows\n\n# Select the first, last names and salesInThousands\n# for only those rows for which salesInThousands is less than 100.\n# Arrange the rows so that they appear in order of the salesInThousands.\nsales |&gt; \n  select(first, last, salesInThousands) |&gt;\n  filter(salesInThousands &lt; 100) |&gt;\n  arrange(salesInThousands)\n\n# A tibble: 5 × 3\n  first  last    salesInThousands\n  &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1 Jack   Martin                40\n2 Kate   Carey                 69\n3 Barb   Brown                 79\n4 Emy    Parsons               87\n5 Monica Oja                   98\n\n\n\n17.9.1 arrange by more than one column\nIf you pass more than one column name to the arrange function\n\nthe rows are arranged by the first specified column\nall rows that have the same value of the first column passed to arrange are further arranged within that cluster of rows by the 2nd column name that was passed to arrange\nYou can specify as many column names as you like in the arrange function. Column names that appear later in the call to arrange only effect the final order for those rows that share the same value for the earlier column names in the arrange function.\n\nSee the examples below.\n\n# show the rows in alphabetical order based on the names of the salespeople.\nsales |&gt;\n  arrange(last,first) |&gt;\n  print(n=Inf)\n\n# A tibble: 24 × 7\n   first  last    title region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Barb   Aames   Sale… usa                 21              255                7\n 2 Jack   Aames   Sale… usa                 43              105                4\n 3 Sue    Aames   Sr. … africa              35              600               10\n 4 Hugh   Black   Sr. … africa              40              261                9\n 5 Barb   Brown   Sr. … asia                35               79                4\n 6 Jim    Brown   Sale… europe              50              167                2\n 7 Kate   Carey   Sr. … europe              20               69                2\n 8 Zeke   Cohen   Mana… usa                 30              250               10\n 9 Larry  Green   Sr. … europe              20              113                4\n10 Jim    Kuruzo… Sr. … usa                 35              140                3\n11 Sam    Lee     Sale… usa                 40              200                6\n12 Sam    Lincoln Mana… europe              30              500                2\n13 Amy    Markov… Sale… asia                46              340                3\n14 Jack   Martin  Mana… europe              20               40                3\n15 Monica Oja     Sale… africa              35               98               10\n16 Emy    Parsons Sale… africa              25               87                3\n17 Sue    Sallin… Sale… asia                30              150               10\n18 Joe    Smith   Mana… usa                 40              100               10\n19 Zeke   Smith   Sale… asia                20              120                3\n20 Joe    Washin… Sr. … europe              33              370                2\n21 Laura  White   Mana… africa              20              281                8\n22 Emy    Zeitch… Mana… asia                34              166                4\n23 Kate   Zeitch… Sr. … usa                 50              187                4\n24 Monica Zeitch… Sale… asia                23              184                1\n\n# Arrange by title, then by last names and finally by first names\nsales |&gt;\n  arrange(title, last, first) |&gt;\n  print(n=Inf)\n\n# A tibble: 24 × 7\n   first  last    title region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Zeke   Cohen   Mana… usa                 30              250               10\n 2 Sam    Lincoln Mana… europe              30              500                2\n 3 Jack   Martin  Mana… europe              20               40                3\n 4 Joe    Smith   Mana… usa                 40              100               10\n 5 Laura  White   Mana… africa              20              281                8\n 6 Emy    Zeitch… Mana… asia                34              166                4\n 7 Barb   Aames   Sale… usa                 21              255                7\n 8 Jack   Aames   Sale… usa                 43              105                4\n 9 Jim    Brown   Sale… europe              50              167                2\n10 Sam    Lee     Sale… usa                 40              200                6\n11 Amy    Markov… Sale… asia                46              340                3\n12 Monica Oja     Sale… africa              35               98               10\n13 Emy    Parsons Sale… africa              25               87                3\n14 Sue    Sallin… Sale… asia                30              150               10\n15 Zeke   Smith   Sale… asia                20              120                3\n16 Monica Zeitch… Sale… asia                23              184                1\n17 Sue    Aames   Sr. … africa              35              600               10\n18 Hugh   Black   Sr. … africa              40              261                9\n19 Barb   Brown   Sr. … asia                35               79                4\n20 Kate   Carey   Sr. … europe              20               69                2\n21 Larry  Green   Sr. … europe              20              113                4\n22 Jim    Kuruzo… Sr. … usa                 35              140                3\n23 Joe    Washin… Sr. … europe              33              370                2\n24 Kate   Zeitch… Sr. … usa                 50              187                4\n\n# It might help to read if you display the columns you are sorting by first.\n# To do so, simply add a select to the pipeline. \n#\n# In this example, it makes no difference\n# if the select appears before or after the arrange function.\n#\n# Notice that the names are alphabetically arranged only with a group of\n# rows that all have the same title.\n\nsales |&gt;\n  select(title, last, first, everything()) |&gt;\n  arrange(title, last, first) |&gt;\n  print(n=Inf)\n\n# A tibble: 24 × 7\n   title    last  first region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Manager  Cohen Zeke  usa                 30              250               10\n 2 Manager  Linc… Sam   europe              30              500                2\n 3 Manager  Mart… Jack  europe              20               40                3\n 4 Manager  Smith Joe   usa                 40              100               10\n 5 Manager  White Laura africa              20              281                8\n 6 Manager  Zeit… Emy   asia                34              166                4\n 7 Salespe… Aames Barb  usa                 21              255                7\n 8 Salespe… Aames Jack  usa                 43              105                4\n 9 Salespe… Brown Jim   europe              50              167                2\n10 Salespe… Lee   Sam   usa                 40              200                6\n11 Salespe… Mark… Amy   asia                46              340                3\n12 Salespe… Oja   Moni… africa              35               98               10\n13 Salespe… Pars… Emy   africa              25               87                3\n14 Salespe… Sall… Sue   asia                30              150               10\n15 Salespe… Smith Zeke  asia                20              120                3\n16 Salespe… Zeit… Moni… asia                23              184                1\n17 Sr. Sal… Aames Sue   africa              35              600               10\n18 Sr. Sal… Black Hugh  africa              40              261                9\n19 Sr. Sal… Brown Barb  asia                35               79                4\n20 Sr. Sal… Carey Kate  europe              20               69                2\n21 Sr. Sal… Green Larry europe              20              113                4\n22 Sr. Sal… Kuru… Jim   usa                 35              140                3\n23 Sr. Sal… Wash… Joe   europe              33              370                2\n24 Sr. Sal… Zeit… Kate  usa                 50              187                4\n\n# We can get even more fine grained. This time we will arrange\n# by title, then by region, then by last names and finally by first names.\n#\n# Notice that the names are alphabetically arranged only with a group of\n# rows that all have the same title and region.\n\nsales |&gt;\n  select(title, region, last, first, everything()) |&gt;\n  arrange(title, region, last, first) |&gt;\n  print(n=Inf)\n\n# A tibble: 24 × 7\n   title    region last  first baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Manager  africa White Laura              20              281                8\n 2 Manager  asia   Zeit… Emy                34              166                4\n 3 Manager  europe Linc… Sam                30              500                2\n 4 Manager  europe Mart… Jack               20               40                3\n 5 Manager  usa    Cohen Zeke               30              250               10\n 6 Manager  usa    Smith Joe                40              100               10\n 7 Salespe… africa Oja   Moni…              35               98               10\n 8 Salespe… africa Pars… Emy                25               87                3\n 9 Salespe… asia   Mark… Amy                46              340                3\n10 Salespe… asia   Sall… Sue                30              150               10\n11 Salespe… asia   Smith Zeke               20              120                3\n12 Salespe… asia   Zeit… Moni…              23              184                1\n13 Salespe… europe Brown Jim                50              167                2\n14 Salespe… usa    Aames Barb               21              255                7\n15 Salespe… usa    Aames Jack               43              105                4\n16 Salespe… usa    Lee   Sam                40              200                6\n17 Sr. Sal… africa Aames Sue                35              600               10\n18 Sr. Sal… africa Black Hugh               40              261                9\n19 Sr. Sal… asia   Brown Barb               35               79                4\n20 Sr. Sal… europe Carey Kate               20               69                2\n21 Sr. Sal… europe Green Larry              20              113                4\n22 Sr. Sal… europe Wash… Joe                33              370                2\n23 Sr. Sal… usa    Kuru… Jim                35              140                3\n24 Sr. Sal… usa    Zeit… Kate               50              187                4\n\n\n\n\n17.9.2 desc(SOME_COLUMN) - arrange in descending order\nUse the desc function to specify “descending” order. See the examples.\n\n# In the following, the rows with the highest values\n# of salesInThousands are at the top.\n\nsales |&gt; \n  filter(salesInThousands &lt; 100) |&gt;\n  select(first, last, salesInThousands) |&gt;\n  arrange(desc(salesInThousands))  |&gt;\n  print(n=Inf)\n\n# A tibble: 5 × 3\n  first  last    salesInThousands\n  &lt;chr&gt;  &lt;chr&gt;              &lt;dbl&gt;\n1 Monica Oja                   98\n2 Emy    Parsons               87\n3 Barb   Brown                 79\n4 Kate   Carey                 69\n5 Jack   Martin                40\n\n# Arrange alphabetically by the region.\n# Within each region, show the sales in decreasing order.\nsales |&gt;\n  select(region, baseInThousands, everything()) |&gt;\n  arrange(region,  desc(baseInThousands)) |&gt;\n  print(n=Inf)\n\n# A tibble: 24 × 7\n   region baseInThousands first  last    title salesInThousands yearsWithCompany\n   &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 africa              40 Hugh   Black   Sr. …              261                9\n 2 africa              35 Monica Oja     Sale…               98               10\n 3 africa              35 Sue    Aames   Sr. …              600               10\n 4 africa              25 Emy    Parsons Sale…               87                3\n 5 africa              20 Laura  White   Mana…              281                8\n 6 asia                46 Amy    Markov… Sale…              340                3\n 7 asia                35 Barb   Brown   Sr. …               79                4\n 8 asia                34 Emy    Zeitch… Mana…              166                4\n 9 asia                30 Sue    Sallin… Sale…              150               10\n10 asia                23 Monica Zeitch… Sale…              184                1\n11 asia                20 Zeke   Smith   Sale…              120                3\n12 europe              50 Jim    Brown   Sale…              167                2\n13 europe              33 Joe    Washin… Sr. …              370                2\n14 europe              30 Sam    Lincoln Mana…              500                2\n15 europe              20 Jack   Martin  Mana…               40                3\n16 europe              20 Kate   Carey   Sr. …               69                2\n17 europe              20 Larry  Green   Sr. …              113                4\n18 usa                 50 Kate   Zeitch… Sr. …              187                4\n19 usa                 43 Jack   Aames   Sale…              105                4\n20 usa                 40 Joe    Smith   Mana…              100               10\n21 usa                 40 Sam    Lee     Sale…              200                6\n22 usa                 35 Jim    Kuruzo… Sr. …              140                3\n23 usa                 30 Zeke   Cohen   Mana…              250               10\n24 usa                 21 Barb   Aames   Sale…              255                7\n\n\n\n# Show the names, titles and salesInThousands for\n# people who sell to the usa and for people who sell to europe.\n#\n# Arrange the results so that all titles are grouped together.\n# Within the rows of a particular title sort the results in \n# descending order based on the salesInThousands so that the \n# rows with greater salesInThousands appear earlier.\n#\n# Only show salespeople for the usa and europe\n\nsales |&gt;\n  select(first, last, title, salesInThousands, region) |&gt;\n  filter(region %in% c(\"usa\", \"europe\")) |&gt;\n  arrange(title, desc(salesInThousands))\n\n# A tibble: 13 × 5\n   first last       title           salesInThousands region\n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; \n 1 Sam   Lincoln    Manager                      500 europe\n 2 Zeke  Cohen      Manager                      250 usa   \n 3 Joe   Smith      Manager                      100 usa   \n 4 Jack  Martin     Manager                       40 europe\n 5 Barb  Aames      Salesperson                  255 usa   \n 6 Sam   Lee        Salesperson                  200 usa   \n 7 Jim   Brown      Salesperson                  167 europe\n 8 Jack  Aames      Salesperson                  105 usa   \n 9 Joe   Washington Sr. Salesperson              370 europe\n10 Kate  Zeitchik   Sr. Salesperson              187 usa   \n11 Jim   Kuruzovich Sr. Salesperson              140 usa   \n12 Larry Green      Sr. Salesperson              113 europe\n13 Kate  Carey      Sr. Salesperson               69 europe\n\n# Careful - if you do not include region in the select , it won't work\n# ERROR - object 'region' not found\n\nsales |&gt;\n  select(first, last, title, salesInThousands) |&gt;  # region is missing here\n  filter(region %in% c(\"usa\", \"europe\")) |&gt;        # but you need it here\n  arrange(title, desc(salesInThousands))\n\nError in `filter()`:\nℹ In argument: `region %in% c(\"usa\", \"europe\")`.\nCaused by error:\n! object 'region' not found\n\n# Rearrange the order of the function calls to get it to work\n\nsales |&gt;\n  arrange(title, desc(salesInThousands)) |&gt;   \n  filter(region %in% c(\"usa\", \"europe\")) |&gt;       # we use region here\n  select(first, last, title, salesInThousands)    # we can now exclude region\n\n# A tibble: 13 × 4\n   first last       title           salesInThousands\n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;                      &lt;dbl&gt;\n 1 Sam   Lincoln    Manager                      500\n 2 Zeke  Cohen      Manager                      250\n 3 Joe   Smith      Manager                      100\n 4 Jack  Martin     Manager                       40\n 5 Barb  Aames      Salesperson                  255\n 6 Sam   Lee        Salesperson                  200\n 7 Jim   Brown      Salesperson                  167\n 8 Jack  Aames      Salesperson                  105\n 9 Joe   Washington Sr. Salesperson              370\n10 Kate  Zeitchik   Sr. Salesperson              187\n11 Jim   Kuruzovich Sr. Salesperson              140\n12 Larry Green      Sr. Salesperson              113\n13 Kate  Carey      Sr. Salesperson               69",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#mutate---add-new-columns",
    "href": "0500100-tdyvrsDplyr-v005.html#mutate---add-new-columns",
    "title": "17  Intro to dplyr",
    "section": "17.10 mutate - add new columns",
    "text": "17.10 mutate - add new columns\nUse the mutate function to add new columns. These new columns can be based on existing data. See the examples below.\n\n# All salespeople get a commission equal to 10% of their sales.\n# Create a new column with the name commission that shows the value of their commission.\n\n# The following code creates the new column as the last column in the tibble.\nsales |&gt;\n  mutate(commission=0.10*salesInThousands, takeHome=baseInThousands + 0.10*salesInThousands ) |&gt;\n  print(width=Inf)\n\n# A tibble: 24 × 9\n   first  last       title           region baseInThousands salesInThousands\n   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;           &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Joe    Smith      Manager         usa                 40              100\n 2 Sam    Lee        Salesperson     usa                 40              200\n 3 Sue    Sallinger  Salesperson     asia                30              150\n 4 Barb   Brown      Sr. Salesperson asia                35               79\n 5 Jack   Martin     Manager         europe              20               40\n 6 Kate   Carey      Sr. Salesperson europe              20               69\n 7 Emy    Parsons    Salesperson     africa              25               87\n 8 Monica Oja        Salesperson     africa              35               98\n 9 Jim    Kuruzovich Sr. Salesperson usa                 35              140\n10 Zeke   Cohen      Manager         usa                 30              250\n   yearsWithCompany commission takeHome\n              &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1               10       10       50  \n 2                6       20       60  \n 3               10       15       45  \n 4                4        7.9     42.9\n 5                3        4       24  \n 6                2        6.9     26.9\n 7                3        8.7     33.7\n 8               10        9.8     44.8\n 9                3       14       49  \n10               10       25       55  \n# ℹ 14 more rows\n\n\n\n17.10.1 .before and .after\nUse the .before and .after argument to mutate to specify where the new columns should appear in the tibble. See the examples below.\n\n# Place the newly created column at the beginning of the tibble,\n# i.e. .before the 1st column.\n\nsales |&gt;\n  mutate(commission=0.10*salesInThousands, .before=1)\n\n# A tibble: 24 × 8\n   commission first  last       title    region baseInThousands salesInThousands\n        &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1       10   Joe    Smith      Manager  usa                 40              100\n 2       20   Sam    Lee        Salespe… usa                 40              200\n 3       15   Sue    Sallinger  Salespe… asia                30              150\n 4        7.9 Barb   Brown      Sr. Sal… asia                35               79\n 5        4   Jack   Martin     Manager  europe              20               40\n 6        6.9 Kate   Carey      Sr. Sal… europe              20               69\n 7        8.7 Emy    Parsons    Salespe… africa              25               87\n 8        9.8 Monica Oja        Salespe… africa              35               98\n 9       14   Jim    Kuruzovich Sr. Sal… usa                 35              140\n10       25   Zeke   Cohen      Manager  usa                 30              250\n# ℹ 14 more rows\n# ℹ 1 more variable: yearsWithCompany &lt;dbl&gt;\n\n# Place the newly created column as the 3rd column\n# i.e. .after the 2nd column.\n# (.before=4 would also work)\n\nsales |&gt;\n  mutate(commission=0.10*salesInThousands, .after=2)\n\n# A tibble: 24 × 8\n   first  last       commission title    region baseInThousands salesInThousands\n   &lt;chr&gt;  &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Joe    Smith            10   Manager  usa                 40              100\n 2 Sam    Lee              20   Salespe… usa                 40              200\n 3 Sue    Sallinger        15   Salespe… asia                30              150\n 4 Barb   Brown             7.9 Sr. Sal… asia                35               79\n 5 Jack   Martin            4   Manager  europe              20               40\n 6 Kate   Carey             6.9 Sr. Sal… europe              20               69\n 7 Emy    Parsons           8.7 Salespe… africa              25               87\n 8 Monica Oja               9.8 Salespe… africa              35               98\n 9 Jim    Kuruzovich       14   Sr. Sal… usa                 35              140\n10 Zeke   Cohen            25   Manager  usa                 30              250\n# ℹ 14 more rows\n# ℹ 1 more variable: yearsWithCompany &lt;dbl&gt;\n\n# .before and .after can also refer to specific columns\n# For example the following also places the commission after the last name column\nsales |&gt;\n  mutate(commission=0.10*salesInThousands, .after=last)\n\n# A tibble: 24 × 8\n   first  last       commission title    region baseInThousands salesInThousands\n   &lt;chr&gt;  &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Joe    Smith            10   Manager  usa                 40              100\n 2 Sam    Lee              20   Salespe… usa                 40              200\n 3 Sue    Sallinger        15   Salespe… asia                30              150\n 4 Barb   Brown             7.9 Sr. Sal… asia                35               79\n 5 Jack   Martin            4   Manager  europe              20               40\n 6 Kate   Carey             6.9 Sr. Sal… europe              20               69\n 7 Emy    Parsons           8.7 Salespe… africa              25               87\n 8 Monica Oja               9.8 Salespe… africa              35               98\n 9 Jim    Kuruzovich       14   Sr. Sal… usa                 35              140\n10 Zeke   Cohen            25   Manager  usa                 30              250\n# ℹ 14 more rows\n# ℹ 1 more variable: yearsWithCompany &lt;dbl&gt;\n\n\n\n\n17.10.2 a new column that depends on other new columns\nThe following code creates two new columns.\nThe commission column is created as in the last example.\nThe takeHome column is the total take home pay for the salesperson, i.e.  their baseInThousands plus the commission.\nIf you create both columns in a single call to mutate, you will need to repeat the calculation for the commission twice (see examples below). An alternative is to call the mutate function twice. For tibbles with many rows this can take longer to process but is less error prone when you write the code.\n\n# All salespeople get a commission equal to 10% of their sales.\n# Create a new column with the name commission that shows the value of their commission.\n# Create another column called takeHome which has their total takehome pay.\n\n# We can do it all in one call to mutate.\n# However, that require repeating the code for calculating for the commission.\nsales |&gt;\n  mutate(commission=0.10*salesInThousands, takeHome=baseInThousands + 0.10*salesInThousands, .before=1 ) |&gt;\n  print(width=Inf)\n\n# A tibble: 24 × 9\n   commission takeHome first  last       title           region baseInThousands\n        &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;           &lt;chr&gt;            &lt;dbl&gt;\n 1       10       50   Joe    Smith      Manager         usa                 40\n 2       20       60   Sam    Lee        Salesperson     usa                 40\n 3       15       45   Sue    Sallinger  Salesperson     asia                30\n 4        7.9     42.9 Barb   Brown      Sr. Salesperson asia                35\n 5        4       24   Jack   Martin     Manager         europe              20\n 6        6.9     26.9 Kate   Carey      Sr. Salesperson europe              20\n 7        8.7     33.7 Emy    Parsons    Salesperson     africa              25\n 8        9.8     44.8 Monica Oja        Salesperson     africa              35\n 9       14       49   Jim    Kuruzovich Sr. Salesperson usa                 35\n10       25       55   Zeke   Cohen      Manager         usa                 30\n   salesInThousands yearsWithCompany\n              &lt;dbl&gt;            &lt;dbl&gt;\n 1              100               10\n 2              200                6\n 3              150               10\n 4               79                4\n 5               40                3\n 6               69                2\n 7               87                3\n 8               98               10\n 9              140                3\n10              250               10\n# ℹ 14 more rows\n\n# By separating the code into two calls to mutate, we can refer to the \n# newly created \"commission\" column when calculating the takeHome column.\n# Note that the 2nd call to mutate below receives a tibble that already has a\n# commission column as the first column. That is why .before=2 (and not .before=1)\nsales |&gt;\n  mutate(commission=0.10*salesInThousands, .before=1) |&gt;\n  mutate(takeHome=baseInThousands + commission, .before=2) |&gt;\n  print(width=Inf)\n\n# A tibble: 24 × 9\n   commission takeHome first  last       title           region baseInThousands\n        &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;           &lt;chr&gt;            &lt;dbl&gt;\n 1       10       50   Joe    Smith      Manager         usa                 40\n 2       20       60   Sam    Lee        Salesperson     usa                 40\n 3       15       45   Sue    Sallinger  Salesperson     asia                30\n 4        7.9     42.9 Barb   Brown      Sr. Salesperson asia                35\n 5        4       24   Jack   Martin     Manager         europe              20\n 6        6.9     26.9 Kate   Carey      Sr. Salesperson europe              20\n 7        8.7     33.7 Emy    Parsons    Salesperson     africa              25\n 8        9.8     44.8 Monica Oja        Salesperson     africa              35\n 9       14       49   Jim    Kuruzovich Sr. Salesperson usa                 35\n10       25       55   Zeke   Cohen      Manager         usa                 30\n   salesInThousands yearsWithCompany\n              &lt;dbl&gt;            &lt;dbl&gt;\n 1              100               10\n 2              200                6\n 3              150               10\n 4               79                4\n 5               40                3\n 6               69                2\n 7               87                3\n 8               98               10\n 9              140                3\n10              250               10\n# ℹ 14 more rows",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#distinct",
    "href": "0500100-tdyvrsDplyr-v005.html#distinct",
    "title": "17  Intro to dplyr",
    "section": "17.11 distinct()",
    "text": "17.11 distinct()\nThe distinct function eliminates any duplicate rows from a tibble. See the examples.\n\n# Show the just the region for each row in the tibble\nsales |&gt;\n  select (region) |&gt;\n  print(n=Inf)\n\n# A tibble: 24 × 1\n   region\n   &lt;chr&gt; \n 1 usa   \n 2 usa   \n 3 asia  \n 4 asia  \n 5 europe\n 6 europe\n 7 africa\n 8 africa\n 9 usa   \n10 usa   \n11 asia  \n12 asia  \n13 europe\n14 europe\n15 africa\n16 usa   \n17 usa   \n18 usa   \n19 asia  \n20 asia  \n21 europe\n22 europe\n23 africa\n24 africa\n\n# Same thing using distinct()\n# Show just the distinct (ie. different) regions\nsales |&gt;\n  select (region) |&gt;\n  distinct() |&gt;       # show just the distinct rows\n  print(n=Inf)\n\n# A tibble: 4 × 1\n  region\n  &lt;chr&gt; \n1 usa   \n2 asia  \n3 europe\n4 africa\n\n###############################################################\n# NOTE - all values in the row must be exactly the same\n# for the distinct() function to eliminate the duplicate rows.\n###############################################################\n\n# Show the region and title for rows \n# whose region is either europe or asia.\n# Arrange the output so they come up sorted.\n\nsales |&gt;\n  select(region, title) |&gt;\n  filter(region %in% c('europe', 'asia')) |&gt;\n  arrange(region, title) |&gt;\n  print(n=Inf)\n\n# A tibble: 12 × 2\n   region title          \n   &lt;chr&gt;  &lt;chr&gt;          \n 1 asia   Manager        \n 2 asia   Salesperson    \n 3 asia   Salesperson    \n 4 asia   Salesperson    \n 5 asia   Salesperson    \n 6 asia   Sr. Salesperson\n 7 europe Manager        \n 8 europe Manager        \n 9 europe Salesperson    \n10 europe Sr. Salesperson\n11 europe Sr. Salesperson\n12 europe Sr. Salesperson\n\n# Same thing using distinct()\n# Show just the distinct rows from the previous command\n\nsales |&gt;\n  select(region, title) |&gt;\n  filter(region %in% c('europe', 'asia')) |&gt;\n  distinct() |&gt;                                 # eliminate duplicate rows\n  arrange(region, title) |&gt;\n  print(n=Inf)\n\n# A tibble: 6 × 2\n  region title          \n  &lt;chr&gt;  &lt;chr&gt;          \n1 asia   Manager        \n2 asia   Salesperson    \n3 asia   Sr. Salesperson\n4 europe Manager        \n5 europe Salesperson    \n6 europe Sr. Salesperson\n\n# Notice that in the previous output, there were multiple\n# rows that contained \"europe\", multiple rows that contained \"asia\"\n# as well as multiple rows that contained each of the different titles.\n# However - there were NO rows that contained exact duplicates of both\n# the region and the title.\n#\n# The moral of the story is that distinct() will only elminate rows \n# that are EXACT duplicates in EVERY column.\n\n\nsales |&gt;\n  select(region, title, everything()) |&gt;\n  arrange(region, title)\n\n# A tibble: 24 × 7\n   region title    first last  baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 africa Manager  Laura White              20              281                8\n 2 africa Salespe… Emy   Pars…              25               87                3\n 3 africa Salespe… Moni… Oja                35               98               10\n 4 africa Sr. Sal… Sue   Aames              35              600               10\n 5 africa Sr. Sal… Hugh  Black              40              261                9\n 6 asia   Manager  Emy   Zeit…              34              166                4\n 7 asia   Salespe… Sue   Sall…              30              150               10\n 8 asia   Salespe… Zeke  Smith              20              120                3\n 9 asia   Salespe… Amy   Mark…              46              340                3\n10 asia   Salespe… Moni… Zeit…              23              184                1\n# ℹ 14 more rows\n\nsales |&gt;\n  select(region, title) |&gt;\n  arrange(region, title)\n\n# A tibble: 24 × 2\n   region title          \n   &lt;chr&gt;  &lt;chr&gt;          \n 1 africa Manager        \n 2 africa Salesperson    \n 3 africa Salesperson    \n 4 africa Sr. Salesperson\n 5 africa Sr. Salesperson\n 6 asia   Manager        \n 7 asia   Salesperson    \n 8 asia   Salesperson    \n 9 asia   Salesperson    \n10 asia   Salesperson    \n# ℹ 14 more rows\n\nsales |&gt;\n  select(region,title) |&gt;\n  arrange(region, title) |&gt;\n  distinct()\n\n# A tibble: 12 × 2\n   region title          \n   &lt;chr&gt;  &lt;chr&gt;          \n 1 africa Manager        \n 2 africa Salesperson    \n 3 africa Sr. Salesperson\n 4 asia   Manager        \n 5 asia   Salesperson    \n 6 asia   Sr. Salesperson\n 7 europe Manager        \n 8 europe Salesperson    \n 9 europe Sr. Salesperson\n10 usa    Manager        \n11 usa    Salesperson    \n12 usa    Sr. Salesperson",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#summarize-and-group_by",
    "href": "0500100-tdyvrsDplyr-v005.html#summarize-and-group_by",
    "title": "17  Intro to dplyr",
    "section": "17.12 summarize and group_by",
    "text": "17.12 summarize and group_by\nThe summarize() and group_by() functions work together. We’ll explain exactly how below …\n\n17.12.1 aggregate functions\nThe summarize function is used to condense the contents of several rows of data into a single row of data. It does this by using functions such as min(), max(), mean(), etc. These functions can take several values and return a single value. Such functions are known as aggregate functions.\n\n\n17.12.2 summarize (without group_by)\nThe summarize function is often preceded by a call to the group_by() function (which we will cover in the next section). group_by() is used to contol which rows of data will be affected by a subsequent call to the summarize() function. This will be explained in more detail below. For now, we will just focus on how summarize() works when it is NOT preceded by a call to group_by().\nWhen summarize() is NOT preceded by a call to group_by() then the job of the summarize() function is to return a single row of summary by applying aggregate functions (such as min, max, mean, etc) to columns of the tibble.\nSee the examples below.\n\n# mean salesInThousands (for all rows)\n# Note that this returns a tibble with exactly one row and one column.\nsales |&gt;\n summarize(mean(salesInThousands))\n\n# A tibble: 1 × 1\n  `mean(salesInThousands)`\n                     &lt;dbl&gt;\n1                     203.\n\n# We can change the column name as shown below\nsales |&gt;\n summarize(averageSales = mean(salesInThousands))\n\n# A tibble: 1 × 1\n  averageSales\n         &lt;dbl&gt;\n1         203.\n\n# We can filter the rows before calculating the mean results (or use any other of the dplyr functions)\n#\n# Show the mean sales for just the USA.\nsales |&gt;\n  filter(region == \"usa\") |&gt;\n  summarize(usaSales = mean(salesInThousands))\n\n# A tibble: 1 × 1\n  usaSales\n     &lt;dbl&gt;\n1     177.\n\n# We can get more than one column in our summary tibble\nsales |&gt;\n  summarize(meanSales = mean(salesInThousands), maxSales=max(salesInThousands), minSales=min(salesInThousands),\n            maxBase = max(baseInThousands), minBase=min(baseInThousands))\n\n# A tibble: 1 × 5\n  meanSales maxSales minSales maxBase minBase\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1      203.      600       40      50      20\n\n\n\n\n17.12.3 The n() function\nThe n() function returns the number of rows.\nThe n_distinct() function returns the number of rows that have distinct (i.e. different) values.\n\n# Show all of the rows ordered by region and title\nsales |&gt;\n  select(region, title, everything()) |&gt;\n  print(n=Inf)\n\n# A tibble: 24 × 7\n   region title    first last  baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 usa    Manager  Joe   Smith              40              100               10\n 2 usa    Salespe… Sam   Lee                40              200                6\n 3 asia   Salespe… Sue   Sall…              30              150               10\n 4 asia   Sr. Sal… Barb  Brown              35               79                4\n 5 europe Manager  Jack  Mart…              20               40                3\n 6 europe Sr. Sal… Kate  Carey              20               69                2\n 7 africa Salespe… Emy   Pars…              25               87                3\n 8 africa Salespe… Moni… Oja                35               98               10\n 9 usa    Sr. Sal… Jim   Kuru…              35              140                3\n10 usa    Manager  Zeke  Cohen              30              250               10\n11 asia   Salespe… Zeke  Smith              20              120                3\n12 asia   Salespe… Amy   Mark…              46              340                3\n13 europe Sr. Sal… Joe   Wash…              33              370                2\n14 europe Manager  Sam   Linc…              30              500                2\n15 africa Sr. Sal… Sue   Aames              35              600               10\n16 usa    Salespe… Barb  Aames              21              255                7\n17 usa    Salespe… Jack  Aames              43              105                4\n18 usa    Sr. Sal… Kate  Zeit…              50              187                4\n19 asia   Manager  Emy   Zeit…              34              166                4\n20 asia   Salespe… Moni… Zeit…              23              184                1\n21 europe Salespe… Jim   Brown              50              167                2\n22 europe Sr. Sal… Larry Green              20              113                4\n23 africa Manager  Laura White              20              281                8\n24 africa Sr. Sal… Hugh  Black              40              261                9\n\n# n() - returns the number of rows in the tibble\n# n_distinct(COL1, COL2, ...) - returns the number of rows for which \n#   the specified columns taken all together are distinct among all other rows.\nsales |&gt;\n  select(region, title, everything()) |&gt;\n  summarize(n(), n_distinct(region), n_distinct(title), n_distinct(region, title))\n\n# A tibble: 1 × 4\n  `n()` `n_distinct(region)` `n_distinct(title)` `n_distinct(region, title)`\n  &lt;int&gt;                &lt;int&gt;               &lt;int&gt;                       &lt;int&gt;\n1    24                    4                   3                          12",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500100-tdyvrsDplyr-v005.html#group_by-and-summarize-or-summarise",
    "href": "0500100-tdyvrsDplyr-v005.html#group_by-and-summarize-or-summarise",
    "title": "17  Intro to dplyr",
    "section": "17.13 group_by and summarize (or summarise)",
    "text": "17.13 group_by and summarize (or summarise)\nThe examples above for summarize all return a single row of data. This is because they are summarizing all of the rows for the tibble that summarize received. Note that this is true even if the rows have been filtered first. For example:\n\n# The following returns just one row.\n# The summarize function is summarizing ALL of the rows \n# for the tibble that it was given.\n\nsales %&gt;% \n  filter(region == \"usa\") |&gt;\n  summarize(numberOfRows=n(), maxUsaSales = max(salesInThousands), minUsaSales=min(salesInThousands))\n\n# A tibble: 1 × 3\n  numberOfRows maxUsaSales minUsaSales\n         &lt;int&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1            7         255         100\n\n\nThe functions, group_by and summarize functions are designed to work together. The job of the group_by function is to separate the rows of data into different “groups” that will later be processed separately by the summarize function.\nIf you use a group_by function in general it is followed a call to summarize()\nTo understand the examples below, it is helpful to first see the rows sorted by region and title\n\nsales |&gt;\n  select(region, title, everything()) |&gt;\n  arrange(region, title)\n\n# A tibble: 24 × 7\n   region title    first last  baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 africa Manager  Laura White              20              281                8\n 2 africa Salespe… Emy   Pars…              25               87                3\n 3 africa Salespe… Moni… Oja                35               98               10\n 4 africa Sr. Sal… Sue   Aames              35              600               10\n 5 africa Sr. Sal… Hugh  Black              40              261                9\n 6 asia   Manager  Emy   Zeit…              34              166                4\n 7 asia   Salespe… Sue   Sall…              30              150               10\n 8 asia   Salespe… Zeke  Smith              20              120                3\n 9 asia   Salespe… Amy   Mark…              46              340                3\n10 asia   Salespe… Moni… Zeit…              23              184                1\n# ℹ 14 more rows\n\n\nNotice how the rows that have the same region can be thought of as a “group” of rows for that region.\nSee the examples below\n\n# Show summary information for each of the different regions.\n# Each row in the output corresponds only to the rows for the region shown on that row of output.\nsales |&gt; \n  group_by(region) |&gt;    # create a different group for each region\n  summarize(numberOfRows=n(), mean(baseInThousands), mean(salesInThousands))\n\n# A tibble: 4 × 4\n  region numberOfRows `mean(baseInThousands)` `mean(salesInThousands)`\n  &lt;chr&gt;         &lt;int&gt;                   &lt;dbl&gt;                    &lt;dbl&gt;\n1 africa            5                    31                       265.\n2 asia              6                    31.3                     173.\n3 europe            6                    28.8                     210.\n4 usa               7                    37                       177.\n\n\nSimilarly we can group the rows by those with the same value in the title column.\n\n# Show summary information for each of the different titles.\n# Each row in the output corresponds only to the rows for the title shown on that row of output.\nsales |&gt; \n  group_by(title) |&gt;    # create a different group for each title\n  summarize(numberOfRows=n(), mean(baseInThousands), mean(salesInThousands))\n\n# A tibble: 3 × 4\n  title           numberOfRows `mean(baseInThousands)` `mean(salesInThousands)`\n  &lt;chr&gt;                  &lt;int&gt;                   &lt;dbl&gt;                    &lt;dbl&gt;\n1 Manager                    6                    29                       223.\n2 Salesperson               10                    33.3                     171.\n3 Sr. Salesperson            8                    33.5                     227.\n\n\n\n17.13.1 group_by without summarize has no noticeable effect\nNote that on its own, the group_by function doesn’t appear to do anything. It only has a tangible effect when a summarize function is called after the group_by function\n\n# group_by without a subsequent call to summarize doesn't appear to do anything special\nsales |&gt; \n  group_by(title)   \n\n# A tibble: 24 × 7\n# Groups:   title [3]\n   first  last    title region baseInThousands salesInThousands yearsWithCompany\n   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt;            &lt;dbl&gt;            &lt;dbl&gt;\n 1 Joe    Smith   Mana… usa                 40              100               10\n 2 Sam    Lee     Sale… usa                 40              200                6\n 3 Sue    Sallin… Sale… asia                30              150               10\n 4 Barb   Brown   Sr. … asia                35               79                4\n 5 Jack   Martin  Mana… europe              20               40                3\n 6 Kate   Carey   Sr. … europe              20               69                2\n 7 Emy    Parsons Sale… africa              25               87                3\n 8 Monica Oja     Sale… africa              35               98               10\n 9 Jim    Kuruzo… Sr. … usa                 35              140                3\n10 Zeke   Cohen   Mana… usa                 30              250               10\n# ℹ 14 more rows\n\n\n\n\n17.13.2 group_by more than one column\nA call to group_by that has more than one column creates a separate group for the rows that have the same values for all of the specified columns. To understand this look at the following output:\n\nasia_europe_sales = \n  sales |&gt;\n    select(region, title, baseInThousands) |&gt;\n    filter(region %in% c('europe', 'asia')) |&gt;\n    arrange(region, title)\n\nasia_europe_sales  |&gt;\n    print(n=Inf)\n\n# A tibble: 12 × 3\n   region title           baseInThousands\n   &lt;chr&gt;  &lt;chr&gt;                     &lt;dbl&gt;\n 1 asia   Manager                      34\n 2 asia   Salesperson                  30\n 3 asia   Salesperson                  20\n 4 asia   Salesperson                  46\n 5 asia   Salesperson                  23\n 6 asia   Sr. Salesperson              35\n 7 europe Manager                      20\n 8 europe Manager                      30\n 9 europe Salesperson                  50\n10 europe Sr. Salesperson              20\n11 europe Sr. Salesperson              33\n12 europe Sr. Salesperson              20\n\n\nWe can treat the rows that have the same values for both the region and title as a single group of rows. For example we can treat all of the rows for “asia Salesperson” as a group and the rows for “eroupe Manager” as a separate group. The output of the following command returns one row for each group.\n\n# create groups based on region and sales\nasia_europe_sales |&gt; \n  group_by(region, title) |&gt;\n  summarize(n(), max(baseInThousands), mean(baseInThousands))|&gt;\n  print(n=Inf)\n\n`summarise()` has grouped output by 'region'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 5\n# Groups:   region [2]\n  region title           `n()` `max(baseInThousands)` `mean(baseInThousands)`\n  &lt;chr&gt;  &lt;chr&gt;           &lt;int&gt;                  &lt;dbl&gt;                   &lt;dbl&gt;\n1 asia   Manager             1                     34                    34  \n2 asia   Salesperson         4                     46                    29.8\n3 asia   Sr. Salesperson     1                     35                    35  \n4 europe Manager             2                     30                    25  \n5 europe Salesperson         1                     50                    50  \n6 europe Sr. Salesperson     3                     33                    24.3\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou might be wondering about the somewhat cryptic message from the previous command:\n\nsummarise() has grouped output by ‘region’. You can override using the .groups argument.\n\nWhen group_by is called with more than one column name the subsequent summarize call will generate a message similar to the one shown above. You can ignore this message without any issue. If you want to understand it better - look at  this.\n\n\n\n\n17.13.3 order of columns in group_by is irrelevant\nNote that it makes no difference which order you specify the column names in the call to group by. The following command reverses the order of the columns in the call to group_by but returns the exact same result as the previous command.\n\n# create groups based on region and sales\nasia_europe_sales |&gt; \n  group_by(title, region) |&gt;   # the order of the columns in group_by makes no difference\n  summarize(n(), max(baseInThousands), mean(baseInThousands))|&gt;\n  print(n=Inf)\n\n`summarise()` has grouped output by 'title'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 5\n# Groups:   title [3]\n  title           region `n()` `max(baseInThousands)` `mean(baseInThousands)`\n  &lt;chr&gt;           &lt;chr&gt;  &lt;int&gt;                  &lt;dbl&gt;                   &lt;dbl&gt;\n1 Manager         asia       1                     34                    34  \n2 Manager         europe     2                     30                    25  \n3 Salesperson     asia       4                     46                    29.8\n4 Salesperson     europe     1                     50                    50  \n5 Sr. Salesperson asia       1                     35                    35  \n6 Sr. Salesperson europe     3                     33                    24.3\n\n\n\n\n17.13.4 some other aggregate functions\nAs mentioned above, an “aggregate function” is a function that can take several values as input but returns a single value. It is these types of functions that are used by summarize()\nThe following are some other commonly used aggregate functions that can be used in summarize. There are many, many others.\n\nStatistics: mean(), median(), sd(), IQR(), mad()\nRange: min(), max(),\nPosition: first(), last(), nth(),\nCounting: n(), n_distinct()\nLogical: any(), all()",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Intro to dplyr</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html",
    "href": "0500400-sqlSelectIntro-v003.html",
    "title": "18  SQL Select",
    "section": "",
    "text": "18.1 NOTE - this page is for “IDS2040 - Data Management” (not “IDS1020 - Intro to IDS”)\nNOTE - If you are in my “IDS1020 - Intro to IDS” class, this is NOT the page you should be reading. Rather, jump to the next section entitled “Relational Databases and SQL” and start from there.\nThis page is intended for my “IDS460 - Data Management” class. The info below assumes that you have some knowledge of the dplyr package in R (which was covered in the previous section). After you get a basic idea of what the SQL SELECT statement does and how it is very similar to the dplyr functions, you can move onto the next section entitled “Relational Databases and SQL” and continue with that information.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#get-the-data",
    "href": "0500400-sqlSelectIntro-v003.html#get-the-data",
    "title": "18  SQL Select",
    "section": "18.2 Get the data",
    "text": "18.2 Get the data\nThe data we are using in this section contains information about salespeople who are employees of a company. Each row of the data contains info about one salesperson. The salespeople get paid some “base pay” as well as a commission that is a percent of the total dollar amount of sales they make.\nFollow the instructions below to get the data and start using it in R.\n\n18.2.1 Load the R packages we’ll neeed\n\nif(!require(tibble)){install.packages(\"tibble\");require(tibble);}\nif(!require(dplyr)){install.packages(\"dplyr\");require(dplyr);}\nif(!require(readr)){install.packages(\"readr\");require(readr);}\nif(!require(sqldf)){install.packages(\"sqldf\");require(sqldf);}\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\n\n\n\n18.2.2 Download the file\nThe data is contained in a csv file. If you’d like to follow along with this tutorial on your own computer you can download the .csv file we are using by clicking here.\n\n\n18.2.3 Import the data by clicking on some buttons …\n\nThe code in the next section below uses read_csv function to read the data into R. If you are not comfortable with R, I recommend that you instead, follow the instructions starting in the next bullet to import the data into R.\nIf you are not familiar with R, you may have some trouble running the read_csv() code shown below. Instead, I recommend that you follow the following instructions to import the file into R.\nTo do so, click on “Import Dataset” button on the “Environment” tab (usually found in the upper-right-hand window pane in RStudio).\nChoose “From Text (base)” and locate your file. You should see something like this:\n\nMake sure to change the “Name” portion (see circled section in picture) to read “sales”, then press the “import” button. This will open up a new tab in RStudio that shows the contents of the file. You can safely navigate away from this tab or close the tab and the data will remain imported and can be seen by typing “sales” (without the “quotes”).\n\n\n\n18.2.4 Import the data by typing some R code …\nThe following code reads the data into R. Alternatively, you can follow the instructions above to click on some buttons to import the data.\n\n# Read in the data into a tibble\n#\n# Note that the following code uses the readr::read_csv function from the readr\n# package which is part of the tidyverse collection of packages. \n# This function is similar to the base-R read.csv function.\n# \n# read_csv returns a tibble, which is the data structure that the \n# tidyverse packages use in lieu of dataframes. A tibble is basically\n# a dataframe with extra features.\n# By contrast, the base-r read.csv function returns a dataframe.\n \nsales = read_csv(\"salespeople-v002.csv\", na=c(\"\",\"NULL\"), show_col_types=FALSE)",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#databases-and-sql",
    "href": "0500400-sqlSelectIntro-v003.html#databases-and-sql",
    "title": "18  SQL Select",
    "section": "18.3 Databases and SQL",
    "text": "18.3 Databases and SQL\nA database is an organized collection of data that is designed to be accessed and manipulated by computer programs. We’ll cover a little more about exactly what a database is and how it differs from Excel, R and other programs in the next section of this book. Below is just a brief explanation to give you some background before we start getting into the details of the SQL language that is used to communicate with databases.\nA “relational database” is a type of database in which data is arranged in “tables” that are organized into “rows” and “columns”. A “relational database table” is very similar to an R dataframe or tibble. Relational databases are controlled and managed with software known as “Relational DataBase Management System” (RDBMS) software. Relational database technology dates back to the 1970s and has been around long before R has been around. Relational databases are used by just about every major company all around the world.\n“Structured Query Language” (or SQL for short - pronounced “sequel”) is the standard language that is used to communicate with a DBMS to manage and manipulate the data in a Relational Database. SQL has many different commands. One of the most important SQL commands for data analysts to know is the SQL “SELECT” command. It is this command that is used to extract data from a database and organize the data into a desired form. We will focus in this section on an intro to the SQL SELECT statement.\nAs we said above, R is NOT a Database Management System. However SQL is a very popular language. Many technologists come to R, already having a deep knowledge of the SQL language. Therefore it is nice to know that the SQL language can also be used to manipulate R dataframes. This is possible because R dataframes are very, very similar in structure to Relational Database “tables” (i.e. they have rows, columns, column names and specific datatypes for each column).\nThe R “sqldf” package includes a function named “sqldf” which takes a SQL command as its argument. Wherever the SQL command refers to the name of a relational database “table”, sqldf runs the SQL command using the R dataframe with that name.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#dplyr-is-very-similar-to-the-sql-select-command",
    "href": "0500400-sqlSelectIntro-v003.html#dplyr-is-very-similar-to-the-sql-select-command",
    "title": "18  SQL Select",
    "section": "18.4 dplyr is very similar to the SQL SELECT command",
    "text": "18.4 dplyr is very similar to the SQL SELECT command\nThe designers of dplyr got inspiration for many of their ideas from SQL. Therefore once you know the basics of dplyr it should be very easy to transfer that knowledge to learning the SQL SELECT statement.\nThe following examples show how the concepts you learned in the previous section about dplyr carry over to the SQL SELECT statement.\nThe English word “query” means a question. A SQL SELECT statement is often referred to as a database “query”. In essence a SQL SELECT statement in essence asks the database a question and gets back an answer.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#sql-select-clauses-compared-with-dplyr-functions",
    "href": "0500400-sqlSelectIntro-v003.html#sql-select-clauses-compared-with-dplyr-functions",
    "title": "18  SQL Select",
    "section": "18.5 SQL SELECT “clauses” compared with dplyr “functions”",
    "text": "18.5 SQL SELECT “clauses” compared with dplyr “functions”\nWhile dplyr uses different “functions”, the SQL SELECT statement is comprised of different “clauses”. The clauses in the SQL SELECT statement are listed below. We will elaborate on the details of these clauses in the sections below.\n\nSELECT\nThis is used to “select” the columns you want - similar to dplyr select function.\nFROM\nUsed to specify which “tables” contain the information you will be working with. In dplyr this is accomplished via the first argument, .data, of each of the dplyr “verb” functions that we learned about in the previous section.\nWHERE\nChoose the rows you want. Directly analogous to the dplyr “filter” function.\nGROUP BY\nDirectly analogous to the dplyr “group_by” function.\nHAVING\nThis is also similar to the dplyr “filter” function. We will learn later how this differs from the SQL SELECT WHERE clause.\nORDER BY\nDirectly analogous to the dplyr “arrange” function\nLIMIT\nDirectly analogous to the dplyr print(n=…) function or the dplyr slice_head(n=…) function.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#order-of-the-clauses-is-important",
    "href": "0500400-sqlSelectIntro-v003.html#order-of-the-clauses-is-important",
    "title": "18  SQL Select",
    "section": "18.6 Order of the clauses is important",
    "text": "18.6 Order of the clauses is important\nA SQL SELECT statement may contain some or all of the above clauses. Only the SELECT clause is absolutely required. If the SQL SELECT statement contains more than one clause then whichever clauses do appear must appear in the order listed above.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#is-sql-case-sensitive-yes-and-no",
    "href": "0500400-sqlSelectIntro-v003.html#is-sql-case-sensitive-yes-and-no",
    "title": "18  SQL Select",
    "section": "18.7 Is SQL case sensitive? yes and no",
    "text": "18.7 Is SQL case sensitive? yes and no\nDifferent SQL products treat case sensitivity differently. In general the names of tables and columns ARE case sensitive. The “keywords” of the language are generally NOT case sensitive. However, it is often the convention of many SQL books and references to show SQL keywords in UPPER CASE. We have done that below but it is not strictly necessary.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#whitespace-in-sql-commands-is-ignored",
    "href": "0500400-sqlSelectIntro-v003.html#whitespace-in-sql-commands-is-ignored",
    "title": "18  SQL Select",
    "section": "18.8 Whitespace in SQL commands is ignored",
    "text": "18.8 Whitespace in SQL commands is ignored\nA SQL command may be written entirely on one line. However, extra whitespace (i.e. spaces, tabs, newlines) may be added to make the code more readable. It is common to start each SQL SELECT statement clause on a new line and to add extra whitespace to make the code more readable. In general we tried to follow that practice in the code.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#intro-to-erds---i.e.-entity-relationship-diagrams",
    "href": "0500400-sqlSelectIntro-v003.html#intro-to-erds---i.e.-entity-relationship-diagrams",
    "title": "18  SQL Select",
    "section": "18.9 Intro to ERDs - i.e. “Entity Relationship Diagrams”",
    "text": "18.9 Intro to ERDs - i.e. “Entity Relationship Diagrams”\nAn “Entity Relationship Diagram” (ERD) is a diagram that highlights the structure of the tables in a database (in database terminology tables are also known as “entity sets” or “entity types” - see below). The ERD does NOT show the data in the tables, just the structure of the tables. The following is an ERD for the sales data we have been using.\nNote that so far we’ve only been using one table. An ERD gets more complicated when a database contains several tables. We will revisit ERDs again later.\n\n\n\n\n\nerDiagram\n    SALES {\n        first character \"employee first name\"\n        last character \"employee last name\"\n        title character \"employee title\"\n        region character \"region that employee sells to\"\n        baseInThousands numeric \"employee's base pay (in thousands)\"\n        salesInThousands numeric \"total sales dollars (in thousands)\"\n        yearsWithCompany numeric \"number years employee with company\"\n    }\n\n\n\n\n\n\n\nThe table name is shown at the top\nUnder the table name\n\nThe 1st column contains the names of the table’s fields (i.e. columns)\nThe 2nd column contains the datatype of the fields\nThe 3rd column contains a description of the field\n\n\nSome Entity Relationship Diagrams don’t contain as much information. Often an ERD will NOT contain a description of the fields. This is still a “valid” ERD, just not as descriptive.\n\n\n\n\n\nerDiagram\n    SALES {\n        first character\n        last character\n        title character\n        region character\n        baseInThousands numeric\n        salesInThousands numeric\n        yearsWithCompany numeric\n    }\n\n\n\n\n\n\nIn the extreme case, an ERD may only contain the names of the tables. This type of ERD is only really useful when the database contains multiple tables.\n\n\n\n\n\nerDiagram\n    SALES",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#database-terminology---fields-entities-etc",
    "href": "0500400-sqlSelectIntro-v003.html#database-terminology---fields-entities-etc",
    "title": "18  SQL Select",
    "section": "18.10 Database terminology - fields, entities, etc",
    "text": "18.10 Database terminology - fields, entities, etc\nThere are different terms used to refer to the rows and columns of a table, dataframe or tibble. Statisticians often refer to each row of a table as an observation and each column of a table as a variable.\nIn the world of databases, a column can be referred to as a “column” or a “field”. Rows are referred to as just “rows” but sometimes are referred to as “records” or “entities”. Often an entire table is referred to as an “entity” (technically a table, which is a collection of rows, is an “entity set” or an “entity type”).\nThe truth is not many people use the word “entity” or “entity set”. However, an “Entity Relationship Diagram” is used to show the tables in a database and how the tables are “related” to each other.\nIn this section we are just focusing on a single table. In a later sections, we’ll learn more about “relationships” between multiple tables and how the relationships are displayed on an Entity Relationship Diagram.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#select-and-from-clauses",
    "href": "0500400-sqlSelectIntro-v003.html#select-and-from-clauses",
    "title": "18  SQL Select",
    "section": "18.11 SELECT and FROM clauses",
    "text": "18.11 SELECT and FROM clauses\n\n# The SELECT clause specifies which columns you want.\n# The FROM clause specifies the table (or tables) that contain the data.\nsqldf(\"SELECT title, first, last\n       FROM sales\")\n\nError in sqldf(\"SELECT title, first, last\\n       FROM sales\"): could not find function \"sqldf\"\n\n# SELECT * in SQL is similar to select(everything()) in dplyr.\n# * is an abbreviation for all of the column names.\n\nsqldf(\"SELECT *\n       FROM sales\")\n\nError in sqldf(\"SELECT *\\n       FROM sales\"): could not find function \"sqldf\"\n\n# Unfortunately, the SQL SELECT * is not as smart as the everything() function in dplyr.\n# In dplyr, everything() does not include columns that you already typed.\n# In SQL, the * always includes ALL columns. Therefore the following\n# query displays the title and region columns a 2nd time due to the *\n\nsqldf(\"SELECT title, region, *\n       FROM sales\")\n\nError in sqldf(\"SELECT title, region, *\\n       FROM sales\"): could not find function \"sqldf\"\n\n# The only thing you can do in a select statement without a FROM clause\n# is to perform calculations without data from a table.\n\nsqldf(\"SELECT 3+2, 100*5\")\n\nError in sqldf(\"SELECT 3+2, 100*5\"): could not find function \"sqldf\"",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#add-new-columns-in-select-clause",
    "href": "0500400-sqlSelectIntro-v003.html#add-new-columns-in-select-clause",
    "title": "18  SQL Select",
    "section": "18.12 add new columns in SELECT clause",
    "text": "18.12 add new columns in SELECT clause\n\n# In dplyr, to add new columns you use the mutate function.\n# In the SQL SELECT command this is accomplished as part of the SELECT clause.\n# To add new columns that are calculated from other columns\n# simply add the calculations to the select clause.\n\nsqldf(\"SELECT first, last, salesInThousands, 0.1 * salesInThousands\n       FROM sales\n       \")\n\nError in sqldf(\"SELECT first, last, salesInThousands, 0.1 * salesInThousands\\n       FROM sales\\n       \"): could not find function \"sqldf\"\n\n# You can give the new column a unique name by following the definition\n# of the column with \"AS columnName\".\nsqldf(\"SELECT first, last, salesInThousands, 0.1 * salesInThousands as commission\n       FROM sales\n       \")\n\nError in sqldf(\"SELECT first, last, salesInThousands, 0.1 * salesInThousands as commission\\n       FROM sales\\n       \"): could not find function \"sqldf\"\n\n# The word \"AS\" is actually optional. The following adds two new columns\n# but does not use the word AS. All you need is the definition of the column\n# followed by a space followed by the name of the new column.\nsqldf(\"SELECT first, last, baseInThousands,  \n              salesInThousands, 0.1 * salesInThousands commission, \n              salesInThousands * 0.1 + baseInThousands takeHome\n       FROM sales\n       WHERE region='africa'\n       \")\n\nError in sqldf(\"SELECT first, last, baseInThousands,  \\n              salesInThousands, 0.1 * salesInThousands commission, \\n              salesInThousands * 0.1 + baseInThousands takeHome\\n       FROM sales\\n       WHERE region='africa'\\n       \"): could not find function \"sqldf\"",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#use-aggregate-functions-in-select-to-create-summary-rows",
    "href": "0500400-sqlSelectIntro-v003.html#use-aggregate-functions-in-select-to-create-summary-rows",
    "title": "18  SQL Select",
    "section": "18.13 use aggregate functions in SELECT to create summary rows",
    "text": "18.13 use aggregate functions in SELECT to create summary rows\n\n# The dplyr summarize function is used to summarize (or aggregate) info from\n# several rows into a single row. \n# \n# In the SQL SELECT statement, this is accomplished by simply using\n# aggregate functions in the select clause.\n#\n# SQL has several built in standard aggregate functions\n#\n#   count(*) - similar to n() in dplyr - we'll discuss why the * is there later\n#   avg(SOME_COLUMN)\n#   max(SOME_COLUMN)\n#   min(SOME_COLUMN)\n\nsqldf(\"select count(*), avg(baseInThousands), max(baseInThousands)\n       FROM sales\n       ORDER BY region ASC, salesInThousands DESC\")\n\nError in sqldf(\"select count(*), avg(baseInThousands), max(baseInThousands)\\n       FROM sales\\n       ORDER BY region ASC, salesInThousands DESC\"): could not find function \"sqldf\"\n\n# As shown above we can assign names to the new columns.\n# Again, the word \"AS\" is optional. The following statement\n# would work exactly the same way if we did not have the word \"AS\"\n\nsqldf(\"SELECT count(*) as numberOfEmployees, \n              avg(baseInThousands) AS averagebaseInThousands, \n              max(baseInThousands) AS maxbaseInThousands\n       FROM sales\n       ORDER BY region ASC, salesInThousands DESC\")\n\nError in sqldf(\"SELECT count(*) as numberOfEmployees, \\n              avg(baseInThousands) AS averagebaseInThousands, \\n              max(baseInThousands) AS maxbaseInThousands\\n       FROM sales\\n       ORDER BY region ASC, salesInThousands DESC\"): could not find function \"sqldf\"\n\n# This is the same query as above.\n# This version does not have the word \"AS\".\n# The results are exactly the same.\n\nsqldf(\"SELECT count(*) as numberOfEmployees, \n              avg(baseInThousands) averagebaseInThousands, \n              max(baseInThousands) maxbaseInThousands\n       FROM sales\n       ORDER BY region ASC, salesInThousands DESC\")\n\nError in sqldf(\"SELECT count(*) as numberOfEmployees, \\n              avg(baseInThousands) averagebaseInThousands, \\n              max(baseInThousands) maxbaseInThousands\\n       FROM sales\\n       ORDER BY region ASC, salesInThousands DESC\"): could not find function \"sqldf\"",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#where-clause",
    "href": "0500400-sqlSelectIntro-v003.html#where-clause",
    "title": "18  SQL Select",
    "section": "18.14 WHERE clause",
    "text": "18.14 WHERE clause\n\n# WHERE is directly analogous to the dplyr filter function.\n#\n# The WHERE clause identifies the rows that will be returned.\n# It takes a logical expression that uses the names of the columns.\n# For every row the SELECT statement analyzes the row and calculates the\n# result of the logical expression for that row. If the logical expression\n# for a row is TRUE you get the row back. If not you do not get the row.\n\nsqldf(\"SELECT *\n       FROM sales\n       WHERE salesInThousands &lt; 100\")\n\nError in sqldf(\"SELECT *\\n       FROM sales\\n       WHERE salesInThousands &lt; 100\"): could not find function \"sqldf\"\n\n# This query uses aggregate functions in the SELECT but does NOT have a WHERE.\n# Therefore the result is a summary of ALL rows in the table.\n\nsqldf(\"SELECT count(*), min(baseInThousands), max(baseInThousands), avg(baseInThousands)\n       FROM sales\")\n\nError in sqldf(\"SELECT count(*), min(baseInThousands), max(baseInThousands), avg(baseInThousands)\\n       FROM sales\"): could not find function \"sqldf\"\n\n# This is the same query but adds WHERE region='asia'.\n# As a result the summary row only reflects info about the rows for 'asia'.\n# Notice the there are fewer rows in the count(*) column and some of the\n# other summary statistics are also different.\n\nsqldf(\"SELECT count(*), min(baseInThousands), max(baseInThousands), avg(baseInThousands)\n       FROM sales\n       WHERE region='asia'\")\n\nError in sqldf(\"SELECT count(*), min(baseInThousands), max(baseInThousands), avg(baseInThousands)\\n       FROM sales\\n       WHERE region='asia'\"): could not find function \"sqldf\"",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#order-by-clause",
    "href": "0500400-sqlSelectIntro-v003.html#order-by-clause",
    "title": "18  SQL Select",
    "section": "18.15 ORDER BY clause",
    "text": "18.15 ORDER BY clause\n\n# The ORDER BY clause is directly anaogous to dplyr's arrange function\n\nsqldf(\"SELECT *\n       FROM sales\n       WHERE salesInThousands &lt; 100\n       ORDER By salesInThousands\")\n\nError in sqldf(\"SELECT *\\n       FROM sales\\n       WHERE salesInThousands &lt; 100\\n       ORDER By salesInThousands\"): could not find function \"sqldf\"\n\n# Just as with dplyr's arrange function the rows can be ordered\n# from largest to smallest by specifying desc, i.e. a descending order\n# for the values of a column.\n\nsqldf(\"SELECT *\n       FROM sales\n       WHERE salesInThousands &lt; 100\n       ORDER BY salesInThousands DESC\")\n\nError in sqldf(\"SELECT *\\n       FROM sales\\n       WHERE salesInThousands &lt; 100\\n       ORDER BY salesInThousands DESC\"): could not find function \"sqldf\"\n\n# Just as with dplyr's arrange function you can specify that the order\n# of the rows should depend on multiple columns. \n# \n# The first column specified is used to order all of the rows.\n# Subsequent columns mentioned in ORDER By are used only for rows\n# in which the values for the earlier columns are the same.\n#\n# Each column could have an ascending (asc) or descending (desc) order.\n# If neither asc nor desc is specified, then the default is an ascending order.\n\nsqldf(\"SELECT *\n       FROM sales\n       ORDER BY region ASC, salesInThousands DESC\")\n\nError in sqldf(\"SELECT *\\n       FROM sales\\n       ORDER BY region ASC, salesInThousands DESC\"): could not find function \"sqldf\"",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#group-by-clause",
    "href": "0500400-sqlSelectIntro-v003.html#group-by-clause",
    "title": "18  SQL Select",
    "section": "18.16 GROUP BY clause",
    "text": "18.16 GROUP BY clause\n\n# The GROUP BY clause in SQL is directly analogous to the group_by function in dplyr.\n#\n# All of the rows that have the same value for the specified GROUP BY columns\n# are aggregated (i.e. summarized) in a single line of output.\n#\n# GROUP BY should only be used if the SELECT clause includes aggregate functions. \n\nsqldf(\"SELECT title, count(*), avg(baseInThousands) avgBase, max(baseInThousands) maxBase\n       FROM sales\n       GROUP BY title\n       ORDER BY title\")\n\nError in sqldf(\"SELECT title, count(*), avg(baseInThousands) avgBase, max(baseInThousands) maxBase\\n       FROM sales\\n       GROUP BY title\\n       ORDER BY title\"): could not find function \"sqldf\"\n\n# Grouping by a different column - region\nsqldf(\"SELECT region, count(*), avg(baseInThousands) avgBase, max(baseInThousands) maxBase\n       FROM sales\n       GROUP BY region\n       ORDER BY region\")\n\nError in sqldf(\"SELECT region, count(*), avg(baseInThousands) avgBase, max(baseInThousands) maxBase\\n       FROM sales\\n       GROUP BY region\\n       ORDER BY region\"): could not find function \"sqldf\"\n\n# Just as with dplyr, the groups can be defined by more than one column.\n#\n# The following query treats all of the rows that match in both the\n# region and title columns as a single group.\n#\n# For example, all of the original rows from the sales table\n# that have a title of \"Salesperson\" and a region of \"asia\" \n# are considered to be part of the same group and are summarized \n# in a single row of the output.\n\nsqldf(\"SELECT title, region, count(*), avg(baseInThousands) avgBase, max(baseInThousands) maxBase\n       FROM sales\n       GROUP BY title, region\n       ORDER BY title, region\")\n\nError in sqldf(\"SELECT title, region, count(*), avg(baseInThousands) avgBase, max(baseInThousands) maxBase\\n       FROM sales\\n       GROUP BY title, region\\n       ORDER BY title, region\"): could not find function \"sqldf\"\n\n# A similar query without a GROUP BY returns just a single row that\n# summarizes the data from all rows of the table.\n\nsqldf(\"SELECT count(*), avg(baseInThousands) avgBase, max(baseInThousands) maxBase\n       FROM sales\")\n\nError in sqldf(\"SELECT count(*), avg(baseInThousands) avgBase, max(baseInThousands) maxBase\\n       FROM sales\"): could not find function \"sqldf\"",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "0500400-sqlSelectIntro-v003.html#limit-clause",
    "href": "0500400-sqlSelectIntro-v003.html#limit-clause",
    "title": "18  SQL Select",
    "section": "18.17 LIMIT clause",
    "text": "18.17 LIMIT clause\n\n# The LIMIT clause is similar to print(n=) with dplyr.\n# It limits the number of rows returned to the first few\n# that would have been returned had the query not included the LIMIT clause.\n#\n# The LIMIT clause is usually used with an ORDER BY clause.\n\nsqldf(\"SELECT *\n       FROM sales\n       ORDER BY salesInThousands desc\n       LIMIT 10\")\n\nError in sqldf(\"SELECT *\\n       FROM sales\\n       ORDER BY salesInThousands desc\\n       LIMIT 10\"): could not find function \"sqldf\"\n\n# Note that the LIMIT clause is not standard SQL - some SQL flavors\n# do not contain a LIMIT clause. However, the LIMIT clause or \n# something similar is part of many SQL flavors.",
    "crumbs": [
      "Intro to dplyr and to SQL",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>SQL Select</span>"
    ]
  },
  {
    "objectID": "sql0006-introToDatabases-v023.html",
    "href": "sql0006-introToDatabases-v023.html",
    "title": "19  “databases” and “database management systems”",
    "section": "",
    "text": "19.1 Different categories of databases",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>\"databases\" and \"database management systems\"</span>"
    ]
  },
  {
    "objectID": "sql0006-introToDatabases-v023.html#different-categories-of-databases",
    "href": "sql0006-introToDatabases-v023.html#different-categories-of-databases",
    "title": "19  “databases” and “database management systems”",
    "section": "",
    "text": "19.1.1 Relational Databases\n\n# Different categories of databases exist. Databases in use\n# today in business can be broken down into two different categories:\n#\n# 1. Relational Databases\n#    \n#    o These types of databases store information in \"tables\" that have rows\n#      and columns of information - very similar to the way the data is\n#      arranged in an R dataframe.\n# \n#      - Each column of a relational database table\n#        (a) has a name\n#        (b) has a datatype (e.g. numeric, logical, character, etc)\n#     \n#      - Relational database tables use the term NULL in the same way that \n#        R uses the term NA - we'll see examples of this later.\n#\n#    o There are MANY different relational database products in use today.\n#      Some very popular ones are:\n#\n#      - Microsoft SQL Server\n#      - Oracle Relational Database Management System\n#      - MySql\n#      - Postgres\n#      - MariaDb\n#      - many, many others\n#\n#    o All Relational database software uses the SQL language to manipulate the \n#      contents of the database. (there may be a rare exception I don't know about)\n#\n#      Each relational database software product has its own \"flavor\"\n#      of the SQL language. You can think of this as different \"dialects\"\n#      of the same language. For example the difference between English \n#      as it's used in the USA vs as it is used in England.\n#\n#      There exists a SQL standard that is recognized by all relational database\n#      software programs\n#      (see https://blog.ansi.org/2018/10/sql-standard-iso-iec-9075-2016-ansi-x3-135/#gref).\n#      However, most relational database products add additional \n#      capabilities and commands to its version of SQL to differentiate it\n#      from other relational database products in the market.\n#\n#      In this class we will be focusing primarily on the SQL standard\n#      features that are included in all relational database products\n#      and not on the extensions that are provided by the various products.\n\n\n\n19.1.2 Non-Relational Databases (AKA NoSQL databases)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# 2. Non-Relational Databases (also known as NoSQL databases)\n# \n#    We will mention more about these types of databases towards the end of \n#    the semester.\n#\n#    These types of databases organize information in formats other than rows\n#    and columns. \n#\n#    SOME NoSql databases actually CAN be manipulated with the SQL language.\n#    However, the term NoSql has come to include any database that stores\n#    information in a form other than in strict rows and columns.\n#\n#    Some examples are shown below.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n19.1.3 Graph databases - e.g. Neo4J\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#    (a) Neo4J is an example of a \"graph database\". These types of databases\n#        organize their information in a structure that looks like a \"web\"\n#        of information.\n# \n#        For example see the diagram below\n#        (For a better version of this diagram see the picture at the top of\n#         the following webpage: https://aws.amazon.com/nosql/graph/\n#         or see the file \"graph-of-friends.png\" file in the files for this lesson.)\n#\n#                           (friend)\n#                    Sam &lt;------------ Annie\n#                                        ^\n#                                        |\n#                                        |(friend)\n#                                        |\n#                                        |\n#                           (friend)     |        (friend)\n#                   Mac &lt;-------------- Jack ---------------&gt; Doug\n#                                       | ^\n#                                       | |\n#                              (friend) | | \n#                                       | | (friend)                \n#                                       v |         \n#                                   Harry Howard\n#\n#        This example shows a set of people and who is friends with whom.\n#        There is a different icon for each person. \"Friend arrows\" indicate \n#        who is friends with whom. In this example the arrows have a direction.\n#        For example:\n#                            (friends)\n#                     Jack -------------&gt;  Doug   \n#        \n#        can mean that Jack is friends with Doug but Doug is not friends with Jack.\n#        However, graph databases also have the option to assume that a one-way \n#        arrow actually implies a two way relationship such that\n#        Jack ---&gt; Doug also implies that Doug is friends with Jack. In any\n#        case, this lesson is not focusing on the details of graph databases.\n#\n#        For many types of information a diagram as shown above is much more\n#        intuitive and understandable than a table of information. This is\n#        just one reason why graph databases are popular.\n#\n#        However, this same information could be converted to the following\n#        table and stored in a relational database.\n#\n#            name      is_friends_with\n#            ----      ---------------\n#            annie     sam\n#            jack      annie\n#            jack      mac\n#            jack      doug\n#            jack      harry\n#            howard    jack\n\n\n\n19.1.4 Document databases - e.g. MongoDB\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#     (b) MongoDb is an example of Database Management software that stores information\n#         in \"JSON\" notation. We will explore more about JSON later in the semester.\n#         However as an example, the above information could be represented in a JSON\n#          file as shown below:\n#\n#           [\n#             {\n#               \"name\" : \"annie\",\n#               \"friends\" : [ \"sam\" ]\n#             },\n#             {\n#               \"name\" : \"jack\",\n#               \"friends\" : [ \"annie\" , \"mac\" , \"doug\" , \"harry\" ]\n#             },\n#             {\n#               \"name\" : \"howard\",\n#               \"friends\" : [ \"jack\" ]\n#             },\n#             {\n#               \"name\" : \"sam\",\n#               \"friends\" : [ ]\n#             },\n#             {\n#               \"name\" : \"mac\",\n#               \"friends\" : [ ]\n#             },\n#             {\n#               \"name\" : \"harry\",\n#               \"friends\" : [ ]\n#             },\n#             {\n#               \"name\" : \"doug\",\n#               \"friends\" : [ ]\n#             }\n#           ]\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>\"databases\" and \"database management systems\"</span>"
    ]
  },
  {
    "objectID": "sql0014-theBooksDatabase-v001.html",
    "href": "sql0014-theBooksDatabase-v001.html",
    "title": "20  Get the data - “books database” and other tables",
    "section": "",
    "text": "20.1 Download all of the files\nDownload the files by clicking on the links below. To load the various collections of data into R see the instructions in the sections below.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Get the data - \"books database\" and other tables</span>"
    ]
  },
  {
    "objectID": "sql0014-theBooksDatabase-v001.html#download-all-of-the-files",
    "href": "sql0014-theBooksDatabase-v001.html#download-all-of-the-files",
    "title": "20  Get the data - “books database” and other tables",
    "section": "",
    "text": "The following file contains the grades table:\n\ngrades.csv\n\nThe following file contains several tables of data\n(customers, orders, movies, north_american_cities, boxOffice, buildings, employees)\n\nsqlbolt_tables-v007.RData\n\nThe following files are all associated with the “Books database”:\n\nbooksDatabase description and Questions\nThis file contains a description of the database as well as a discussion of different concepts related to databases in general. You should use this file as a tutorial about the books database. The end of this file contains many questions/answers to test your knowledge of SQL.\nThe following are the files that you can use to import the data for the database into R.\n\ntitles.csv\nauthors.csv\npublishers.csv\ntitle_authors.csv\nroyalties",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Get the data - \"books database\" and other tables</span>"
    ]
  },
  {
    "objectID": "sql0014-theBooksDatabase-v001.html#prepare-to-import-the-data",
    "href": "sql0014-theBooksDatabase-v001.html#prepare-to-import-the-data",
    "title": "20  Get the data - “books database” and other tables",
    "section": "20.2 Prepare to import the data",
    "text": "20.2 Prepare to import the data\nIn order to read the data into R and to access the data using SQL, we will need to load the R packages “readr” and “sqldf”. We do so with the following commands:\n\nif(!require(readr)){install.packages(\"readr\");require(readr);}\nif(!require(sqldf)){install.packages(\"sqldf\");require(sqldf);}\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Get the data - \"books database\" and other tables</span>"
    ]
  },
  {
    "objectID": "sql0014-theBooksDatabase-v001.html#import-the-data-grades",
    "href": "sql0014-theBooksDatabase-v001.html#import-the-data-grades",
    "title": "20  Get the data - “books database” and other tables",
    "section": "20.3 import the data: grades",
    "text": "20.3 import the data: grades\ngrades.csv is a .csv file that contains information about students and their grades. You can read the contents of the file into R with the read.csv function as shown below.\n\ngrades = read.csv(\"grades.csv\")\n\nOnce you’ve done so, you can display the data:\n\nsqldf(\"select * from grades\")\n\nError in sqldf(\"select * from grades\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Get the data - \"books database\" and other tables</span>"
    ]
  },
  {
    "objectID": "sql0014-theBooksDatabase-v001.html#import-the-data-customers-orders-movies-north_american_cities-etc",
    "href": "sql0014-theBooksDatabase-v001.html#import-the-data-customers-orders-movies-north_american_cities-etc",
    "title": "20  Get the data - “books database” and other tables",
    "section": "20.4 import the data: customers, orders, movies, north_american_cities, etc",
    "text": "20.4 import the data: customers, orders, movies, north_american_cities, etc\nThe file sqlbolt_tables-v007.RData contains the following different collections of information:\n\ncustomers\norders\nmovies\nnorth_american_cities\nas well as some others (boxOffice, buildings, employees)\n\nUse the load function as shown below to load the data into R.\n\nload(\"sqlbolt_tables-v007.RData\")\n\nBelow are the contents of these tables:\n\nsqldf(\"select * from grades\")\n\nError in sqldf(\"select * from grades\"): could not find function \"sqldf\"\n\nsqldf(\"select * from movies\")\n\nError in sqldf(\"select * from movies\"): could not find function \"sqldf\"\n\nsqldf(\"select * from orders\")\n\nError in sqldf(\"select * from orders\"): could not find function \"sqldf\"\n\nsqldf(\"select * from customers\")\n\nError in sqldf(\"select * from customers\"): could not find function \"sqldf\"\n\nsqldf(\"select * from north_american_cities\")\n\nError in sqldf(\"select * from north_american_cities\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Get the data - \"books database\" and other tables</span>"
    ]
  },
  {
    "objectID": "sql0014-theBooksDatabase-v001.html#import-the-data-books-database",
    "href": "sql0014-theBooksDatabase-v001.html#import-the-data-books-database",
    "title": "20  Get the data - “books database” and other tables",
    "section": "20.5 import the data: “books database”",
    "text": "20.5 import the data: “books database”\nThe “books database” is a collection of several relational database tables. The links to download the files for this database are located at the top of this webpage.\nPay special attention to the file booksDatabase description and Questions which contains a description of the database as well as a discussion of different concepts related to databases in general. You should use this file as a tutorial about the books database. The end of this file contains many questions/answers to test your knowledge of SQL.\nOnce you’ve downloaded the various files you can run the following commands to import the data into R.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The books database contains information about various books, authors,\n# publishers, etc.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Read in the data for the books database - see the \ntitles = read_csv(\"data/booksDatabase/titles.csv\", na=\"NULL\", show_col_types=FALSE)\nauthors = read_csv(\"data/booksDatabase/authors.csv\", na=\"NULL\", show_col_types=FALSE)\npublishers = read_csv(\"data/booksDatabase/publishers.csv\", na=\"NULL\", show_col_types=FALSE)\ntitle_authors = read_csv(\"data/booksDatabase/title_authors.csv\", na=\"NULL\", show_col_types=FALSE)\nroyalties = read_csv(\"data/booksDatabase/royalties.csv\", na=\"NULL\", show_col_types=FALSE)\n\nBelow are the contents of these tables:\n\nsqldf(\"select * from titles\")\n\nError in sqldf(\"select * from titles\"): could not find function \"sqldf\"\n\nsqldf(\"select * from publishers\")\n\nError in sqldf(\"select * from publishers\"): could not find function \"sqldf\"\n\nsqldf(\"select * from title_authors\")\n\nError in sqldf(\"select * from title_authors\"): could not find function \"sqldf\"\n\nsqldf(\"select * from authors\")\n\nError in sqldf(\"select * from authors\"): could not find function \"sqldf\"\n\nsqldf(\"select * from royalties\")\n\nError in sqldf(\"select * from royalties\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Get the data - \"books database\" and other tables</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html",
    "href": "sql0010-introToSql-v023.html",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "",
    "text": "21.1 Web resources for learning SQL\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The following websites contains a basic overview of many SQL \n# commands and concepts. We will be going through the concepts and many \n# of the interactive exercises from these websites\n#\n# https://www.w3schools.com/sql/\n#\n# https://sqlbolt.com/\n#\n# https://www.sqlitetutorial.net/\n#\n# https://mode.com/sql-tutorial/\n#\n# https://sqlzoo.com/\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# See this page \n#\n#   https://sqlbolt.com/lesson/introduction\n# \n# For an overview of :\n#\n# - What is Structured Query Language (SQL) - pronounced \"sequel\"\n# \n# - What is a \"Relational Database\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#what-software-do-i-need-to-use-sql",
    "href": "sql0010-introToSql-v023.html#what-software-do-i-need-to-use-sql",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.2 What software do I need to use SQL?",
    "text": "21.2 What software do I need to use SQL?\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The sqldf package in R.  ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# To use SQL you must have access to software that interacts with \n# a relational database. As mentioned above many such software packages\n# exist, e.g.\n#\n#      - Microsoft SQL Server\n#      - Oracle Relational Database Management System\n#      - MySql\n#      - Postgres\n#      - MariaDb\n#      - many many others\n#\n# In addition many custom software packages exist that use\n# SQL to manipulate relational databases. \n#\n# Many of these software packages tend to be overly complex to install. \n# However, the underlying SQL language that is used by all of these \n# different software packages tends to be very, very similar. \n# \n# For this class we will be using R to learn the basic SQL commands.\n# The sqldf package in R includes the sqldf function that takes a single\n# character value. The value is expected to be a valid SQL command. \n# Instead of referring to database \"tables\" the sqldf function interprets\n# database table names found in the commands as referring to R dataframes.\n# This makes sense since R dataframes are very similar in structure to \n# relational database tables.\n#\n# The version of SQL that is used by default with the sqldf package\n# is the \"sqlite\" version. You can search online for more information\n# about sqlite if you want to understand more about the specifics \n# of this \"flavor\" of SQL. The following website is a good place to\n# start: https://www.sqlitetutorial.net/\n#\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n21.2.1 The sqldf R package\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Using the sqldf R package ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# SQL is NOT an \"R\" concept ... however we can use SQL in R via \n# the sqldf package.\n#\n# The \"sqldf\" package in R allows you to use the sqldf() function\n# to run sql statements using R dataframes instead of database tables.\n# We will be using this package to introduce the first sql commands\n# we will learn. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# install and load (i.e. require) the sqldf package \n\nif(!require(sqldf)){install.packages(\"sqldf\");require(sqldf);}\n\nLoading required package: sqldf\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, : there is no package called 'sqldf'\n\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#data-for-this-part-of-the-tutorial",
    "href": "sql0010-introToSql-v023.html#data-for-this-part-of-the-tutorial",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.3 data for this part of the tutorial",
    "text": "21.3 data for this part of the tutorial\nYou can download the data for this tutorial from the following files.\n\ngrades.csv This is a .csv file. You can read the contents of the file into R with the read.csv function as shown below.\nsqlbolt_tables-v007.RData This is a .RData file. You can read the contents of the file into R with the load function as shown below.\n\nYou can load these tables into your R session with the following commands.\n\ngrades = read.csv(\"grades.csv\")\nload(\"sqlbolt_tables-v007.RData\")\n\nBelow are the contents of these tables:\n\n# Tables that we will be using in this presentation.\n\nsqldf(\"select * from grades\")\n\nError in sqldf(\"select * from grades\"): could not find function \"sqldf\"\n\nsqldf(\"select * from movies\")\n\nError in sqldf(\"select * from movies\"): could not find function \"sqldf\"\n\nsqldf(\"select * from orders\")\n\nError in sqldf(\"select * from orders\"): could not find function \"sqldf\"\n\nsqldf(\"select * from customers\")\n\nError in sqldf(\"select * from customers\"): could not find function \"sqldf\"\n\nsqldf(\"select * from north_american_cities\")\n\nError in sqldf(\"select * from north_american_cities\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#sql-select-statement",
    "href": "sql0010-introToSql-v023.html#sql-select-statement",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.4 SQL SELECT statement",
    "text": "21.4 SQL SELECT statement\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# SQL select statement                                                     ####\n#\n# The select statement is used to retrieve information from a relational\n# database table (or in our case, from an R dataframe). The select statement\n# has several \"clauses\". The following are the allowed clauses. The ... after\n# each clause name represents additional text that needs to be typed. We will\n# learn how to use each of these different clauses below.\n# \n# The following are the clauses of a SQL select statement:\n#\n#     select ...\n#     from ...\n#     where ...\n#     group by ..\n#     having ...\n#     order by ..\n#     limit ...        (NOTE: the limit clause is found in many SQL implementations but is not standard)\n#\n#\n# NOTES: \n#\n# 1. All of the clauses are optional, except for the select clause.\n#\n# 2. The clauses that appear in a particular select statement must be \n#    in the order shown above. \n#\n# 3. The limit clause is not a standard part of SQL but is commonly used in many flavors\n#    of the SQL language.\n#\n# 4. According to the ANSI SQL standard, SQL is NOT case sensitive.\n#    In other words you can type \"SELECT ...\" or \"select ...\". \n#\n#    Often, programmers will capitalize the clause names in select statements however,\n#    this is not required.\n#\n#    Some SQL products do make SQL case sensitive. This is especially true\n#    when it comes to names of tables and names of columns in the tables.\n#\n#    The sqldf package that we will be using is case-insensitve (i.e. case does\n#    NOT matter) for everything EXCEPT for table names (i.e. dataframe names).\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#how-to-use-the-r-sqldf-function",
    "href": "sql0010-introToSql-v023.html#how-to-use-the-r-sqldf-function",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.5 How to use the R sqldf() function",
    "text": "21.5 How to use the R sqldf() function\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The sqldf function accepts a single argument that is expected to \n# be a SQL SELECT command. The table names in the SELECT command are expected to \n# be R dataframes.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# See help info about the sqldf package\nhelp(package=\"sqldf\")\n\nError in find.package(pkgName, lib.loc, verbose = verbose): there is no package called 'sqldf'\n\n# See help about the sqldf function that is part of the sqldf package\n?sqldf",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#intro-to-the-sql-select-command",
    "href": "sql0010-introToSql-v023.html#intro-to-the-sql-select-command",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.6 Intro to the SQL SELECT command",
    "text": "21.6 Intro to the SQL SELECT command\n\n# select clause specifies which columns you'd like to \n# see in the results.\n\nsqldf(\"select student, test1, test2 \n      from grades\")\n\nError in sqldf(\"select student, test1, test2 \\n      from grades\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#select-from-..",
    "href": "sql0010-introToSql-v023.html#select-from-..",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.7 SELECT * FROM …..",
    "text": "21.7 SELECT * FROM …..\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# SELECT * FROM ....\n#\n# You can type * instead of the column names to get all of the columns.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select * from grades\")   # display the entire grades table\n\nError in sqldf(\"select * from grades\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#capturing-the-output-of-sqldf-in-r",
    "href": "sql0010-introToSql-v023.html#capturing-the-output-of-sqldf-in-r",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.8 capturing the output of sqldf in R",
    "text": "21.8 capturing the output of sqldf in R\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The output of sqldf is another dataframe   ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# In a relational database there is usually a way to \n# capture the output of a select statement in a different table\n# however, the actual mechanism is not standard. MANY sql database\n# software products use the \"into\" clause of the select statement\n# to do so. I am not going to talk about that here because that\n# really depends on the exact sql product you are using.\n#\n# In R, when using the sqldf function, you can capture the output of sqldf\n# in another variable. This simply creates a new R dataframe (which in sqldf\n# is analogous to a database table).\n#\n# Remember though that the actual sqldf() function in R is NOT technically \n# part of the SQL language. It is simply how we can use SQL commands to \n# manipulate R dataframes.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Example: Capture the output of the sql command in a new dataframe\n\njustTest1 = sqldf(\"select student, test1, test2\n                   from grades\")\n\nError in sqldf(\"select student, test1, test2\\n                   from grades\"): could not find function \"sqldf\"\n\n# Here is the original table\nsqldf(\"select * from grades\")\n\nError in sqldf(\"select * from grades\"): could not find function \"sqldf\"\n\n# Here is the new table\nsqldf(\"select * from justTest1\")\n\nError in sqldf(\"select * from justTest1\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#case-sensitivity-in-sql",
    "href": "sql0010-introToSql-v023.html#case-sensitivity-in-sql",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.9 case-sensitivity in SQL",
    "text": "21.9 case-sensitivity in SQL\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# A note about case-sensitivity ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# NOTE: as mentioned above, sqldf is case-INsensitive regarding parts of the\n# command OTHER THAN the table names (i.e. the dataframe names).\n# To demonstrate, the following will produce the same results as the \n# command above.\n\n# same results as above\nsqldf(\"SELECT STUDENT, TEST1, TEST2   \n      FROM grades\")\n\nError in sqldf(\"SELECT STUDENT, TEST1, TEST2   \\n      FROM grades\"): could not find function \"sqldf\"\n\n# However, the following command will NOT work since there is no variable\n# named GRADES (the name is grades)\n\n# ERROR - should be \"grades\", not \"GRADES\"\n\nsqldf(\"SELECT STUDENT, TEST1, TEST2    \n       FROM GRADES\")                      # Error: no such table: GRADES\n\nError in sqldf(\"SELECT STUDENT, TEST1, TEST2    \\n       FROM GRADES\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#order-by",
    "href": "sql0010-introToSql-v023.html#order-by",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.10 order by",
    "text": "21.10 order by\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# ORDER BY                                                     ####\n#\n# The ORDER BY clause allows you to specify the order that\n# the rows should appear in the results.\n# Numbers are ordered numerically.\n# Character data is ordered alphabetically.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# Order by test1\nsqldf(\"select student, year, test1, test2\n      from grades\n      order by test1\")\n\nError in sqldf(\"select student, year, test1, test2\\n      from grades\\n      order by test1\"): could not find function \"sqldf\"\n\n# Order by student\nsqldf(\"select student, year, test1, test2\n      from grades\n      order by student\")\n\nError in sqldf(\"select student, year, test1, test2\\n      from grades\\n      order by student\"): could not find function \"sqldf\"\n\n# Order by year\nsqldf(\"select student, year, test1, test2\n      from grades\n      order by year\")\n\nError in sqldf(\"select student, year, test1, test2\\n      from grades\\n      order by year\"): could not find function \"sqldf\"\n\n#..........................................................................\n# You can specify asc to indicate \"ascending\" order  (this is the default)\n#\n# You can specify desc to indicate \"descending\" order\n#..........................................................................\n\n# specify asc for order (i.e. ascending) - this is the default.\n# if you dont' specify asc you will get the same results.\n\nsqldf(\"select student, year, test1, test2\n      from grades\n      order by test1 asc\")\n\nError in sqldf(\"select student, year, test1, test2\\n      from grades\\n      order by test1 asc\"): could not find function \"sqldf\"\n\n# reversed - order is descending, ie. desc\nsqldf(\"select student, year, test1, test2\n      from grades\n      order by test1 desc\")\n\nError in sqldf(\"select student, year, test1, test2\\n      from grades\\n      order by test1 desc\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# You can specify more than one column in the order by clause\n# The 2nd specified column will only have an effect for rows \n# that have the same value in the first specified column.\n#\n# Notice that there is a separate asc or desc indicator\n# for each of the columns in the order by clause\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#.............................\n# ordering by a single column\n#.............................\n\n# order the data in increasing order of test1 value\n# Notice that the year values are NOT in order\n\nsqldf(\"select student, year, test1\n      from grades\n      order by test1 asc\")\n\nError in sqldf(\"select student, year, test1\\n      from grades\\n      order by test1 asc\"): could not find function \"sqldf\"\n\n# order the data in increasing order of year value (alphabetical order)\n# Notice that the test values are NOT in order\n\nsqldf(\"select student, year, test1\n      from grades\n      order by year asc\")\n\nError in sqldf(\"select student, year, test1\\n      from grades\\n      order by year asc\"): could not find function \"sqldf\"\n\n#..................................................\n# order the data by two different columns\n#..................................................\n\n# Order the data alphabetically by year.\n# For all of the rows for a particular year, sort the test1 values\n# in ascending numeric order.\n\nsqldf(\"select student, year, test1, test2\n      from grades\n      order by year asc, test1 asc\")\n\nError in sqldf(\"select student, year, test1, test2\\n      from grades\\n      order by year asc, test1 asc\"): could not find function \"sqldf\"\n\n# Order the data by alphabetically by year.\n# For all of the rows for a particular year, sort the test1 values\n# in descending numeric order.\n\nsqldf(\"select student, year, test1, test2\n      from grades\n      order by year asc, test1 desc\")\n\nError in sqldf(\"select student, year, test1, test2\\n      from grades\\n      order by year asc, test1 desc\"): could not find function \"sqldf\"\n\n# Order the data by test1.\n# For all the rows that have the same value for test1 sort the rows by test2\n\n\nsqldf(\"select student, test1, test2\n      from grades\n      order by test1 desc, test2 desc\")\n\nError in sqldf(\"select student, test1, test2\\n      from grades\\n      order by test1 desc, test2 desc\"): could not find function \"sqldf\"\n\n# Show the rows in descending order of the test1 grades.\n# If several students got the same grade on test1 then show \n# those rows in alphabetical order of the student names.\n\nsqldf(\"select student, test1, test2\n      from grades\n      order by test1 desc, student asc\")\n\nError in sqldf(\"select student, test1, test2\\n      from grades\\n      order by test1 desc, student asc\"): could not find function \"sqldf\"\n\n#..................................................\n# order the data by three different columns\n#..................................................\n\n# Order all of the rows by year \n#\n# among the rows that have the same year\n# order within those rows by test1\n#\n# among the rows that have the same year and test1 values\n# order within those rows by test2\n\nsqldf(\"select student, year, test1, test2\n      from grades\n      order by year, test1 desc, test2 desc\")\n\nError in sqldf(\"select student, year, test1, test2\\n      from grades\\n      order by year, test1 desc, test2 desc\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#limit-clause",
    "href": "sql0010-introToSql-v023.html#limit-clause",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.11 limit clause",
    "text": "21.11 limit clause\n\n###############################################################.\n# LIMIT &lt;M&gt;       and     LIMIT &lt;M&gt; OFFSET &lt;N&gt;\n###############################################################.\n#\n# The LIMIT clause must come at the very end of the SQL \n# statement. You can use it to display only some of the \n# rows that would otherwise have been displayed.\n###############################################################.\n\nFor example:\n\n# Display the first 3 students\nsqldf(\"SELECT *\n      FROM grades\n      ORDER BY student\n      LIMIT 3\")\n\nError in sqldf(\"SELECT *\\n      FROM grades\\n      ORDER BY student\\n      LIMIT 3\"): could not find function \"sqldf\"\n\n\n\n###############################################################.\n# In general the limit clause has two different forms: \n#\n#      &lt;SOME SELECT STATEMENT&gt;\n#      limit M\n#\n# (where M is an integer) results in only the first\n# M rows of data from what would normally have been displayed \n# had the LIMIT clause not been specified.\n# \n#      &lt;SOME SELECT STATEMENT&gt;\n#      limit M offset N\n#\n# (where both M and N are integers) \n# starts the output from the N+1'th row of what would normally \n# have been displayed without the limit clause and then \n# displays the next M rows of data.\n#\n# LIMIT is often used in combination with the ORDER BY clause.\n###############################################################.\n\nFor example:\n\n# Display the first 3 students\nsqldf(\"SELECT *\n      FROM grades\n      ORDER BY student\n      LIMIT 3\")\n\nError in sqldf(\"SELECT *\\n      FROM grades\\n      ORDER BY student\\n      LIMIT 3\"): could not find function \"sqldf\"\n\n# Display the next 3 students\nsqldf(\"SELECT *\n      FROM grades\n      ORDER BY student\n      LIMIT 3 OFFSET 3\")\n\nError in sqldf(\"SELECT *\\n      FROM grades\\n      ORDER BY student\\n      LIMIT 3 OFFSET 3\"): could not find function \"sqldf\"\n\n# Display the next 3 students\nsqldf(\"SELECT *\n      FROM grades\n      ORDER BY student\n      LIMIT 3 OFFSET 6\")\n\nError in sqldf(\"SELECT *\\n      FROM grades\\n      ORDER BY student\\n      LIMIT 3 OFFSET 6\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#using-calculations-in-the-select-clause",
    "href": "sql0010-introToSql-v023.html#using-calculations-in-the-select-clause",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.12 Using calculations in the select clause",
    "text": "21.12 Using calculations in the select clause\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Using calculations in the select clause    ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# You can use math or SQL functions to modify the values\n# that are returned. We will discuss SQL functions later.\n# For now, let's demonstrate the concept using math.\n# See the questions and answers below:\n\n\n#/////////////////////////////////////////////////////////////////////////\n# QUESTION\n#\n# Display the student, test1 and test2 columns from the grades table.\n# In addition, display a column named that contains\n# the values from the test2 column with 10 points added to each number.\n#/////////////////////////////////////////////////////////////////////////\n\n# ANSWER\n\nsqldf(\"select student, test1, test2, test2 + 10 \n      from grades\")\n\nError in sqldf(\"select student, test1, test2, test2 + 10 \\n      from grades\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#renaming-columns",
    "href": "sql0010-introToSql-v023.html#renaming-columns",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.13 Renaming columns",
    "text": "21.13 Renaming columns\n\n#/////////////////////////////////////////////////////////////////////////\n# QUESTION\n#\n# Answer the same question, but this time change the name of the new\n# column to \"test2_curved\".\n#/////////////////////////////////////////////////////////////////////////\n\n# ANSWER\n\n# Use AS to change the name of the column in the output\n\nsqldf(\"select student, test1, test2, test2 + 10 as test2_curved\n      from grades\")\n\nError in sqldf(\"select student, test1, test2, test2 + 10 as test2_curved\\n      from grades\"): could not find function \"sqldf\"\n\n# You don't actually need to write \"AS\" \n\nsqldf(\"select student, test1, test2, test2 + 10 test2_curved\n      from grades\")\n\nError in sqldf(\"select student, test1, test2, test2 + 10 test2_curved\\n      from grades\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#quoting-column-names-that-contain-spaces-or-other-special-characters",
    "href": "sql0010-introToSql-v023.html#quoting-column-names-that-contain-spaces-or-other-special-characters",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.14 ‘Quoting’ column names that contain spaces (or other special characters)",
    "text": "21.14 ‘Quoting’ column names that contain spaces (or other special characters)\nIn general, column names and table names should only contain letters and numbers. If the name of a column or a table needs to contain spaces or other “special characters” (e.g. !@#$%^&*()_+~~ etc.) you need to ‘quote’ the name using ‘apostrophes’ or “quotes”. See the following example which contains a space in the new column name.\n\n# You must 'quote column names that contain spaces' \n\nsqldf(\"select student, test1, test2, test2 + 10 'test2 curved'\n      from grades\")\n\nError in sqldf(\"select student, test1, test2, test2 + 10 'test2 curved'\\n      from grades\"): could not find function \"sqldf\"\n\n\nNote that in the SQLite dialect of SQL (which is what is being used in R with sqldf) you can use ‘apostrophes’ in place of quotes. We used ‘apostrophes’ instead of “quotes” to quote the new column name to avoid issues that would arise if we used “quotes” since we are already using “quotes” to surround the entire SQL statement. See the next section for more info.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#single-quotes-vs-double-quotes",
    "href": "sql0010-introToSql-v023.html#single-quotes-vs-double-quotes",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.15 ‘single quotes’ vs “double quotes”",
    "text": "21.15 ‘single quotes’ vs “double quotes”\nIn many areas of technology, ‘apostrophes’ are used to ‘quote’ text instead of “quotation marks”. Apostrophes are used in this way, are referred to as ‘single quotes’ whereas quotation marks are referred to as “double quotes” (since an apostophe has one short line while a single quotation mark is comprised of two short lines).\nIn SQL, there are two different situations where something needs to be quoted. One situation is as shown above to create column headings that contain spaces or special characters. Another situation is where you want to include some literal text (see the description of “concatenation” below).\nIn this presentation we are using ‘single quotes’ for most purposes inside our SQL statements. This is because SQLite (i.e. the dialect of SQL we are using here) allows for the use of either ‘single quotes’ or “double quotes” wherever you need to quote something. Using ‘single quotes’ allows us to sidestep issues that would arise with “double quotes”. Using double quotes inside the SQL statement would interfere with the “double quotes” that we are using to “quote” the entire sql statement in our call to sqldf(” … “). Other SQL envirnoments that do not rely on sqldf() do not have this issue.\nIt should be noted though that the ANSI SQL standard, calls for using double quotes for column names (as in the example above) and for using single quotes to quote textual values (as in the concatenation example below).\n(see https://www.googlecloudcommunity.com/gc/Technical-Tips-Tricks/In-SQL-do-I-use-double-quotes-or-single-quotes-for-string/ta-p/584590)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# 'single quotes' (ie. 'apostrophes')   vs     \"double quotes\" (ie. \"quotes\")  ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Explicit textual values need to be 'quoted'.\n#\n# Standard SQL uses single quotes for quoting values.\n#\n# Many sql software packages allow for \"double quotes\" however, that is not \n# officially part of the standard.\n#\n# The sqlite dialect of SQL (which is the default dialect used by sqldf)\n# DOES recognize \"double quotes\" too. However, we will try to stick to \n# 'single quotes' in order to adhere to the standard SQL notation.\n#\n# The following example combines the id and the student name into a single\n# value with a dash (i.e. - ) between them. Notice the 'single quotes' around\n# the dash.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#concatenation-abc-def-is-abcdef",
    "href": "sql0010-introToSql-v023.html#concatenation-abc-def-is-abcdef",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.16 Concatenation: ‘abc’ || ‘def’ is ‘abcdef’",
    "text": "21.16 Concatenation: ‘abc’ || ‘def’ is ‘abcdef’\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# To \"concatenate\" two values means to \"paste\" them together \n# into a single character value.\n# ANSI SQL defines the  || as the \"concatenation\" operator.\n# This is similar to the & operator in Excel.\n#\n# Sqlite (which is used by R's sqldf package) uses the ANSI standard || operator.\n#\n# See the examples below.\n#\n# NOTE: Some other database software products use non-standard \n#       operators for concatenation. For example:\n#\n#   * MySql does not have a concatenation operator. MySql uses || for logical or. \n#     Rather, it uses the function, concat(a, b), to concatenate a with b.\n#\n#   * Microsoft SQL Server uses + for concatenation.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n#///////////////////////////////////////////////////////////////\n# QUESTION\n#\n# Show a column named id_student that contains the values from the \n# the id and student columns concatenated together. Also show the \n# test1, test2 and test3 columns.\n#///////////////////////////////////////////////////////////////\n\n# ANSWER \n\nsqldf(\"select id || student as id_student, test1, test2, test3\n      from grades\")\n\nError in sqldf(\"select id || student as id_student, test1, test2, test3\\n      from grades\"): could not find function \"sqldf\"\n\n\n\n#///////////////////////////////////////////////////////////////\n# QUESTION\n#\n# Modify the answer to the previous question so that the\n# \"id_student\" column contains a dash between the \n# id and the name of the student.\n#///////////////////////////////////////////////////////////////\n\n# ANSWER:\n# \n# You need to use 'quotes' around the '-' dash.\n# First concatenate the id with '-' (don't forget the 'single quotes').\n# Then concatenate the student's name.\n\nsqldf(\"select id || '-' || student as id_student, test1, test2, test3\n      from grades\")\n\nError in sqldf(\"select id || '-' || student as id_student, test1, test2, test3\\n      from grades\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#rules-for-naming-tables-and-columns",
    "href": "sql0010-introToSql-v023.html#rules-for-naming-tables-and-columns",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.17 Rules for naming tables and columns",
    "text": "21.17 Rules for naming tables and columns\nNOTE:\n\n“IDS1020-Intro to IDS” students can ignore this section.\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Rules for naming tables and columns:\n#\n# What happens if you use non-standard characters in the names.\n#\n#   - ANSI standard SQL - use \"double quotes\" for non-standard column or\n#     table names ( NOT 'single quotes' )\n#\n#   - some other flavors of SQL may use other symbols for this purpose.\n#     For example:\n#       o Microsoft Access uses [square brackets] and \n#       o MySql uses `grave accent` characters (AKA `backticks`)\n#         (https://en.wikipedia.org/wiki/Grave_accent)\n#     \n#   - sqlite (i.e. the default version of SQL for sqldf) allows all of the \n#     above, i.e. \"double quotes\", `back ticks` and [square brackets]\n#     to surround non-standard names. However, it is best to use \n#     \"double quotes\" as that is the ANSI standard.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Every version of SQL has its own rules for which characters are allowed\n# to be used in table names and column names. To be safe that your code will work\n# on any version of SQL the best bet is to stick to the following rules for \n# both table names and for column names:\n# \n#   1. only use letters, numbers and underscores\n#   2. start the name with a letter\n#\n# However, many SQL versions allow for non-standard characters to be included\n# in a table name or column name. However, if you use a non-standard character\n# then you must 'quote' the name of the table or name of the column\n# in SQL commands using the quoting rules provided by the version of SQL\n# you are using. When using sqldf, if you use a non-standard character \n# (e.g. a period, a space, etc) then you should surround the name of the \n# table or column with \"double quotes\" (`backticks` and [square brackets] also\n# work but \"double quotes\" are preferred as that is the ANSI standard).\n# You cannot use 'single quotes' for this purpose.\n#\n# To demonstrate we can use the iris dataframe that is built into R.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n21.17.1 WARNING: In SQLite, you must use “double quotes” for non standard table or column names.\nNOTE:\n\n“IDS1020-Intro to IDS” students can ignore this section.\n“IDS2460-Data Management” you should be aware of the following issue.\n\nThis doesn’t come up too often but if you are using sqldf to work with R dataframes you should be aware of the following issue. R dataframes often use periods in the column names. This is non-standard for SQL.\n\n# Show the first 10 rows of the iris dataframe that comes built into R.\nhead(iris,10)\n\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1           5.1         3.5          1.4         0.2  setosa\n2           4.9         3.0          1.4         0.2  setosa\n3           4.7         3.2          1.3         0.2  setosa\n4           4.6         3.1          1.5         0.2  setosa\n5           5.0         3.6          1.4         0.2  setosa\n6           5.4         3.9          1.7         0.4  setosa\n7           4.6         3.4          1.4         0.3  setosa\n8           5.0         3.4          1.5         0.2  setosa\n9           4.4         2.9          1.4         0.2  setosa\n10          4.9         3.1          1.5         0.1  setosa\n\n#//////////////////////////////////////////////////////////////////////////\n# QUESTION\n#\n# Use sqldf to display just the Sepal.Length, Sepal.Width and Species columns \n# from the \"iris\" dataframe.\n#//////////////////////////////////////////////////////////////////////////\n\n\n# ANSWER\n#\n# This dataframe has column names that contain periods. A period\n# is NOT a standard character for table and column names. Therefore\n# we must use \"double quotes\" or `back ticks` to quote these column names.\n#\n# This does NOT work because of the periods in the column names\n\n# sqldf(\"select Sepal.Length, Sepal.Width, Species \n#         from iris\")                              # ERROR: no such column Sepal.Length\n\n# This works - i.e. use \"double quotes\". Note that we used \n# 'single quotes' to quote the entire select statement.\nsqldf('select \"Sepal.Length\", \"Sepal.Width\", Species from iris')\n\nError in sqldf(\"select \\\"Sepal.Length\\\", \\\"Sepal.Width\\\", Species from iris\"): could not find function \"sqldf\"\n\n# Same thing but we used \"double quotes\" to quote the entire select statement.\n# Therefore we used \\\" for every double quote that is inside the command.\nsqldf(\"select \\\"Sepal.Length\\\", \\\"Sepal.Width\\\", Species from iris\")\n\nError in sqldf(\"select \\\"Sepal.Length\\\", \\\"Sepal.Width\\\", Species from iris\"): could not find function \"sqldf\"\n\n# This also works - use `back ticks`\nsqldf('select `Sepal.Length`, `Sepal.Width`, Species from iris')\n\nError in sqldf(\"select `Sepal.Length`, `Sepal.Width`, Species from iris\"): could not find function \"sqldf\"\n\n# *** WARNING!!! ***\n#\n# BE CAREFUL - don't use 'single quotes' here. Single quotes will NOT\n# work to quote column names or table names.\n#\n# The following will simply display the words 'Sepal.Length' and 'Sepal.Width'\n# for every row in the output.\nsqldf(\"select 'Sepal.Length', 'Sepal.Width', Species from iris\")\n\nError in sqldf(\"select 'Sepal.Length', 'Sepal.Width', Species from iris\"): could not find function \"sqldf\"\n\n\n\n\n21.17.2 Aside: using R “raw strings” (only for those learning R)\nNOTE:\n\n“IDS1020-Intro to IDS” students can ignore this section.\n\nIf you are learning SQL but are not interested in learning more about R right now you can safely skip this section.\n\n# RAW STRINGS in R  - i.e.    r\"( ... )\"\n#\n# You can also use a \"raw string\" - introduced in R 4.0\n# Any string (ie. character value) that appears between r\"( .... )\"\n# is quoted as exactly the value that appears between the r\"( and )\"\n# symbols. For detailed info about R's new raw string feature see this page:\n#\n#    https://r4ds.hadley.nz/strings.html#sec-raw-strings\n#\n# You can use an R \"raw string\" to quote anything without\n# resorting to backslahes or other techniques.\n#\n# To create a \"raw string\" in R place the text that you want to quote\n# between    r\"(      and      )\"\n# The r stands for raw, not \"R\". \n# The text being quoted can safely include any characters you like.\n# For example, the following \"strangeValue\" gets displayed just fine.\n\nstrangeValue = r\"( Backslash: \\  Quote: \"  Apostrophe: ' )\"\n\ncat(strangeValue)    # Backslash: \\  Quote: \"  Apostrophe: ' \n\n Backslash: \\  Quote: \"  Apostrophe: ' \n\n# You can use r\"(raw strings)\" to very simply quote any SQL command\n# that you want to pass to sqldf, regardless of what is in the SQL.\n\nsqldf( r\"(select \"Sepal.Length\", \"Sepal.Width\", Species from iris)\" )\n\nError in sqldf(\"select \\\"Sepal.Length\\\", \\\"Sepal.Width\\\", Species from iris\"): could not find function \"sqldf\"\n\n# NOTE - R's new \"raw string\" syntax is very useful for \n# writing regular expression patterns in R\n# For example:\n#\n#   without raw strings - you NEED \\\\double-backslashes\n\npattern = \"\\\\d+\\\\.\\\\d+\" \ncat(pattern)   # \\d+\\.\\d+\n\n\\d+\\.\\d+\n\n#   with raw strings - you DON'T need the \\\\double-backslashes\npattern = r\"(\\d+\\.\\d)\"      \ncat(pattern)   # \\d+\\.\\d+\n\n\\d+\\.\\d\n\ncharNums = c(\"one\", \"1.593\", \"278.123\", \"999\")\ngrep(pattern, charNums, value=TRUE)\n\n[1] \"1.593\"   \"278.123\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#where-clause",
    "href": "sql0010-introToSql-v023.html#where-clause",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.18 where clause",
    "text": "21.18 where clause\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# where clause   ####\n#\n# The where clause allows you to specify the rows that you want.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# The where clause include a logical expression. The expression is evaluated\n# separately for each row in the table (i.e. dataframe in our case). \n# The data from the row is substituted into the logical expression. If the\n# logical expression results in TRUE then information from the row becomes\n# encorporated into the output. If the logical expression results in FALSE \n# for the row then the row does not appear in the output.\n\n# Only the rows that have a TRUE result are displayed\n\nsqldf(\"select student, test1, test2 \n      from grades\n      where test1 &gt; test2\")\n\nError in sqldf(\"select student, test1, test2 \\n      from grades\\n      where test1 &gt; test2\"): could not find function \"sqldf\"\n\n# You can get all of the columns by using the * instead of the column names\nsqldf(\"select *\n      from grades\n      where test1 &gt; test2\")\n\nError in sqldf(\"select *\\n      from grades\\n      where test1 &gt; test2\"): could not find function \"sqldf\"\n\nsqldf(\"select student, test1, test2 \n      from grades\n      where test1 &gt;= test2\")\n\nError in sqldf(\"select student, test1, test2 \\n      from grades\\n      where test1 &gt;= test2\"): could not find function \"sqldf\"\n\nsqldf(\"select student, honors, test1, test2 \n      from grades \n      where honors == TRUE and test1 &lt; 90 and test2 &lt; 90\")\n\nError in sqldf(\"select student, honors, test1, test2 \\n      from grades \\n      where honors == TRUE and test1 &lt; 90 and test2 &lt; 90\"): could not find function \"sqldf\"\n\nsqldf(\"select student, honors, test1, test2 \n      from grades \n      where honors != TRUE and test1 &gt; 90 and test2 &gt; 90\")\n\nError in sqldf(\"select student, honors, test1, test2 \\n      from grades \\n      where honors != TRUE and test1 &gt; 90 and test2 &gt; 90\"): could not find function \"sqldf\"\n\n# NOTE: \n#\n# When using the relational operators &gt;  &lt;   &gt;=   &lt;=\n# with character data, values that would appear earlier in a dictionary\n# are considered \"less than\" values that would appear later in the dictionary.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#sql-operators",
    "href": "sql0010-introToSql-v023.html#sql-operators",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.19 SQL operators",
    "text": "21.19 SQL operators\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n# SQL operators\n#\n# Different flavors of SQL sometimes use different operators.\n# Look up the documentation for your particular flavor of SQL.\n# See the SQLite operators here\n# https://www.tutorialspoint.com/sqlite/sqlite_operators.htm\n# They are summarized below.\n#\n#                        R operator        sqlite operator\n#                        -----------       ---------------\n#\n#   ARITHMETIC OPERATORS\n#   addition                +                 same as R\n#   subtraction             -                 same as R\n#   multiplication          *                 same as R\n#   regular division        /                 /     depends on the type of data\n#   integer division        %/%               /     depends on the type of data\n#   modulus (remainder)     %%                %\n#\n#   LOGICAL OPERATORS\n#   equal to                ==                = or == (they both work)\n#   not equal to            !=                != or &lt;&gt; (they both work)\n#   greater than            &gt;                 same as R\n#   less than               &lt;                 same as R\n#   greater or equal        &gt;=                same as R\n#   less or equal           &lt;=                same as R\n#\n#   logical not             !                 not\n#   logical and             &&                and\n#   logical or              ||                or\n#\n#   CHARACTER OPERATORS\n#   concatenation           paste0(a,b)       a || b\n#\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n#\n#   NOTE - the following operators exist in sqlite but mean different \n#          things than what they mean in R.\n#          We will probably not cover the details of these operators\n#          (unless we have extra time) but you should be aware that\n#          they do NOT do the same thing as in R.\n#\n#                        R operator      sqlite operator\n#                        -----------     ---------------\n#   BITWISE OPERATORS - we will probably not cover these unless we have extra time.\n#\n#   bitwise \"and\"        not avaialble        &\n#   bitwise \"or\"         not avaialble        |\n#   bitwise \"not\"        not avaialble        ~\n#   left shift bits      not avaialble        &lt;&lt;\n#   right shift bits     not avaialble        &gt;&gt;\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#performing-calculations-with-sql",
    "href": "sql0010-introToSql-v023.html#performing-calculations-with-sql",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.20 Performing calculations with SQL",
    "text": "21.20 Performing calculations with SQL\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n# Using SQL to perform calculations  ####\n#\n# In the sqlite flavor of SQL you can perform calculations by simply\n# using SELECT without a FROM clause.\n#\n# Some other versions of SQL (e.g. Oracle) require a FROM clause in every select.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n\n# RESULTS of following query\n#\n#     3+2   23/5    23.0/5\n#       5      4       4.6\n\nsqldf(\"select 3+2, 23/5, 23.0 / 5\")   # 5   4   4.6 (headings show calculations)\n\nError in sqldf(\"select 3+2, 23/5, 23.0 / 5\"): could not find function \"sqldf\"\n\n# Same result but headings show Sum, IntegerDivision, RealDivision\n#\n#     Sum   IntegerDivision   RealDivision\n#       5                 4            4.6\n\nsqldf(\"select 3+2 as Sum, \n      23/5 as IntegerDivision, \n      23.0 / 5 as RealDivision\")   # 5   4   4.6   (same results with differnet headings)\n\nError in sqldf(\"select 3+2 as Sum, \\n      23/5 as IntegerDivision, \\n      23.0 / 5 as RealDivision\"): could not find function \"sqldf\"\n\n# You don't actullay need the word \"as\" but it makes the code more readable.\n# The following will produce the same results as above.\n\nsqldf(\"select 3+2 Sum, \n      23/5 IntegerDivision, \n      23.0 / 5 RealDivision\")   # 5   4   4.6   (same results with differnet headings)\n\nError in sqldf(\"select 3+2 Sum, \\n      23/5 IntegerDivision, \\n      23.0 / 5 RealDivision\"): could not find function \"sqldf\"\n\n# The column heading must only use legal column heading characters.\n# If you want to add non-legal column-heading characters, you can put the\n# column heading in \"double quotes\".\n# The following adds spaces to some of the column headings.\n\nsqldf('select 3+2 \"Sum\", \n      23/5 \"Integer Division\", \n      23.0 / 5 \"Real Division\"')   # 5   4   4.6   (same results with differnet headings)\n\nError in sqldf(\"select 3+2 \\\"Sum\\\", \\n      23/5 \\\"Integer Division\\\", \\n      23.0 / 5 \\\"Real Division\\\"\"): could not find function \"sqldf\"\n\n# If you perform calculations that do not refer to the columns in a table,\n# you will get back the result of the calculation for every row of the table.\n# \n# The following will return multiple rows of the answers, one row for each\n# of the grades table.\n# \n# You generally don't want to do this, which is why we left off the FROM \n# clause in our earlier examples.\n\nsqldf('select 3+2 \"Sum\", \n      23/5 \"Integer Division\", \n      23.0 / 5 \"Real Division\"\n      from grades')                # you probably dont want the from clause here\n\nError in sqldf(\"select 3+2 \\\"Sum\\\", \\n      23/5 \\\"Integer Division\\\", \\n      23.0 / 5 \\\"Real Division\\\"\\n      from grades\"): could not find function \"sqldf\"\n\nsqldf(\"select 3 as curve, student, test1, test1 + 3 as curved_test1 from grades\")\n\nError in sqldf(\"select 3 as curve, student, test1, test1 + 3 as curved_test1 from grades\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#reminder---how-na-works-in-r",
    "href": "sql0010-introToSql-v023.html#reminder---how-na-works-in-r",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.21 Reminder - how NA works in R",
    "text": "21.21 Reminder - how NA works in R\nNOTE:\n\n“IDS1020-Intro to IDS” students can ignore this section.\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Remember how NA works in R  ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANY expression that contains NA results in NA\n\nfranksSalary = 100\ntinasSalary = 200\nnancysSalary = NA\nnedsSalary = NA\n\n# all of the following result in NA\n\nfranksSalary &gt; nancysSalary  # NA\n\n[1] NA\n\nnancysSalary == nedsSalary   # NA\n\n[1] NA\n\nfranksSalary + nancysSalary  # NA\n\n[1] NA\n\n# The only way to test for NA in R is with the is.na function\n\nsalarys = c(100,200,NA,NA) \nsalarys == NA     # NA NA NA NA\n\n[1] NA NA NA NA\n\nis.na(salarys)    # FALSE FALSE TRUE TRUE\n\n[1] FALSE FALSE  TRUE  TRUE\n\n# In R, you can check for non-na values using not operator ( ! )\n\n!is.na(salarys)   # TRUE TRUE FALSE FALSE\n\n[1]  TRUE  TRUE FALSE FALSE\n\n\n\n#..................................................................\n# Remember in R that when you perform any operation with NA\n# the result is NA. For example:\n#\n#    &gt; NA + 10\n#    [1] NA\n#\n#    &gt; NA == NA  \n#    [1] NA\n#\n#    &gt; NA != NA  \n#    [1] NA\n#   \n# SQL has the same approach to NULL values. Any operation with NULL\n# results in NULL.\n#..................................................................",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#null-in-sql",
    "href": "sql0010-introToSql-v023.html#null-in-sql",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.22 NULL in SQL",
    "text": "21.22 NULL in SQL\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# NULL values in SQL  ####\n#\n# In relational database tables, the value NULL is used to record \n# a value that is \"not known\". For example a salary value of NULL\n# is treated as a salary that hasn't been recorded in the database yet. \n# This is very different from a salary of 0 which would be the case if \n# someone is volunteering or donating their time.\n#\n# Note that when using sqldf to run SQL commands in R\n# the data is stored in an R dataframe. Therefore these types of values\n# appear in the dataframe as NA but the SQL statements use the term NULL.\n# In an actual relational database these values would also appear in the \n# table as NULL (not as NA)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#...............................................................\n# Check for values that are NULL in the following way:\n#     \n#     WHERE COLUMN_NAME IS NULL\n#     (see examples below)\n#\n# NOTE: DO NOT USE \"== NULL\". The == operator will NOT work with NULL\n#...............................................................\n\n# show all rows for which the test3 grade is NULL \n# \n# NOTE: Remember that R does not understand NULL, R uses NA.\n#       Remember that SQL understands NULL and does not understand NA.\n#       Since sqldf uses R dataframes, the sqldf function automatically \n#       translates NULL into NA and vice versa when using SQL code to \n#       access data in R dataframes.\n\nsqldf(\"select *\n      from grades\n      where test3 is NULL\")\n\nError in sqldf(\"select *\\n      from grades\\n      where test3 is NULL\"): could not find function \"sqldf\"\n\n# DON'T DO THE FOLLOWING !!! IT DOESN'T WORK!!!\n\nsqldf(\"select *\n      from grades\n      where test3 = NULL\")  # use IS NULL!!!\n\nError in sqldf(\"select *\\n      from grades\\n      where test3 = NULL\"): could not find function \"sqldf\"\n\n#...............................................................\n# Check for values that aren't NULL in the following way:\n#     \n#     WHERE COLUMN_NAME IS NOT NULL\n#     (see examples below)\n#\n# NOTE: DO NOT USE \"!= NULL\". The != operator will NOT work with NULL\n#...............................................................\n\n# show all rows for which the test3 grade is NOT NULL (i.e. isn't NA)\n\nsqldf(\"select *\n      from grades\n      where test3 is NOT NULL\")\n\nError in sqldf(\"select *\\n      from grades\\n      where test3 is NOT NULL\"): could not find function \"sqldf\"\n\n# DON'T DO THE FOLLOWING !!! IT DOESN'T WORK!!!\n\nsqldf(\"select *\n      from grades\n      where test3 != NULL\")   # use IS NOT NULL !!!\n\nError in sqldf(\"select *\\n      from grades\\n      where test3 != NULL\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#practice",
    "href": "sql0010-introToSql-v023.html#practice",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.23 Practice",
    "text": "21.23 Practice\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# QUESTION\n#\n# curve all test3 grades by 10 points (NULLs remain NULL)\n#\n# (remember that since we are using R, the NULL values\n#  appear as NA)\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\nsqldf(\"select student, test3, test3 + 10 as curved_test3\n       from grades\n       order by student\")\n\nError in sqldf(\"select student, test3, test3 + 10 as curved_test3\\n       from grades\\n       order by student\"): could not find function \"sqldf\"\n\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n# QUESTION\n#\n# Show rows where both test2 and test3 are NULL\n# REMEMBER when looking for NULL values: \n#\n#    USE:        value IS NULL      # correct\n#    DON'T use:  value = NULL       # wrong\n#\n#    USE:        value IS NOT NULL  # correct\n#    DON'T use:  value != NULL      # wrong\n# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\nsqldf(\"select student, test1, test2, test3\n       from grades\n       where test2 IS NULL and test3 IS NULL  \n       order by student\")\n\nError in sqldf(\"select student, test1, test2, test3\\n       from grades\\n       where test2 IS NULL and test3 IS NULL  \\n       order by student\"): could not find function \"sqldf\"\n\n# DON'T DO THE FOLLOWING !!! IT DOESN'T WORK!!!\n\nsqldf(\"select student, test1, test2, test3\n       from grades\n       where test2 == NULL and test3 == NULL  \n       order by student\")\n\nError in sqldf(\"select student, test1, test2, test3\\n       from grades\\n       where test2 == NULL and test3 == NULL  \\n       order by student\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#tutorials-sqlbolt.com-and-w3chools.com",
    "href": "sql0010-introToSql-v023.html#tutorials-sqlbolt.com-and-w3chools.com",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.24 Tutorials sqlbolt.com and w3chools.com",
    "text": "21.24 Tutorials sqlbolt.com and w3chools.com\nPlease see the tutorials at the following locations.\n\nhttps://sqlbolt.com/ These pages cover basic SELECT statements. They refer to the following tables\n\nmovies\nnorth_american_cities\n\nhttps://www.w3schools.com/sql/sql_join.asp This page teaches how to work with more than one table. They refer to the following tables\n\ncustomers\norders\n\n\nThe file &lt;sqlbolt_tables-v007.RData&gt; contains the dataframes with the information for each table that are used on these websites. These dataframes can be loaded into R from this file with the following command.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sqlbolt.com    and    https://www.w3schools.com/sql/sql_join.asp    ####\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nload(\"sqlbolt_tables-v007.RData\")\n\nBelow are the contents of these tables:\n\nsqldf(\"select * from movies\")\n\nError in sqldf(\"select * from movies\"): could not find function \"sqldf\"\n\nsqldf(\"select * from orders\")\n\nError in sqldf(\"select * from orders\"): could not find function \"sqldf\"\n\nsqldf(\"select * from customers\")\n\nError in sqldf(\"select * from customers\"): could not find function \"sqldf\"\n\nsqldf(\"select * from north_american_cities\")\n\nError in sqldf(\"select * from north_american_cities\"): could not find function \"sqldf\"\n\n\n\n21.24.1 Practice - select clause\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# https://sqlbolt.com/lesson/select_queries_introduction\n#\n# Concepts:\n#\n#  Select query for a specific columns\n#\n#   SELECT column, another_column, .\n#   FROM mytable;\n#\n#\n#  Select query for all columns\n#   \n#    SELECT * \n#    FROM mytable;\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#https://sqlbolt.com/lesson/select_queries_introduction\n\nmovies  \n\n   id               title       director year length_minutes\n1   1           Toy Story  John Lasseter 1995             81\n2   2        A Bug's Life  John Lasseter 1998             95\n3   3         Toy Story 2  John Lasseter 1999             93\n4   4      Monsters, Inc.    Pete Docter 2001             92\n5   5        Finding Nemo Andrew Stanton 2003            107\n6   6     The Incredibles      Brad Bird 2004            116\n7   7                Cars  John Lasseter 2006            117\n8   8         Ratatouille      Brad Bird 2007            115\n9   9              WALL-E Andrew Stanton 2008            104\n10 10                  Up    Pete Docter 2009            101\n11 11         Toy Story 3    Lee Unkrich 2010            103\n12 12              Cars 2  John Lasseter 2011            120\n13 13               Brave Brenda Chapman 2012            102\n14 14 Monsters University    Dan Scanlon 2013            110\n15 87              WALL-G Brenda Chapman 2042             92\n\n###########################\n#Exercise 1 - Tasks\n###########################\n\n#Find the title of each film\n\nsql = \n  \"select title\n   from movies\"\n\nsql\n\n[1] \"select title\\n   from movies\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n#Find the director of each film\n\nsql = \n  \"select director\n   from movies\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n#Find the title and director of each film\n\nsql = \n  \"select title, director\n   from movies\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n#Find the title and year of each film\n\nsql = \n  \"select title, year\n   from movies\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n#Find all the information about each film\n\nsqldf(\"select *\n       from movies\")\n\nError in sqldf(\"select *\\n       from movies\"): could not find function \"sqldf\"\n\n# The following produces the exact same results as above\n\nsqldf(\"select id, title, director, year, length_minutes\n       from movies\")\n\nError in sqldf(\"select id, title, director, year, length_minutes\\n       from movies\"): could not find function \"sqldf\"\n\n\n\nPractice - ADDITIONAL QUESTIONS (not on sqlbolt.com)\n\n# QUESTION\n# Show the movie name, length_minutes and a third column that you \n# calculate which is the length in hours\n\n# ANSWER\n#\n# when you divide an integer by an integer the result in sql in an integer\n# if you divide a floating point number by an integer or vice versa the \n# result is floating point (i.e. a number that has values after the decimal point)\n\n# This is a good start but the length_hours column will always show up \n# as a whole number - this is NOT what we wanted.\n\nsql = \"select title, length_minutes, length_minutes/60 as length_hours\n       from movies\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Change 60 to 60.0 to produce a \"floating point\" value (i.e. a value\n# that contains numbers after the decimal point)\n\nsql = \"select title, length_minutes, length_minutes/60.0 as length_hours\n       from movies\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# show the length in hours, minutes - eg. 81 minutes show as 2 hours and 21 minutes\n\n# ANSWER\nsql =\n  \"select title, length_minutes, length_minutes / 60 as hours,\n                  length_minutes - 60 * (length_minutes/60) as minutes\n   from movies\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# ANSWER - using sqlite's % operator\nsql =\n  \"select title, length_minutes, length_minutes / 60 as hours,\n                  length_minutes % 60 as minutes\n   from movies\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Note that while it is tempting to refer to hours on line 2 of the following\n# query, R's version of SQL (ie. sqlite) will not allow for this.\n# Some SQL flavors will allow this.\n#\n# The following WILL NOT WORK IN R's VERSION OF SQL\nsql =\n  \"select title, length_minutes, length_minutes / 60 as hours,\n                  length_minutes - 60 * hours as minutes\n   from movies\"\n\n# sqldf(sql)       # ERROR - no such column: hours\n\n\n\n\n21.24.2 Practice - where clause\n\n#-------------------------------------------------------------------------\n# https://sqlbolt.com/lesson/select_queries_with_constraints\n# \n# CONCEPTS\n#\n# Select query with constraints\n# SELECT column, another_column, .\n# FROM mytable\n# WHERE condition\n# AND/OR another_condition\n# AND/OR .;\n# \n# \n# \n# # List of SQL operators (see webpage) \n# Operator  Condition   SQL Example\n# =, !=, &lt; &lt;=, &gt;, &gt;=    Standard numerical operators    col_name != 4\n# BETWEEN . AND .   Number is within range of two values (inclusive)    col_name BETWEEN 1.5 AND 10.5\n# NOT BETWEEN . AND .   Number is not within range of two values (inclusive)    col_name NOT BETWEEN 1 AND 10\n# IN (.)    Number exists in a list     col_name IN (2, 4, 6)\n# NOT IN (.)    Number does not exist in a list     col_name NOT IN (1, 3, 5)\n\n\n\n###########################\n# Exercise 2 - Tasks\n###########################\n \n# Find the movie with a row id of 6\n\nsql = \"\n  select *\n  from movies\n  where id=6\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n###############################################################.\n#  BETWEEN ... AND ...\n#\n#    and \n#\n#  NOT BETWEEN ... AND ...\n###############################################################.\n\n# Find the movies released in the years between 2000 and 2010\n\nsql = \"select * \n       from movies\n       where year &gt;= 2000 and year &lt;= 2010 \"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# you can combine the above where clause with a different select clause:\n# For example:\n\nsql = \"select title, length_minutes, length_minutes / 60 as hours,\n                  length_minutes - 60 * (length_minutes/60) as minutes,\n                  year\n       from movies\n       where year &gt;= 2000 and year &lt;= 2010 \"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# use the BETWEEN ... AND ...\n# to do the same thing\n\nsql = \"select * \n       from movies\n       where year between 2000 and 2010\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Find the movies not released in the years between 2000 and 2010\n\nsql = \"select * \n       from movies\n       where year &lt; 2000 or year &gt; 2010\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# use the NOT BETWEEN ... AND ...\n# to do the same thing\n\nsql = \"select * \n       from movies\n       where year not between 2000 and 2010\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n\n\n\n21.24.3 Practice - limit clause\n\n###############################################################.\n# LIMIT &lt;M&gt;       and     LIMIT &lt;M&gt; OFFSET &lt;N&gt;\n###############################################################.\n#\n# The LIMIT clause must come at the very end of the SQL \n# statement. For example: \n#   \n#      SELECT *\n#      FROM grades\n#      ORDER BY student\n#      LIMIT 3\n# \n# Displayes the first 3 students.\n#\n# In general:\n#\n#      &lt;SOME SELECT STATEMENT&gt;\n#      limit M\n#\n# (where M is an integer) results in only the first\n# M rows of data from what would normally have been displayed \n# had the LIMIT clause not been specified.\n# \n#      &lt;SOME SELECT STATEMENT&gt;\n#      limit M offset N\n#\n# (where both M and N are integers) \n# starts the output from the N+1'th row of what would normally \n# have been displayed without the limit clause and then \n# displays the next M rows of data.\n###############################################################.\n\n\n# Find the first 5 movies and their release year\n\n# We will learn the best way to do this a little later. The\n# answer on the sqlbolt website is not ideal.\n\nsqldf(\"select * \n      from movies\n      order by year\")\n\nError in sqldf(\"select * \\n      from movies\\n      order by year\"): could not find function \"sqldf\"\n\n# The limit clause allows to retrieve the first several values from an \n# ordered query\n\nsqldf(\"select * \n      from movies\n      order by year\n      limit 5\")\n\nError in sqldf(\"select * \\n      from movies\\n      order by year\\n      limit 5\"): could not find function \"sqldf\"\n\n# Get the next 2 movies\n\nsqldf(\"select * \n      from movies\n      order by year\n      limit 2 offset 5\")\n\nError in sqldf(\"select * \\n      from movies\\n      order by year\\n      limit 2 offset 5\"): could not find function \"sqldf\"\n\n# Find all movies that were released in 2000, 2004 or 2008\n\nsql = \n  \"select * \n  from movies\n  where year = 2000 or year = 2004 or year = 2008\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Do this again using the IN operator\n#\n# The IN operators takes a LIST of information\n# A LIST is a set of values in parentheses, separated by commans.\n\nsql = \n  \"select * \n  from movies\n  where year in (2000,2004,2008)\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# show the movies that were released in years other than 2000, 2004, 2008\n\nsql = \n  \"select * \n  from movies\n  where year != 2000 and year != 2004 and year != 2008\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# A student asked if we could change the and's in the previous question\n# to be or's instead. The answer is you can but in addition to \n# changing the and's to or's you must also modify the logical expression\n# in other ways. Specifically, DeMorgan's law describes how to \n# rewrite any logical expression that uses and's and or's into an\n# equivalent expression.\n#\n# DeMorgans law says: to convert a logical expression \n# step 1: negate it twice (ie. use two not's)\n# Step 2: (a) distribute one of the not's over the expression\n#         (b) change the and's to or's \n#         (c) change the or's to and's\nsql = \n  \"select * \n  from movies\n  where not ( year = 2000 or year = 2004 or year = 2008)\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# do this with the \"not in\" operator\n\nsql = \n  \"select * \n  from movies\n  where year not in (2000,2004,2008)\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# warning - the \"in\" operator is followed by a list of values.\n# The list of values is in parentheses.\n#\n# if the values are numbers there are no quotes e.g. (2000,2004,2005)\n#\n# If the values are character values then in SQL you must use\n# 'single quotes' around the different values.\n#\n# See the next question\n\n\n# Write a SQL SELECT statment to show all the movies that\n# were directed by any of the following people:\n#     Pete Docter , Brad Bird, Dan Scanlon\n#\n# (a) Write it using the IN operator\n# (b) write it without using the IN operator\n\n# ANSWER - part (a)\nsql = \"select * \n       from movies\n       where director IN ('Pete Docter', 'Brad Bird', 'Dan Scanlon')\n       order by director\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# ANSWER - part (b) - without the IN operator\nsql = \"select * \n       from movies\n       where director='Pete Docter' or  director='Brad Bird' or director = 'Dan Scanlon'\n       order by director\"\n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n\n\n\n21.24.4 Practice - “like” operator\n\n######################################################################.\n# The \"like\" operator\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The like operator in sql uses a \"pattern\" to match data values\n# This is similar to regular expressions. However, the SQL like \n# operator uses very different meta characters. \n#\n# The two standard metacharacters that are used by the sql like \n# operator in the pattern are:\n#\n#   %    will \"match\" 0 or more characters  (equivalent to .* in regex)\n#\n#   _    i.e. an underscore, will \"match\" exactly one character (equivalent to . in regex)\n#\n# Some DBMS software allows for additional metacharacters in LIKE clauses\n# For example, MySql allows for the following. (sqlite does not)\n#\n#   [abc]  MySQL DBMS software recognizes these \"character classes\" \n#   [a-c]  similar to regular expressions. Not all DBMS software recognizes\n#   [^a-c] these. sqlite does not.\n######################################################################.\n\n\n# exercise 3\n\n# Exercise 3 - Tasks\n# Find all the Toy Story movies\nsql = \"select *\n       from movies\n       where title like 'Toy Story%'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Find all the movies directed by John Lasseter\n\nsql = \"select *\n       from movies\n       where director = 'John Lasseter'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Find all the movies (and director) not directed by John Lasseter\nsql = \"select * \n       from movies \n       where director != 'John Lasseter'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# The following will work but is NOT recommended (no pun intended)\nsql = \"select * \n       from movies \n       where NOT ( director = 'John Lasseter' ) \"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Find all the WALL-* movies\nsql = \"select *\n       from movies\n       where title like 'WALL-_'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\nmovies\n\n   id               title       director year length_minutes\n1   1           Toy Story  John Lasseter 1995             81\n2   2        A Bug's Life  John Lasseter 1998             95\n3   3         Toy Story 2  John Lasseter 1999             93\n4   4      Monsters, Inc.    Pete Docter 2001             92\n5   5        Finding Nemo Andrew Stanton 2003            107\n6   6     The Incredibles      Brad Bird 2004            116\n7   7                Cars  John Lasseter 2006            117\n8   8         Ratatouille      Brad Bird 2007            115\n9   9              WALL-E Andrew Stanton 2008            104\n10 10                  Up    Pete Docter 2009            101\n11 11         Toy Story 3    Lee Unkrich 2010            103\n12 12              Cars 2  John Lasseter 2011            120\n13 13               Brave Brenda Chapman 2012            102\n14 14 Monsters University    Dan Scanlon 2013            110\n15 87              WALL-G Brenda Chapman 2042             92\n\n# QUESTION \n# Show all movies that start with a \"T\" and end with an \"s\"\n\nsql = \"select * \n       from movies\n       where title like 'T%s'\n       order by title\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION \n# Show all movies whose title is exactly 6 charcters (including spaces)\n\nsql = \"select * \n       from movies\n       where title like '______'\n       order by title\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# Show all movies whose title starts with A,B or C\n# and whose title is 10 characters or longer\n\nsql =\"select title\n      from movies\n      where title BETWEEN 'A' AND 'D' and\n            title LIKE '__________%'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# Show all movies whose title starts with A,B or C\n# and whose title is fewer than 10 characters or long\n\nsql =\"select title\n      from movies\n      where title BETWEEN 'A' AND 'D' and\n            title NOT LIKE '__________%'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\nsql=\"select substr(title, 1,1) from movies order by 1\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\nsqldf(\"select * from movies where substr(title,1,1) = 'M'\")\n\nError in sqldf(\"select * from movies where substr(title,1,1) = 'M'\"): could not find function \"sqldf\"\n\nsqldf(\"select * from movies where title &lt; 'D'\")\n\nError in sqldf(\"select * from movies where title &lt; 'D'\"): could not find function \"sqldf\"\n\n\n\n\n21.24.5 Practice - select distinct\n\n################################################################.\n# SELECT DISTINCT ...\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Depending on which values are selected, a SELECT ... statement\n# might return exactly the same row in the output multiple times. \n#\n# To instead, show only one copy of each row in the output,\n# start the statement with  SELECT DISTINCT ... \n# (instead of just SELECT ...)\n#\n# See the examples below.\n################################################################.\n\n\n# The output of the following query includes some rows\n# that are exactly the same as other rows.\n\nsqldf(\"select year, honors, major \n      from grades\n      where honors = TRUE and major = 'IDS'\n      order by year\")\n\nError in sqldf(\"select year, honors, major \\n      from grades\\n      where honors = TRUE and major = 'IDS'\\n      order by year\"): could not find function \"sqldf\"\n\n# The following query is exactly the same as the previous query, except\n# that the following query includes the word DISTINCT at the beginning\n# of the query.\n#\n# This version of the query does not include any duplicated rows in the output.\n\nsqldf(\"select DISTINCT year, honors, major \n      from grades\n      where honors = TRUE and major = 'IDS'\n      order by year, major\")\n\nError in sqldf(\"select DISTINCT year, honors, major \\n      from grades\\n      where honors = TRUE and major = 'IDS'\\n      order by year, major\"): could not find function \"sqldf\"\n\nsqldf(\"select DISTINCT student, year, honors, major \n      from grades\n      where honors = TRUE and major = 'IDS'\n      order by year, major\")\n\nError in sqldf(\"select DISTINCT student, year, honors, major \\n      from grades\\n      where honors = TRUE and major = 'IDS'\\n      order by year, major\"): could not find function \"sqldf\"\n\n# Exercise 4\n\n\n# Show just the director column\nsql = \"select director \n       from movies\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List all directors of movies, without duplicates\n\nsql = \"select DISTINCT director \n       from movies\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List all directors of movies (alphabetically), without duplicates\nsql = \"select DISTINCT director \n       from movies\n       order by director\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Both the where clause and the order by clause may refer to information\n# that is not actually displayed by the select clause\n# \n# For example\n\n# List the title and year for all movies directed by John Lasseter.\n# Do not John Lasseter's name in the output.\nsql = \"select title, year \n       from movies\n       where director = 'John Lasseter'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List the title of all movies in \"reverse chronological order\". \n# In other words, the most recent movie should be listed first and the \n# oldest movie listed last.\n# Do NOT show the actual year in the output.\nsql = \"select title \n       from movies\n       order by year desc\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List the last four movies released (ordered from least recent to most recent)\nsql = \"select * \n       from movies\n       order by year\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# the following does the same thing\nsql = \"select * \n       from movies\n       order by year asc\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List the last four movies released (ordered from most recent to last)\n#\n# To order a column in descending order follow the name of the column with desc\nsql = \"select * \n       from movies\n       order by year desc\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\nsql = \"select * \n       from movies\n       order by year desc\n       limit 4\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List all movies sorted alphabetically by title\n\nsql = \"select * \n       from movies\n       order by title\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List the first five movies sorted alphabetically\nsql = \"select * \n       from movies\n       order by title\n       limit 5\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List the next five movies sorted alphabetically\n\nsql = \"select * \n       from movies\n       order by title\n       limit 5 offset 5\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List the next five movies sorted alphabetically\n\nsql = \"select * \n       from movies\n       order by title\n       limit 5 offset 10\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n\n\n\n21.24.6 Practice - more practice - north_american_cities\n\n# Review 1 - Tasks\n#\n# https://sqlbolt.com/lesson/select_queries_review\n\n\n# See the table (i.e. dataframe)\nsqldf(\"select * north_american_cities\")\n\nError in sqldf(\"select * north_american_cities\"): could not find function \"sqldf\"\n\n# List all the Canadian cities and their populations\n\nsql = \"select country, city, population\n       from north_american_cities\n       where country='Canada'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Order all the cities in the United States by their latitude from north to south\nsql = \"\nselect *\nfrom north_american_cities\nwhere country = 'United States'\norder by latitude desc\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List all the cities west of Chicago, ordered from west to east\n\nsql = \"select *\nfrom north_american_cities\nwhere longitude &lt; -87.62980\norder by longitude\n\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List the two largest cities in Mexico (by population)\n\n# Start by listing all of the cities in Mexico in order of decreasing population\nsql = \"select *\n       from north_american_cities\n       where country = 'Mexico'\n       order by population desc\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# use the limit clause to limit results to only a specified number of values\n# Start by listing all of the cities in Mexico\nsql = \"select *\n       from north_american_cities\n       where country = 'Mexico'\n       order by population desc\n       limit 2\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# The limit clause takes an option \"offset\"\n# Each row in the data has an imaginary number starting with 0 for the 1st row\n# and 1 for the 2nd row , etc.\n\nsql = \"select * from north_american_cities\n       order by population desc\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Do the same thing but only get the 3 largest cities\nsql = \"select * from north_american_cities\n       order by population desc\n       limit 3\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Do the same thing but get the 4th, 5th and 6th largest cities\nsql = \"select * from north_american_cities\n       order by population desc\n       limit 3 offset 3\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Do the same thing but get the 7th 8th and 9th largest cities\nsql = \"select * from north_american_cities\n       order by population desc\n       limit 3 offset 6\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# List the third and fourth largest cities (by population) in the United States and their population\n\n# Let's start by showing all USA cities\nsql = \"select * \n       from north_american_cities\n       where country = 'United States'\n       order by population desc\n       \"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Use limit 2 offset 3 to just show the 3rd and 4th largest cities\nsql = \"select * \n       from north_american_cities\n       where country = 'United States'\n       order by population desc\n       limit 2 offset 2\n       \"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0010-introToSql-v023.html#dynamic-sql---a-brief-introduction",
    "href": "sql0010-introToSql-v023.html#dynamic-sql---a-brief-introduction",
    "title": "21  Relational Databases and SQL (using R)",
    "section": "21.25 dynamic SQL - a brief introduction",
    "text": "21.25 dynamic SQL - a brief introduction\nNOTE:\n\n“IDS1020-Intro to IDS” students can ignore this section.\n\n\n########################################################################.\n# It is very common for SQL to be \"embedded\" in another language\n# very similar to what we are doing with R. There are ways to \n# \"embed\" SQL in all popular programming languages.\n#\n# This technique of building a sql statement  from different parts of\n# info using another language (in this case R) is known\n# as \"dynamic sql\".\n########################################################################.\n\n#################################################################.\n# Brief intro to an advanced concept: \"dynamic SQL\"?\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# As we've already learned, the sqldf function takes a\n# single character value that contains\n# a SQL command, e.g. sqldf(\"SELECT * FROM SOME_TABLE\")\n# This allows us to use the SQL language inside our R programs.\n# However, you must remember that SQL and R are very different \n# languages. As we learn SQL, we will focus primarily on how to write\n# various forms of SQL commands. We wont focus much on R\n# other than to use the sqldf function to run the SQL code.\n#\n# However, sometimes it is adventageous to \n# use R code (more than just sqldf) to \"dynamically\" construct a\n# SQL statement based on some other information that is \n# available to your R code but would not have been available\n# at the time you are writing the SQL code.\n#\n# For example, the following function, mySelect\n# takes two arguments: \n#\n#    table - The name of a table \n#    cols - The names of the columns to display from the table\n#\n# It displays just the specified columns from the specified table.\n\nmySelect = function( table, cols){\n  colsList = paste(cols, collapse=\",\")\n  selectStatement = paste0( \"select \", colsList, \" from \", table)\n  sqldf(selectStatement)\n}\n\n# The function can now be called with different tables and \n# lists of columns\n\nmySelect(\"movies\", c(\"title\",\"director\"))\n\nError in sqldf(selectStatement): could not find function \"sqldf\"\n\nmySelect(\"grades\", c(\"student\", \"year\", \"test1\", \"test2\"))\n\nError in sqldf(selectStatement): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Relational Databases and SQL (using R)</span>"
    ]
  },
  {
    "objectID": "sql0035-workingWithMultipleTables-v012.html",
    "href": "sql0035-workingWithMultipleTables-v012.html",
    "title": "22  Inner Joins.",
    "section": "",
    "text": "22.1 Importing the data into R\nIn section we will be referring to the “customers” and the “orders” tables as well as various tables from the “books database”. Instructions for downloading the necessary files and importing them into R are included in section above that describes how to “Get the data”.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Inner Joins.</span>"
    ]
  },
  {
    "objectID": "sql0035-workingWithMultipleTables-v012.html#intro-to-joining-two-tables",
    "href": "sql0035-workingWithMultipleTables-v012.html#intro-to-joining-two-tables",
    "title": "22  Inner Joins.",
    "section": "22.2 Intro to “JOIN”ing two tables",
    "text": "22.2 Intro to “JOIN”ing two tables\n\n# read the data for the tables we'll be using\ncustomers = read_csv(\"data/customers.csv\", show_col_types=FALSE)\norders = read_csv(\"data/orders.csv\", show_col_types=FALSE)\n\n\n22.2.1 Overview of the customers and orders tables\n\n# The examples in this page use the customers and orders tables.\n# The data for those tables can be imported into R using the\n# customers.csv and the orders.csv files.\n# This code to read in the data from the csv files appears \n# further up in this file. \n#\n# see this page for more info: https://www.w3schools.com/sql/sql_join.asp\n\n\n#........................................................................\n# Lets see a few rows from the customers table and from the orders table\n#........................................................................\n\nsqldf(\"select * from customers order by CustomerId limit 10\")\n\nError in sqldf(\"select * from customers order by CustomerId limit 10\"): could not find function \"sqldf\"\n\nsqldf(\"select * from orders order by CustomerId limit 10\")\n\nError in sqldf(\"select * from orders order by CustomerId limit 10\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Inner Joins.</span>"
    ]
  },
  {
    "objectID": "sql0035-workingWithMultipleTables-v012.html#primary-keys-and-foreign-keys",
    "href": "sql0035-workingWithMultipleTables-v012.html#primary-keys-and-foreign-keys",
    "title": "22  Inner Joins.",
    "section": "22.3 “Primary Keys” and “Foreign Keys”",
    "text": "22.3 “Primary Keys” and “Foreign Keys”\n\n#------------------------------------------------\n# Primary keys and Foreign keys\n#------------------------------------------------\n\n# - Primary Key\n#\n#   Many relational database tables have a column that contains a unique value\n#   for every row in the table. For example the customers table in the example\n#   below contains a CustomerId column in the customers table. Each row in the \n#   customers table contains a different value for the CustomerId. \n#   This allows you to identify a specific customer (i.e a specific row in the table)\n#   by the customer id. For example CustomerId 100 corresponds to one and only one\n#   row in the customers table.\n#   The CustomerId column in the Customers table is known as a \"primary key\". \n#\n#   Similarly, the orders table in the example below contains an OrderId\n#   column. Each row in the orders table contains a unique value for the\n#   OrderId. For example, orderId 10248 corresponds to exactly one row \n#   in the orders table. Therefore we say that the OrderId column is the \n#   \"primary key\" for the orders table.\n#\n#\n#\n# - Foreign Key\n#\n#   Note that the orders table ALSO contains a CustomerId column.\n#   The customerId in the orders table indicates which customer\n#   placed a specific order. To find the name of the customer, the address\n#   of the customer etc. you can look in the customers table for the row\n#   that contains the specific customerId for the order.\n#\n#   Since a single customer can have many different orders,\n#   the values of the CustomerId column in the orders table contains\n#   repeats of the same CustomerId value (in different rows of the orders table). \n#   The customerId column in the orders table is NOT a primary key.\n#   The customerId column in the orders table exists so that we\n#   can look up the customer information for a particular order.\n#   The CustomerId column in the orders table is known as a \"foreign key\".\n#   In general a column in a table that contains information from\n#   the primary key of a different table is known as a \"foreign key\".\n#\n# In summary\n# - The CustomerId column in the customers table is a primary key\n# - The OrderId column in the orders table is a primary key\n# - The CustomerId column in the orders table is a foreign key\n#\n\n\n22.3.1 More about the customers and orders tables\n\n# show the orders table arranged in the order of the customerID\n\nsqldf(\"select *\n       from orders\n       order by CustomerID\")\n\nError in sqldf(\"select *\\n       from orders\\n       order by CustomerID\"): could not find function \"sqldf\"\n\n# Show customer info for customer id 10\n\nsqldf(\"select * from customers where CustomerId = 10\")\n\nError in sqldf(\"select * from customers where CustomerId = 10\"): could not find function \"sqldf\"\n\n# Show all orders for customer id 10\n\nsqldf(\"select * from orders where CustomerId = 10\")\n\nError in sqldf(\"select * from orders where CustomerId = 10\"): could not find function \"sqldf\"\n\n\n\n\n22.3.2 JOINing customers and orders into a single output\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# using the JOIN to combine information from two tables into a single output\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# Combine information from the customers and the orders table.\n#\n# Specifically, show the following data\n# - customer name and country from the customers table\n# - orderId, OrderDate from the orders table\n#\n# Only show data for all orders placed by customer 10\n\nsqldf(\"select OrderID, customers.CustomerId, CustomerName, Country, OrderDate\n       from orders join customers on orders.customerId = customers.CustomerId\n       where customers.CustomerId = 10\")   # ame result if you say orders.customerId\n\nError in sqldf(\"select OrderID, customers.CustomerId, CustomerName, Country, OrderDate\\n       from orders join customers on orders.customerId = customers.CustomerId\\n       where customers.CustomerId = 10\"): could not find function \"sqldf\"\n\n# do the same for customerids 1 through 5\n\nsql=\"select OrderID, customers.CustomerId, CustomerName, OrderDate\n     from orders join customers on orders.customerId = customers.CustomerId\n     where customers.CustomerId &gt;= 1 and customers.CustomerId &lt;= 5\" \nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# another way, with the IN operator\nsql=\"select OrderID, customers.CustomerId, CustomerName, OrderDate\n     from orders join customers on orders.customerId = customers.CustomerId\n     where customers.CustomerId IN (1,2,3,4,5)\"   # you would get the same result if you said orders.customerId\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# show the orders that were shipped by shipper #3 for customers who\n# are from Mexico. Sort the results by the orderId\nsql=\"select orderId, customerName, customers.customerId, shipperId, country\n     from orders join customers on orders.customerId = customers.customerId\n     where shipperId = 3 and country = 'Mexico'\n     order by orderId\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Inner Joins.</span>"
    ]
  },
  {
    "objectID": "sql0035-workingWithMultipleTables-v012.html#one-to-many-relationships",
    "href": "sql0035-workingWithMultipleTables-v012.html#one-to-many-relationships",
    "title": "22  Inner Joins.",
    "section": "22.4 One to Many relationships",
    "text": "22.4 One to Many relationships\n\n#####################################################################\n#\n# One to Many relationships\n#\n# EXAMPLE:\n#           a single SPECIFIC customer may have many orders\n#           a single SPECIFIC order is related to exactly one customer \n#\n# IN GENERAL:\n#\n# A single SPECIFIC row in table A may be related to many (or possibly zero)\n# rows from table B. \n#\n# However a single SPECIFIC row from table B is related to \n# EXACTLY ONE row from table A\n#\n# We'll call table A the \"one table\" and \n#            table B the \"many table\"\n#\n# - The \"one\" table has a primary key.\n#\n# - The \"many\" table has a foreign key that contains values of the\n#   other table's primary key values.\n#####################################################################",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Inner Joins.</span>"
    ]
  },
  {
    "objectID": "sql0035-workingWithMultipleTables-v012.html#many-to-many-relationships",
    "href": "sql0035-workingWithMultipleTables-v012.html#many-to-many-relationships",
    "title": "22  Inner Joins.",
    "section": "22.5 Many to Many relationships",
    "text": "22.5 Many to Many relationships\n\n#####################################################################\n#\n# Many to Many relationships\n#\n# EXAMPLE:\n#           a single SPECIFIC author may have written many titles\n#           a single SPECIFIC book   may have many authors\n#\n#\n# Many to many relationships cannot be directly expressed in relational\n# databases. \n# \n# To establish a many to many relationship, a \"middle\" table is created\n# that contains the to foreign keys. Each of the foreign keys relate \n# back to the primary key of one of the two tables. \n# In the books database, the middle table is called title_authors.\n#####################################################################",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Inner Joins.</span>"
    ]
  },
  {
    "objectID": "sql0035-workingWithMultipleTables-v012.html#practice---one-to-many-or-many-to-many",
    "href": "sql0035-workingWithMultipleTables-v012.html#practice---one-to-many-or-many-to-many",
    "title": "22  Inner Joins.",
    "section": "22.6 Practice - “one to many” or “many to many”?",
    "text": "22.6 Practice - “one to many” or “many to many”?\n\n###################################\n# Practice identifying relationships\n#\n# - one to many\n#\n# - many to many\n#\n###################################\n\n# QUESTION \n#\n# A university uses to tables to track their real estate.\n#\n# The BUILDINGS table contains one row for each building they own.\n# \n# The ROOMS table contains one row for each room in each building.\n#\n# Are the BUILDINGS and ROOMS tables in a \"1 to many\" or a \n# \"many to many\" relationship?\n#\n# Given the following definitions of a BUILDINGS table and \n# a ROOMS table draw a \"crows foot\" Entity Relationship Diagram.\n# Make sure to show the symbols for the maximum and minimum \n# cardinalities. Explain in English what each symbol on your\n# diagram means. \n#------------------------------------------------------------------ \n#    BUILDINGS TABLE\n#\n#    bldgCode    (PK)\n#    streetAddress\n#    city\n#    state\n#    zip\n#    numOfFloors\n#\n#\n#    ROOMS TABLE\n# \n#    bldgCode (PK)\n#    roomNum  (PK)\n#    capacity\n#    type    (classroom, dorm room, office)\n#    hasVideoProjection (TRUE/FALSE)\n#\n#########################################################################\n\n\n\n#########################################################################\n# \n# The same university keeps track of their professors, the courses \n# that are in the course catalog and the specific offerings every\n# semester. Think about how these concepts are related to each other.\n#\n# How are PROFESSORS related to COURSES? \"one to many\", \"many to one\", \"many to many\"?\n#\n# How are PROFESSORS related to OFFERINGS? \"one to many\", \"many to one\", \"many to many\"?\n#\n# How are COURSES related to OFFERINGS? \"one to many\", \"many to one\", \"many to many\"?\n#\n# The following tables could be used to track this info.\n# Draw the crows foot Entity Relationship Diagram.\n# Make sure to show the symbols for the maximum and minimum \n# cardinalities. Explain in English what each symbol on your\n# diagram means. \n#------------------------------------------------------------------------\n#\n# PROFESSORS TABLE\n#\n# Description: this table contains exactly one row for each professor that is\n# employed by the university. \n# \n# facultyId (PK)\n# firstName\n# lastName\n# department\n# salary\n# yearHired\n#\n#\n#\n# OFFERINGS TABLE\n#\n# Description: this table contains info about the sections that are \n# being offered in particular semesters.\n#\n# crn (PK)\n# courseNumber (FK1)\n# semester\n# year\n# room\n# buildingId\n# facutyId (FK2)\n#\n#\n#\n# COURSES TABLE \n# Description: This table contains one row for each course in the course catalog.\n# Note that not every course is offered every semester. Some courses have\n# multiple offerings in a single semester.\n#\n# courseNumber (PK)\n# courseName\n# credits\n# description\n#############################################################################",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Inner Joins.</span>"
    ]
  },
  {
    "objectID": "sql0035-workingWithMultipleTables-v012.html#using-join-with-the-books-database",
    "href": "sql0035-workingWithMultipleTables-v012.html#using-join-with-the-books-database",
    "title": "22  Inner Joins.",
    "section": "22.7 Using JOIN with the books database",
    "text": "22.7 Using JOIN with the books database\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The books database contains information about various books, authors,\n# publishers, etc.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Read in the data for the books database - see the \ntitles = read_csv(\"data/booksDatabase/titles.csv\", na=\"NULL\", show_col_types=FALSE)\nauthors = read_csv(\"data/booksDatabase/authors.csv\", na=\"NULL\", show_col_types=FALSE)\npublishers = read_csv(\"data/booksDatabase/publishers.csv\", na=\"NULL\", show_col_types=FALSE)\ntitle_authors = read_csv(\"data/booksDatabase/title_authors.csv\", na=\"NULL\", show_col_types=FALSE)\nroyalties = read_csv(\"data/booksDatabase/royalties.csv\", na=\"NULL\", show_col_types=FALSE)\n\n\n# QUESTION: Write a SQL select statement (i.e. a \"query\") to display the following data.\n# For each title, show the \n# - title name\n# - num pages\n# - publisher name\n# - publisher country\n\n# ANSWER\n\nsql = \"select title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# To be more clear where each column comes from you can\n# write the columns in the format tableName.columnName.\n# (In this example it's not necessary to do so - but can make your code easier\n# to understand. Later we'll see examples where you must specify the \n# tablename.colname format).\n\nsql = \"select titles.title_name, titles.pages, publishers.pub_name, publishers.country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n\n\n\n\n\n\n\nSee next section about “CROSS JOINS”\n\n\n\nBefore going further, please take a few minutes and read the information on “CROSS JOIN” that is found in the next section of this website. The discussion of CROSS JOINS will be moved to this location soon…\n\n\n\n# DEEPER EXPLANATION\n#\n# We learned earlier about a \"CROSS JOIN\" that takes the rows of two different\n# tables and combines them in every way. This is useful when you want to see\n# every possible combination of the rows of two different tables. For example,\n# if you have a table of shirts and a table of pants and you want to see every\n# possible combination of a shirt with a pair of pants, a cross join might\n# be appropriate. However, most of the time that is not what you want to do.\n# Most of the time, the appropropriate type of join is known a an \"INNER JOIN\"\n# (or just simply \"JOIN\", the word inner is optional).\n# An inner join matches up those rows from two\n# different tables that share a primary key and a foreign key with the same\n# values.\n#\n# However, a cross join is actually at the heart of how the database \n# performs an inner join internally. Specifically whenever the SQL code\n# specifies an inner join (i.e. \"join\") the database first performs a\n# cross join and then removes the rows from the cross join \n# results that do not match the ON clause of the INNER JOIN.\n#\n# Let's look at that in a little more detail ...\n#\n# First thing that happens when the above query is processed internally\n# is the following cross join\n\n\nsql = \"select titles.*, publishers.*\n       from titles cross join publishers\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n\n\n# after that , the rows that don't match the \"on\" clause in the inner join\n# are removed from the results. This can be seen by adding a where clause \n# to the cross join shown above.\n\nsql = \"select titles.*, publishers.*\n       from titles cross join publishers\n       where titles.pub_id = publishers.pub_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# The last thing that happens is that just the columns that appear in \n# the select clause are displayed. Therefore, the following two \n# queries are equivalent\n\n# This is the inner join version (we copied this from above)\nsql = \"select title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# Version with a cross join - this is what happens internally when\n# you write an inner join (i.e. \"join\")\nsql = \"select title_name, pages, pub_name, country\n       from titles cross join publishers\n       where titles.pub_id = publishers.pub_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# Only show results for books that have at least 100 pages\n\nsql = \"select title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\n       where pages &gt;= 100\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# Only show books that are at least 100 pages and published in the USA\n\nsql = \"select title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\n       where pages &gt;= 100 and country = 'USA'\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# Show books that are shorter than 100 pages  and books that are at least 1000 pages\n# Do not show any other books.\n# Only show books from the USA.\n\nsql = \"select title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\n       where (pages &lt; 100 or pages &gt;= 1000) and country = 'USA' \"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# show the results in the order of the length of the book (i.e. # of pages)\n# show the shortest books at the top\n\nsql = \"select title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\n       where (pages &lt; 100 or pages &gt;= 1000) and country = 'USA' \n       order by pages asc\"     # asc is optional - you don't have to write it - it is the default\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# do the same thing but put the largest books at the top\n\nsql = \"select title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\n       where (pages &lt; 100 or pages &gt;= 1000) and country = 'USA' \n       order by pages desc\"     # you must write desc (i.e. descending)\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION - add the pub_id to the output of the previous query.\n\n\n# ANSWER\n#\n# Because the pub_id exists in both the publishers and the titles\n# tables, every time that pub_id is used in the query, you must also include\n# the name of the table.\n#\n# For more info, see the comment below entitled\n#     #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#     # select table.column ...        vs       select column ... \n#     #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsql = \"select publishers.pub_id, title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\n       where (pages &lt; 100 or pages &gt;= 1000) and country = 'USA' \n       order by pages desc\"     \nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# it will also work if you write titles.pub_id because once the table have been\n# joined together, the row from the publishers table and the corresponding\n# row from the titles table both have the same value for the pub_id\n#\n# For more info, see the comment below entitled\n#\n#     #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#     # select table.column ...        vs       select column ... \n#     #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#\n\nsql = \"select titles.pub_id, title_name, pages, pub_name, country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\n       where (pages &lt; 100 or pages &gt;= 1000) and country = 'USA' \n       order by pages desc\"     \n sqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# You could include the table names even for columns that don't rquire it.\nsql = \"select titles.pub_id, titles.title_name, titles.pages, publishers.pub_name, publishers.country\n       from publishers  join   titles  on  publishers.pub_id = titles.pub_id\n       where (pages &lt; 100 or pages &gt;= 1000) and country = 'USA' \n       order by pages desc\"     \nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# select table.column ...        vs       select column ... \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# You must include table names in the SELECT clause for columns that \n# appear in more than one table. Column names that that only appear \n# in a single table in the query do NOT need to be preceded by the table name. \n#\n# However, it is PERMISSIBLE to include the table name for ANY column (even\n# if the column only appears in a single table).\n# Some people prefer to include the table name even when it \n# is not necessary (as done above) to make it clearer to someone reading the \n# code which table contains which columns.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# QUESTION\n#\n# Show the title_id, the title, and the author ID\n# for each author that had a part in writing a book. \n#\n# If there is more than one author for a title then show a different row\n# in the output for each author.\n#\n# Show the rows in alphabetical order by title.\n\n# ANSWER\n\nsql = \"select titles.title_id, title_name, au_id\n       from titles join title_authors   on    titles.title_id = title_authors.title_id\n       order by title_name\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Inner Joins.</span>"
    ]
  },
  {
    "objectID": "sql0035-workingWithMultipleTables-v012.html#joining-three-or-more-tables",
    "href": "sql0035-workingWithMultipleTables-v012.html#joining-three-or-more-tables",
    "title": "22  Inner Joins.",
    "section": "22.8 Joining three or more tables",
    "text": "22.8 Joining three or more tables\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Joining three or more tables\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# For many queries you will need to join more than two tables together.\n# For example, suppose we wanted to list the titles and the author names\n# for each title.\n#\n# The title_name column is in the titles table. \n# The au_fname and au_lname columns are in the authors tables.\n#\n# Therefore, you will obviously need to include the titles and authors\n# tables in the select statement. However, the only way to figure\n# out which authors wrote which titles is to \n# also look at the title_authors table. Therefore the title_authors\n# table must also be part of the query.\n#\n# The best way to understand which tables must be included in a query\n# is to look at the ERD (Entity Relationship Diagram) for the database.\n# If you need data from two different tables that are not directly \n# connected to each other on the diagram, you will also need to join all of the\n# tables that lie BETWEEN those tables also.\n#\n# To join multiple tables together, look at the diagram and find \"path\" on the\n# diagram starting with one table that you need data from and ending with \n# another table that you need data from. \n#\n# For example, if you want to show\n# the author names and the title names, you can start with the authors\n# table, then join onto that the title_authors table, then finally join \n# the authors table.\n# \n# Alternatively, you could start with the titles table, then join onto\n# that the title_authors table and then finally join the authors table.\n# It doesn't make a difference which table you start with and which table you\n# end with, as long as you join all of the tables in the path of tables.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# QUESTION\n# Show the the same info as the previous query but instead of the au_id,\n# show the authors first and last names.\n\nsql = \"select titles.title_id, title_name, authors.au_id, au_fname, au_lname\n       from titles join title_authors   on    titles.title_id = title_authors.title_id\n                   join authors         on    authors.au_id   = title_authors.au_id\n       order by titles.title_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION \n# Same as previous question but show the au_id in addition to the authors' names.\n\n# ANSWER\n# The only extra issue in this question is that since the au_id column \n# appears in more than one table in the query (i.e. it's in titles\n# and in the title_authors tables), You cannot simply type au_id in \n# the select clause - that would be an ambiguous column name. \n# Rather you must write either authors.au_id or title_authors.au_id.\n# Either one authors.au_id or title_authors.au_id will yield the exact\n# same results because after the \"on\" clauses got finished processing\n# the only rows left from the cross join are rows in which the\n# authors.au_id and title_authors.au_id columns contain the same values.\n# or title_authors.au_id. You \n\n# WRONG ... the au_id column is ambiguous - you need to specify the table name\nsql = \"select titles.title_id, title_name, au_id, au_fname, au_lname\n       from titles join title_authors   on    titles.title_id = title_authors.title_id\n                   join authors         on    authors.au_id   = title_authors.au_id\n       order by titles.title_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# This works (authors.au_id)\nsql = \"select titles.title_id, title_name, authors.au_id, au_fname, au_lname\n       from titles join title_authors   on    titles.title_id = title_authors.title_id\n                   join authors         on    authors.au_id   = title_authors.au_id\n       order by titles.title_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# This also works (title_authors.au_id)\nsql = \"select titles.title_id, title_name, title_authors.au_id, au_fname, au_lname\n       from titles join title_authors   on    titles.title_id = title_authors.title_id\n                   join authors         on    authors.au_id   = title_authors.au_id\n       order by titles.title_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# QUESTION\n# 19.   List the publisher name, the title_name, the authors first and last names,\n#     the author's state and the publishers state for all books.\n#     Make sure that in the output the authors state and publishers state\n#     columns are clearly labeled as such.\n#     Sort the rows alphabetically by the title name. If a title has more than one \n#     author then there will be a different row in the output for each author.\n#     Sort those rows alphabetically by the publisher name, then by the \n#     title and finally by the author's names.\n\n# ANSWER\n# This query requires joining 4 different tables.\n# See the code for details.\n# Notice that in the order by the au_lname comes before au_fname (this is in\n# general how people's names are sorted alphabetically)\n\nsql = \"select pub_name, title_name, au_fname, au_lname,\n              authors.state as 'author state', \n              publishers.state as 'publisher state'\n    from authors join title_authors on authors.au_id = title_authors.au_id \n                          join titles on title_authors.title_id = titles.title_id \n                          join publishers on publishers.pub_id = titles.pub_id\n  order by pub_name, title_name, au_lname, au_fname\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# The following shows a breakdown of what is actually happening when you \n# join multiple tables. All of the following \"steps\" happen at once when \n# you run the single query shown above in the answer. This breakdown\n# of the steps helps you to understand what exactly is happening.\n\n# step 1 - the first two tables are joined \nsql = \"select authors.*, title_authors.*\n    from authors join title_authors on authors.au_id = title_authors.au_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# step 2 - the results from the join of the\n#          1st two tables (authors and title_authors) is joined with\n#          the 3rd table (titles)\n\nsql = \"select authors.*, title_authors.*, titles.*\n    from authors join title_authors on authors.au_id = title_authors.au_id\n                          join titles on title_authors.title_id = titles.title_id\" \n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# step 3 - the results from the join of the first 3 tables (authors,\n#          title_authors, titles) is then joined with the 4th table (publishers)\n\nsql = \"select authors.*, title_authors.*, titles.*, publishers.*\n    from authors join title_authors on authors.au_id = title_authors.au_id\n                          join titles on title_authors.title_id = titles.title_id\n                        join publishers on publishers.pub_id = titles.pub_id\" \n\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# step 4 - the order by clause puts the rows in the correct order\nsql = \"select authors.*, title_authors.*, titles.*, publishers.*\n    from authors join title_authors on authors.au_id = title_authors.au_id \n                          join titles on title_authors.title_id = titles.title_id \n                          join publishers on publishers.pub_id = titles.pub_id\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"\n\n# step 5 - the select clause specifies which columns are actually displayed\nsql = \"select pub_name, title_name, au_fname, au_lname,\n              authors.state as 'author state', \n              publishers.state as 'publisher state'\n    from authors join title_authors on authors.au_id = title_authors.au_id \n                          join titles on title_authors.title_id = titles.title_id \n                          join publishers on publishers.pub_id = titles.pub_id\n  order by pub_name, title_name, au_lname, au_fname\"\nsqldf(sql)\n\nError in sqldf(sql): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Inner Joins.</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html",
    "title": "23  aggregate functions, group by, having",
    "section": "",
    "text": "23.1 The “books database”\nIn this and other sections we will be referring to the “books database”.\nClick below to download a document that describes the books database and database technology in general. This document also contains many questions/answers to test your knowledge of SQL. You can also download the CSV files that contain the data for the books database.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#click-to-download-the-specified-files",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#click-to-download-the-specified-files",
    "title": "23  aggregate functions, group by, having",
    "section": "23.2 click to download the specified files",
    "text": "23.2 click to download the specified files\n\nbooksDatabase description and Questions\ntitles.csv\nauthors.csv\npublishers.csv\ntitle_authors.csv\nroyalties.csv\n\n\n# load the package we'll need\nif (!require(sqldf)) { install.packages(\"sqldf\"); require(sqldf) }\n\nLoading required package: sqldf\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, : there is no package called 'sqldf'\n\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\nif (!require(readr)) { install.packages(\"readr\"); require(readr) }\n\nLoading required package: readr\n\n# Read in the data for the books database - see the \ntitles = read_csv(\"data/booksDatabase/titles.csv\", na=\"NULL\", show_col_types=FALSE)\nauthors = read_csv(\"data/booksDatabase/authors.csv\", na=\"NULL\", show_col_types=FALSE)\npublishers = read_csv(\"data/booksDatabase/publishers.csv\", na=\"NULL\", show_col_types=FALSE)\ntitle_authors = read_csv(\"data/booksDatabase/title_authors.csv\", na=\"NULL\", show_col_types=FALSE)\nroyalties = read_csv(\"data/booksDatabase/royalties.csv\", na=\"NULL\", show_col_types=FALSE)",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#non-aggreate-functions-vs-aggregate-functions",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#non-aggreate-functions-vs-aggregate-functions",
    "title": "23  aggregate functions, group by, having",
    "section": "23.3 “non-aggreate functions” vs “aggregate functions”",
    "text": "23.3 “non-aggreate functions” vs “aggregate functions”\n\n############################################################################\n# Intro to SQL functions:\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#   SQL contains two different types of functions\n#\n#   - non-aggregate functions - return a different value for every row\n#\n#   - aggregate functions - return a single value for multiple rows in the table\n#     These functions combine several data values in a single value. \n#     For example the sum function will combine several values into a single sum.\n#     see below for more details\n#\n############################################################################\n\n\n23.3.1 The titles table\n\n# Let's remember what is in the titles table.\nsqldf(\"select * from titles\")\n\nError in sqldf(\"select * from titles\"): could not find function \"sqldf\"\n\n\n\n\n23.3.2 Example of a non-aggregate function - upper\n\n#................................................................\n# Example of non-aggregate function\n#\n# The upper function simply transforms its argument to UPPERCASE.\n#................................................................\n\n# we can get just the titles and the prices:\nsqldf(\"select title_name, price from titles\")\n\nError in sqldf(\"select title_name, price from titles\"): could not find function \"sqldf\"\n\n# The following uses the upper function to make each title UPPER CASE\nsqldf(\"select upper(title_name), price from titles\")\n\nError in sqldf(\"select upper(title_name), price from titles\"): could not find function \"sqldf\"\n\n\n\n\n23.3.3 Example of an aggregate function - avg\n\n#................................................................\n# Example of an aggregate function\n#\n# The avg function takes the average of a set of a set of values.\n#................................................................\n\n# show all the prices\nsqldf(\"select price from titles\")\n\nError in sqldf(\"select price from titles\"): could not find function \"sqldf\"\n\n# show the average of the prices\nsqldf(\"select avg(price) from titles\")\n\nError in sqldf(\"select avg(price) from titles\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#demonstrating-non-aggreate-functions-with-simple-select-statements",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#demonstrating-non-aggreate-functions-with-simple-select-statements",
    "title": "23  aggregate functions, group by, having",
    "section": "23.4 Demonstrating non-aggreate functions with simple select statements",
    "text": "23.4 Demonstrating non-aggreate functions with simple select statements\n\n##############################################################################\n# queries with JUST a select clause\n##############################################################################\n\n# It's not the most common thing to do but you can write a select statement\n# that does not actually retrieve any information from any table. \n# \n# The purpose is to use the SQL language to calculate values, similar to\n# how you can use R or a calculator to calculate sums, products, etc.\n#\n# This feature will help us demonstrate some of the sql functions below.\n# \n# Example:\n\n# perform some calculations and display the results\nsqldf(\"select 3+2,   10*2,   23/5,   23.0/5\")    # show the results of various calculations\n\nError in sqldf(\"select 3+2,   10*2,   23/5,   23.0/5\"): could not find function \"sqldf\"\n\n# We can include our own names for the columns.\n# When you change the name of a column, the new column name is known as a 'column alias'\nsqldf(\"select 3+2 as A,   10*2 as B,   23/5 as C,   23.0/5 as D\")    \n\nError in sqldf(\"select 3+2 as A,   10*2 as B,   23/5 as C,   23.0/5 as D\"): could not find function \"sqldf\"\n\n# You don't need the \"as\" when creating column aliases\n# ... but some people do so anyway since it reads nicer with the \"as\"\n#\n# same results as above\nsqldf(\"select 3+2 A,   10*2 B,   23/5 C,   23.0/5 D\")    \n\nError in sqldf(\"select 3+2 A,   10*2 B,   23/5 C,   23.0/5 D\"): could not find function \"sqldf\"\n\n# The following is not really doing anything useful but it\n# helps to demonstrate what the upper function does.\n# This technique is used on the sqlitetutorial.net website\n# to demonstrate how many of the SQLite functions work. \n#\n# For example, click on the specific function names you find on the following\n# page for more info about the functions and examples of using the functions.\n#   https://www.sqlitetutorial.net/sqlite-string-functions/\n\nsqldf(\"select upper('abcde')\")\n\nError in sqldf(\"select upper('abcde')\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#non-aggreate-functions-in-sqlite",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#non-aggreate-functions-in-sqlite",
    "title": "23  aggregate functions, group by, having",
    "section": "23.5 Non-aggreate functions in SQLite",
    "text": "23.5 Non-aggreate functions in SQLite\n\n#----------------------------------------------------\n#\n# Non-aggregate functions in SQLite\n#\n#----------------------------------------------------\n\n\n# The non-aggregate functions are NOT defined as part of the ANSI SQL standard.\n# Every database management system software offers their own versions of \n# non-aggregate functions.  For example, MySQL, Microsoft SQL Server, Postgres\n# and sqlite all have different non-aggregate functions that they make available.\n# To undertand how to use these function, you need to see the documentation\n# for your particular version of SQL. See the following webpage for\n# some functions in SQLite. We will first look at the \n# \"string functions\" i.e. functions that work with \"string\" values\n# (i.e. character values):\n#\n#     https://www.sqlitetutorial.net/sqlite-string-functions/\n#\n# The string functions available in sqlite are the following.\n# See the website for more details:\n#\n#    substr, trim, rtrim, ltrim, length, replace, upper, lower, instr\n\n# first let's remember what is in the titles table\nsqldf(\"select * from titles\")\n\nError in sqldf(\"select * from titles\"): could not find function \"sqldf\"\n\n\n\n23.5.1 upper() and lower() functions\n\n#........................................................\n#\n# upper ( character_value ) - returns the UPPERCASE version of the character value\n#\n# lower ( character_value ) - returns the lowercase version of the character value\n# \n#........................................................\n\n# show first 5 titles \nsqldf(\"select title_name\n       from titles\n       limit 5\")\n\nError in sqldf(\"select title_name\\n       from titles\\n       limit 5\"): could not find function \"sqldf\"\n\n# show the first 5 titles in UPPERCASE\nsqldf(\"select upper(title_name)\n      from titles\n      limit 5\")\n\nError in sqldf(\"select upper(title_name)\\n      from titles\\n      limit 5\"): could not find function \"sqldf\"\n\n# Use a more friendly column name (i.e. a 'column alias').\n# i.e. display \"title\" at the top of the column instead of \"upper(title_name)\"\nsqldf(\"select upper(title_name) as title\n      from titles\n      limit 5\")\n\nError in sqldf(\"select upper(title_name) as title\\n      from titles\\n      limit 5\"): could not find function \"sqldf\"\n\n# show both the original title and the uppercase version in the same query\nsqldf(\"select title_name, upper(title_name) as TITLE_NAME\n      from titles\n      limit 5\")\n\nError in sqldf(\"select title_name, upper(title_name) as TITLE_NAME\\n      from titles\\n      limit 5\"): could not find function \"sqldf\"\n\n# show the title in addition to other information\nsqldf(\"select upper(title_name) as TITLE_NAME, price\n      from titles\n      limit 5\")\n\nError in sqldf(\"select upper(title_name) as TITLE_NAME, price\\n      from titles\\n      limit 5\"): could not find function \"sqldf\"\n\n# In SQLite, you can use the * along with other column names\n# but note that this is not standard.\n# Not every SQL will accept the * unless it is the only value in the select clause.\n#\n# Notice that the * stands in for ALL column names, including the title_name\n# even though you already displayed the title_name.\n\nsqldf(\"select upper(title_name) as TITLE_NAME, *\n       from titles\n       limit 5\")\n\nError in sqldf(\"select upper(title_name) as TITLE_NAME, *\\n       from titles\\n       limit 5\"): could not find function \"sqldf\"\n\n\n\n\n23.5.2 ltrim() , rtrim() , trim()\n\n#.........................................................................\n#\n# ltrim ( string, [character] )\n# rtrim ( string, [character] )   \n# trim  ( string, [character] )\n#\n# ARGUMENTS\n#   - string - the value to be modified\n#\n#\n#   - [character] \n#\n#     The [brackets] in the documenation indicate that this value is optional.\n#     If specified, this is expected to be a string (ie. a character value \n#     enclosed in 'single quotes'). The characters in the string will be removed\n#     from the left (or right) hand side of the string:\n#        the l in ltrim stands for left\n#        the r in rtrim stands for right\n#.........................................................................\n\n# let's see the original data\nsqldf(\"select title_name, pubdate\n      from titles\")\n\nError in sqldf(\"select title_name, pubdate\\n      from titles\"): could not find function \"sqldf\"\n\n# get rid of the time indicator from the end of the pubdate\nsqldf(\"select title_name, rtrim(pubdate, '0:') as publication_date\n      from titles\")\n\nError in sqldf(\"select title_name, rtrim(pubdate, '0:') as publication_date\\n      from titles\"): could not find function \"sqldf\"\n\n\n\n\n23.5.3 substr( string, start, length )\n\n#........................................................\n# substr ( string, start, length)\n# \n# returns a \"substring\", i.e. a portion of the string (ie. charcter value).\n# ARGUMENTS:\n#    start - the position to start taking info from\n#    length - the number of characters to include\n#........................................................\n\n# get just the number from the title_id\nsqldf(\"select title_id, substr(title_id, 2, 2) as title_number from titles\")\n\nError in sqldf(\"select title_id, substr(title_id, 2, 2) as title_number from titles\"): could not find function \"sqldf\"\n\n# If length is too long the rest of the string is taken.\nsqldf(\"select title_id, substr(title_id, 2, 200) as title_number from titles\")\n\nError in sqldf(\"select title_id, substr(title_id, 2, 200) as title_number from titles\"): could not find function \"sqldf\"\n\n# abbreviate the title\nsqldf(\"select title_name, substr(title_name, 1, 20) as abbreviated_title from titles\")\n\nError in sqldf(\"select title_name, substr(title_name, 1, 20) as abbreviated_title from titles\"): could not find function \"sqldf\"\n\n# abbreviate the title (add on '...' at the end of every value - not just the ones that were shortened)\nsqldf(\"select title_name, substr(title_name, 1, 20) || ' ...' as abbreviated_title from titles\")\n\nError in sqldf(\"select title_name, substr(title_name, 1, 20) || ' ...' as abbreviated_title from titles\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice",
    "title": "23  aggregate functions, group by, having",
    "section": "23.6 Practice",
    "text": "23.6 Practice\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n# Write a select statement that retrieves all books that were published \n# during a month with a single digit.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\n\nsqldf(\"select *\n       from titles\n       where substr(pubdate, 2, 1) = '/'\n       order by title_name\")\n\nError in sqldf(\"select *\\n       from titles\\n       where substr(pubdate, 2, 1) = '/'\\n       order by title_name\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Question\n# Write a select statement that lists the title_name, type and publication date\n# of those books that were published in October, November or December \n# (i.e. months whose numeric value is 2 digits)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\n# We could simply use != \n\nsqldf(\"select title_name, type, pubdate\n       from titles\n       where substr(pubdate, 2, 1) != '/'\n       order by pubdate\")\n\nError in sqldf(\"select title_name, type, pubdate\\n       from titles\\n       where substr(pubdate, 2, 1) != '/'\\n       order by pubdate\"): could not find function \"sqldf\"\n\n# ANSWER\n\n# One way: Identify those rows that have a 2 digit month as those rows which\n# have a '/' in the 3rd position of the pubdate.\n#\n# Notice that the books with a 1 digit months in the pubdate\n# do not appear in the results.\n\nsqldf(\"select title_name, type, pubdate \n       from titles\n       where substr(pubdate, 3, 1) = '/'\")\n\nError in sqldf(\"select title_name, type, pubdate \\n       from titles\\n       where substr(pubdate, 3, 1) = '/'\"): could not find function \"sqldf\"\n\n# Another way: Identify those rows for which the first 2 characters of the \n# pubdate are '10', '11' or '12'\n\nsqldf(\"select title_name, type, pubdate \n       from titles\n       where substr(pubdate, 1, 2) in ('10','11','12')\n      \")\n\nError in sqldf(\"select title_name, type, pubdate \\n       from titles\\n       where substr(pubdate, 1, 2) in ('10','11','12')\\n      \"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Question\n# Write a select statement that lists the title_name and day of the month \n# that each title was published.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ANSWER\n\n# To find the day of the month, let's first trim away the numbers from the \n# left and the right. Then we'll trim away the /'s from the left and the right\n# to leave just the day of the month.\n\n\n# We'll start by just trimming away the numbers spaces and colons.\nsqldf(\"select title_name, trim(pubdate, '0123456789: ') \n       from titles\")\n\nError in sqldf(\"select title_name, trim(pubdate, '0123456789: ') \\n       from titles\"): could not find function \"sqldf\"\n\n# Now for the final answer we can also trim away the slashes\nsqldf(\"select title_name, trim(trim(pubdate, '0123456789: '),'/') as dayOfMonth\n       from titles\")\n\nError in sqldf(\"select title_name, trim(trim(pubdate, '0123456789: '),'/') as dayOfMonth\\n       from titles\"): could not find function \"sqldf\"\n\n# NOTE - the following DOES NOT WORK - because it trims off EVERY\nsqldf(\"select title_name, trim(pubdate, '0123456789: /') as dayOfMonth\n       from titles\")\n\nError in sqldf(\"select title_name, trim(pubdate, '0123456789: /') as dayOfMonth\\n       from titles\"): could not find function \"sqldf\"\n\n\n\n23.6.1 Other functions in SQLite\n\n#------------------------------------------------------------------\n#\n# see these webpages for examples of the other functions\n#    https://www.sqlitetutorial.net/sqlite-functions/sqlite-instr/\n#    https://www.techonthenet.com/sqlite/functions/index.php\n#------------------------------------------------------------------",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#aggregate-functions",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#aggregate-functions",
    "title": "23  aggregate functions, group by, having",
    "section": "23.7 aggregate functions",
    "text": "23.7 aggregate functions\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Aggregate functions\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Aggregate functions take a bunch of values as input and return a single value.\n# For example the avg function averages together several numbers and returns\n# a single number.\n#\n# The following are standard aggregate functions that are included with \n# every version of SQL. These are part of the ANSI standard for SQL.\n# These are the aggregagte functions that we will focus on. \n#\n#   sum, avg, count, min, max\n#\n# Different database management systems might include some other aggregate\n# functions in addition to these. See the documentation for your particular\n# database management system for more info about other aggregate functions.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Show the contents of the titles table\nsqldf(\"select * from titles\")\n\nError in sqldf(\"select * from titles\"): could not find function \"sqldf\"\n\n# show the average price, minimum (i.e. lowest) price and maximum (ie. highest price) \n# of all the titles\nsqldf(\"select avg(price),  min(price) , max(price)\n      from titles\")\n\nError in sqldf(\"select avg(price),  min(price) , max(price)\\n      from titles\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#dont-mix-aggregate-functions-with-non-aggregated-data",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#dont-mix-aggregate-functions-with-non-aggregated-data",
    "title": "23  aggregate functions, group by, having",
    "section": "23.8 Don’t mix aggregate functions with non-aggregated data",
    "text": "23.8 Don’t mix aggregate functions with non-aggregated data\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# DO NO MIX AGGREGATE FUNCTIONS WITH NON-AGGREGATED DATA.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# IN MANY SQL DBMS's YOU WILL GET AN ERROR IF YOU TRY TO DO THIS.\n# sqlite does NOT report an error if you do this but the results will not \n# make much sense. \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# The following shows that in sqlite when you mix aggregate functions \n# with non-aggregated data the results are confusing. Don't do this!\n# Some DBMS's will return an ERROR for this query. sqlite does not return\n# an error but the results are very misleading.\n#\n# For example the following is the result of the code below:\n#\n#    &gt; sqldf(\"select avg(price), sum(pages),  title_name, type\n#             from titles\")\n# \n#       avg(price) sum(pages) title_name    type\n#          18.3875       5107      1977! history\n# \n# The avg function and the sum function return aggregagated data for all of\n# the rows in the titles table. Specically the average price of all the books\n# and the total number of pages from all the books. \n# \n# However, the title_name and type columns simply display\n# the name of a specific book. The title_name and type that is displayed\n# has nothing to do with the avg(price) and sum(pages). The exact book \n# that is displayed is really not predictable.\n#\n# Bottom line - do NOT mix aggregrate functions, e.g. avg(price), sum(paes)\n# with non-aggregated data, e.g. title_name, type\n\n# DON'T DO THIS!!! - see the comment above.\nsqldf(\"select avg(price), sum(pages),  title_name, type\n      from titles\")\n\nError in sqldf(\"select avg(price), sum(pages),  title_name, type\\n      from titles\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#count-function---three-different-versions",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#count-function---three-different-versions",
    "title": "23  aggregate functions, group by, having",
    "section": "23.9 count function - three different versions",
    "text": "23.9 count function - three different versions\n\n#--------------------------------------------------------------------\n# count function - three different versions\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The count function counts the number of rows returned.\n# There are three different versions of the count function\n#\n#   count(SOME_COLUMN) \n#\n#     This returns the number of rows for the column that are NOT NULL. \n#     (Remember that in SQL NULL is basically the same as NA in R. \n#      Since we are using sqldf to analyze R dataframes instead of actual \n#      database tables, NA, is treated as NULL\n#      ie. when using sqldf, count(SOME_COLUMN) will return the number of \n#          rows in that column that don't contain NA.\n#\n#   count(*) - returns the number of rows. This version counts all rows, including\n#              NULL values and non-distinct values\n#              Note that count is the ONLY aggregate function that can be used \n#              in this way.\n#\n#   count(distinct SOME_COLUMN) - Returns the number of DISTINCT values\n#                                 (i.e. different unique values) in the column.\n#                                 Note that other aggregate functions MAY ALSO\n#                                 be used in this way, eg. avg(distinct price) \n#                                 will average the distinct prices.\n#                                 \n#--------------------------------------------------------------------\n\n# show all of the data in the titles table\nsqldf(\"select * from titles\")\n\nError in sqldf(\"select * from titles\"): could not find function \"sqldf\"\n\n# show various aggregate function values for the titles column\nsqldf(\"select sum(price) , avg(price) , avg(DISTINCT price), count(*), count(price) , count(DISTINCT price), min(price) , max(price), count(type), count(DISTINCT type)\n      from titles\")\n\nError in sqldf(\"select sum(price) , avg(price) , avg(DISTINCT price), count(*), count(price) , count(DISTINCT price), min(price) , max(price), count(type), count(DISTINCT type)\\n      from titles\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#min-and-max-also-work-with-character-columns.",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#min-and-max-also-work-with-character-columns.",
    "title": "23  aggregate functions, group by, having",
    "section": "23.10 min and max also work with character columns.",
    "text": "23.10 min and max also work with character columns.\n\n# min and max also work with character columns.\n#\n# min value of a character column is the value that would appear FIRST in alphabetical order.\n# max value of a character column is the value that would appear LAST  in alphabetical order.\nsqldf(\"select min(type), max(type), count(*), count(type), count(DISTINCT type)\n      from titles\")\n\nError in sqldf(\"select min(type), max(type), count(*), count(type), count(DISTINCT type)\\n      from titles\"): could not find function \"sqldf\"\n\n# QUESTION\n# WRite a query to display the different types of books. \n# Sort the results alphabetically.\n# Only include each type once.\nsqldf(\"select distinct type from titles order by type asc\")\n\nError in sqldf(\"select distinct type from titles order by type asc\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#two-diffferent-meanings-of-distinct",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#two-diffferent-meanings-of-distinct",
    "title": "23  aggregate functions, group by, having",
    "section": "23.11 two diffferent meanings of “distinct”",
    "text": "23.11 two diffferent meanings of “distinct”\n\n#--------------------------------------------------------------------\n# two diffferent meanings of \"distinct\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The word \"distinct\" means two toally different things based on \n# where it appears in the select command.\n#\n# 1. select ... count (distinct SOME_COLUMN) ...\n#   \n#    see above\n#\n#\n# 2. select distinct COLUMN1, COLUMN2, ...\n#\n#    When \"distinct\" appears right after the word select, it \n#    means that the output should not include rows that are \n#    exact duplicates of each other - in that case only one of the \n#    duplicates is returned.\n# \n#--------------------------------------------------------------------\n\n# show all the different types of titles (do not show duplicates)\nsqldf(\"select DISTINCT type\n      from titles\")\n\nError in sqldf(\"select DISTINCT type\\n      from titles\"): could not find function \"sqldf\"\n\n# show just the entire contents of the type column\nsqldf(\"select type\n      from titles\")\n\nError in sqldf(\"select type\\n      from titles\"): could not find function \"sqldf\"\n\n#---------------------------------------------------------------------\n# \"select distinct ...\"  works on ENTIRE ROWS, not individual columns.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Compare the following two queries. Notice that distinct works on entire\n# rows of output to eliminate those rows that are duplicates. \n#\n# Queries that contain more than one column  could still result with duplicate\n# values in each column even when DISTINCT is specified. DISTINCT only serves\n# to eliminate entire rows of data that are exact duplicates.\n#\n# compare the following 2 queries ...\n#---------------------------------------------------------------------\n\n# show the entire contents of the type and pub_id columns\n# sort the results by type and then by pub_id within each type\n#\n# notice in the output that some rows are exact duplicates of each other\nsqldf(\"select type, pub_id\n      from titles\n      order by type, pub_id\")\n\nError in sqldf(\"select type, pub_id\\n      from titles\\n      order by type, pub_id\"): could not find function \"sqldf\"\n\n# Do the same thing but use \"distinct\" to eliminate the duplicate rows.\n# \n# Notice in the output that even though \"distinct\" is specified, each column\n# in the result DOES have duplicate values. Hoewver, there are no rows in the\n# output that are exact duplicates of each other.\n\nsqldf(\"select distinct type, pub_id\n      from titles\n      order by type, pub_id\")\n\nError in sqldf(\"select distinct type, pub_id\\n      from titles\\n      order by type, pub_id\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#using-were-in-queries-that-contain-aggregate-functions",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#using-were-in-queries-that-contain-aggregate-functions",
    "title": "23  aggregate functions, group by, having",
    "section": "23.12 Using WERE in queries that contain aggregate functions",
    "text": "23.12 Using WERE in queries that contain aggregate functions\n\n#-----------------------------------------------------------------------------\n# Using WERE in queries that contain aggregate functions\n#-----------------------------------------------------------------------------\n#\n# Aggregate functions work only on rows that are included by the WHERE clause.\n# \n#-----------------------------------------------------------------------------\n\n# show the complete titles table\nsqldf (\"select * from titles\")\n\nError in sqldf(\"select * from titles\"): could not find function \"sqldf\"\n\n# show the number of titles in the titles table\n# The highest price and the average price.\nsqldf( \"select count(*), max(price), avg(price) \n        from titles\")\n\nError in sqldf(\"select count(*), max(price), avg(price) \\n        from titles\"): could not find function \"sqldf\"\n\n# show the number of biographies,\n# the highest price for a biography and the average price for a biography\n# HINT: use the where clause\nsqldf( \"select count(*), max(price), avg(price)\n        from titles\n        where type = 'biography'\")\n\nError in sqldf(\"select count(*), max(price), avg(price)\\n        from titles\\n        where type = 'biography'\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice-1",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice-1",
    "title": "23  aggregate functions, group by, having",
    "section": "23.13 Practice",
    "text": "23.13 Practice\n\n#-----------------------------------------------------------------------------\n# \n# Practice Questions\n#\n#-----------------------------------------------------------------------------\n\n#-----------------------------------------------------------------------------\n# Question:\n#-----------------------------------------------------------------------------\n# Write a query that shows the names of the authors who have written at least one book\n# for which they got 1.00 of the royalty share.\n# Display the author's names in alphabetical order.\n# Do not repeat the same author's name twice\n#\n# HINTS\n# 1. Which tables do you need to include in your query?\n#    Make sure to join all of those tables and any intervening tables\n# \n# 2. Use DISTINCT at the front of your query to eliminate duplicate rows.\n#\n# 3. Use \"order by\" to display the author's names in alphabetical order. Remember\n#    that last name is more significant than first name when arranging names\n#    in alphabetical order.\n#-----------------------------------------------------------------------------\n\n# Answer:\n\nsqldf(\"select distinct au_fname, au_lname\n       from authors join title_authors on authors.au_id = title_authors.au_id\n       where royalty_shares = 1.0\n       order by au_lname asc, au_fname asc\")\n\nError in sqldf(\"select distinct au_fname, au_lname\\n       from authors join title_authors on authors.au_id = title_authors.au_id\\n       where royalty_shares = 1.0\\n       order by au_lname asc, au_fname asc\"): could not find function \"sqldf\"\n\n# notice what will happen if you leave out the distinct\nsqldf(\"select au_fname, au_lname\n       from authors join title_authors on authors.au_id = title_authors.au_id\n       where royalty_shares = 1.0\n       order by au_lname asc, au_fname asc\")\n\nError in sqldf(\"select au_fname, au_lname\\n       from authors join title_authors on authors.au_id = title_authors.au_id\\n       where royalty_shares = 1.0\\n       order by au_lname asc, au_fname asc\"): could not find function \"sqldf\"\n\n#-----------------------------------------------------------------------------\n# Question\n#-----------------------------------------------------------------------------\n# Write a query that shows the names of the authors who have written at least one book\n# for which the book has a royalty_rate of at least .06\n# Display the author's names in alphabetical order.\n# Do not repeat the same author's name twice.\n\n# HINTS\n# 1. which tables do you need to include in your query?\n#    make sure to join all of those tables and any intervening tables\n# \n# 2. Use DISTINCT at the front of your query to eliminate duplicate rows.\n#\n# 3. Use \"order by\" to display the author's names in alphabetical order. Remember\n#    that last name is more significant than first name when arranging names\n#    in alphabetical order.\n#-----------------------------------------------------------------------------\n\n\n# First attempt ...\n# Not the answer yet ...\n# Let's start out by including the royalty_rate in the select clause. This lets\n# us see that we indeed are only getting authors who contributed to a book \n# whose royalty rate was at least .06. \n#\n# The problem with the following is that because we are including the royalty_rate\n# in the output we will get some authors more than once since the royalty_rate\n# may be different for different books that they worked on.\n\nsqldf(\" select distinct au_fname, au_lname, royalty_rate\n        from authors join title_authors on authors.au_id = title_authors.au_id\n                     join titles        on title_authors.title_id = titles.title_id\n                     join royalties     on titles.title_id = royalties.title_id\n        where royalty_rate &gt; .05\n        order by au_lname, au_fname\n      \")\n\nError in sqldf(\" select distinct au_fname, au_lname, royalty_rate\\n        from authors join title_authors on authors.au_id = title_authors.au_id\\n                     join titles        on title_authors.title_id = titles.title_id\\n                     join royalties     on titles.title_id = royalties.title_id\\n        where royalty_rate &gt; .05\\n        order by au_lname, au_fname\\n      \"): could not find function \"sqldf\"\n\n# Final answer\n# Let's now take out the royalty_rate from the select clause. This will serve\n# to have every author only be displayed once since the distinct will eliminate\n# rows that are duplicates of each other.\nsqldf(\" select distinct au_fname, au_lname\n        from authors join title_authors on authors.au_id = title_authors.au_id\n                     join titles        on title_authors.title_id = titles.title_id\n                     join royalties     on titles.title_id = royalties.title_id\n        where royalty_rate &gt; .06\n        order by au_lname, au_fname\n      \")\n\nError in sqldf(\" select distinct au_fname, au_lname\\n        from authors join title_authors on authors.au_id = title_authors.au_id\\n                     join titles        on title_authors.title_id = titles.title_id\\n                     join royalties     on titles.title_id = royalties.title_id\\n        where royalty_rate &gt; .06\\n        order by au_lname, au_fname\\n      \"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#reminder-about-how-multiple-joins-work",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#reminder-about-how-multiple-joins-work",
    "title": "23  aggregate functions, group by, having",
    "section": "23.14 Reminder about how multiple joins work",
    "text": "23.14 Reminder about how multiple joins work\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Reminder about how multiple joins work\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Remember that every INNER JOIN (which contains an ON clause)\n# is the same as doing a cross join followed by removing the rows from the\n# cross join that don't match the on clause of the inner join.\n# The condition in the ON clause would work the same way if instead it \n# were part of the WHERE clause.\n#\n# Also remember that when you join multiple tables, the first two tables \n# are joined (as described in the previous paragraph). Then the rows and\n# columns that resulted from the first join are joined to the next table in the\n# same way (i.e a cross join of rows from the result with the rows from the\n# 2nd table followed by removing the rows that don't match the corresponding\n# on clause). This keeps happening for all the tables. The entire process\n# happens automatically when you specify the inner joins correctly.\n#\n# For example, if you run the following query, you will get the output shown\n# below.\n#\n#   QUERY:\n#\n#       sqldf(\" select distinct au_fname, au_lname\n#               from authors join title_authors on authors.au_id = title_authors.au_id\n#                            join titles        on title_authors.title_id = titles.title_id\n#                            join royalties     on titles.title_id = royalties.title_id\n#               where royalty_rate &gt; .06\n#               order by au_lname, au_fname\n#             \")\n#\n#   OUTPUT:\n#\n#           au_fname     au_lname\n#              Wendy    Heydemark\n#             Hallie         Hull\n#               Klee         Hull\n#          Christian        Kells\n#             Harvey      Kellsey      \n#\n#\n# The output looks very short and simple. It has five rows and two columns.\n# However, in order to arrive at this output, the database must go through\n# several steps to process the SQL query. At each step of the internal\n# processing there is an \"intermediate result\" that you normally would not see. \n#\n# Below, we demonstrate step by step what actually happens internally when\n# the database performs the query. I recommend that you look at\n# the output of each step to better understand the process:\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# 1st step - \n#\n# The following part of the \"from clause\" in the above query is done first:\n#\n#    select ...                             (SELECT CLAUSE IS DONE LATER)\n#    from authors join title_authors ...    (ON CLAUSE IS DONE LATER)\n#                 ...                       (OTHER JOINS ARE DONE LATER)\n#    where ...                              (WHERE CLAUSE IS DONE LATER)\n#    order by ...                           (ORDER BY CLAUSE IS DONE LATER)\n#\n# Notice that this query does an \"inner join\" (or in other words, a plain\n# \"join\"). However, what actually happens behind the scenes is that these\n# two tables are really CROSS JOINED and then the extra rows from the \n# \"cross join\" that don't satisfy the on clause of the inner join are\n# removed..\n#\n# At this point, the \"select clause\" has not executed yet so all columns from \n# both tables are still part of this intermediate result. In the output \n# of the following command every row contains 12 columns. The first 8 columns,\n# come from authors table and the last 4 come from the title_authors table.\n# \n#   The columns from the authors table are: \n#\n#     au_id, au_fname, au_lname, phone, address, city, state, zip\n# \n#   and the columns from the title_authors table are:\n#\n#     title_id, au_id, au_order, royalty_share\n#\n# Notice that in a single row of this intermediate output, the value of the\n# au_id from the authors table and the value of the au_id from the title_authors\n# table do NOT necessarily match\n\nsqldf(\"select authors.*, title_authors.* \n      from authors CROSS JOIN title_authors\")\n\nError in sqldf(\"select authors.*, title_authors.* \\n      from authors CROSS JOIN title_authors\"): could not find function \"sqldf\"\n\n# 2nd step - \n#\n# The on clause is applied to the results from the previous step 1 to eliminate\n# those rows from the cross join that don't match the on clause specified\n# in the query. Notice that in the results of the following command the \n# first au_id and the second au_id \n\nsqldf(\"select authors.*, title_authors.*\n      from authors join title_authors on authors.au_id = title_authors.au_id\")\n\nError in sqldf(\"select authors.*, title_authors.*\\n      from authors join title_authors on authors.au_id = title_authors.au_id\"): could not find function \"sqldf\"\n\n# 3rd step - \n\nsqldf(\"select authors.*, title_authors.*, titles.*\n      from authors join title_authors on authors.au_id = title_authors.au_id\n                   join titles        on title_authors.title_id = titles.title_id\")\n\nError in sqldf(\"select authors.*, title_authors.*, titles.*\\n      from authors join title_authors on authors.au_id = title_authors.au_id\\n                   join titles        on title_authors.title_id = titles.title_id\"): could not find function \"sqldf\"\n\n# 4th step - join royalties on titles.title_id = royalties.title_id\n\nsqldf(\"select authors.*, title_authors.*, titles.*, royalties.*\n      from authors join title_authors on authors.au_id = title_authors.au_id\n                   join titles        on title_authors.title_id = titles.title_id\n                   join royalties     on titles.title_id = royalties.title_id\")\n\nError in sqldf(\"select authors.*, title_authors.*, titles.*, royalties.*\\n      from authors join title_authors on authors.au_id = title_authors.au_id\\n                   join titles        on title_authors.title_id = titles.title_id\\n                   join royalties     on titles.title_id = royalties.title_id\"): could not find function \"sqldf\"\n\n# 5th step - where\n\nsqldf(\"select authors.*, title_authors.*, titles.*, royalties.*\n               from authors join title_authors on authors.au_id = title_authors.au_id\n                            join titles        on title_authors.title_id = titles.title_id\n                            join royalties     on titles.title_id = royalties.title_id\n               where royalty_rate &gt; .06\n             \")\n\nError in sqldf(\"select authors.*, title_authors.*, titles.*, royalties.*\\n               from authors join title_authors on authors.au_id = title_authors.au_id\\n                            join titles        on title_authors.title_id = titles.title_id\\n                            join royalties     on titles.title_id = royalties.title_id\\n               where royalty_rate &gt; .06\\n             \"): could not find function \"sqldf\"\n\n# 6th step - order by \n       \nsqldf(\"select authors.*, title_authors.*, titles.*, royalties.*\n               from authors join title_authors on authors.au_id = title_authors.au_id\n                            join titles        on title_authors.title_id = titles.title_id\n                            join royalties     on titles.title_id = royalties.title_id\n               where royalty_rate &gt; .06\n               order by au_lname, au_fname\n             \")\n\nError in sqldf(\"select authors.*, title_authors.*, titles.*, royalties.*\\n               from authors join title_authors on authors.au_id = title_authors.au_id\\n                            join titles        on title_authors.title_id = titles.title_id\\n                            join royalties     on titles.title_id = royalties.title_id\\n               where royalty_rate &gt; .06\\n               order by au_lname, au_fname\\n             \"): could not find function \"sqldf\"\n\n# 7th step - select\n\nsqldf(\"select au_fname, au_lname\n               from authors join title_authors on authors.au_id = title_authors.au_id\n                            join titles        on title_authors.title_id = titles.title_id\n                            join royalties     on titles.title_id = royalties.title_id\n               where royalty_rate &gt; .06\n               order by au_lname, au_fname\n             \")\n\nError in sqldf(\"select au_fname, au_lname\\n               from authors join title_authors on authors.au_id = title_authors.au_id\\n                            join titles        on title_authors.title_id = titles.title_id\\n                            join royalties     on titles.title_id = royalties.title_id\\n               where royalty_rate &gt; .06\\n               order by au_lname, au_fname\\n             \"): could not find function \"sqldf\"\n\n# 6th step - select distinct\n\nsqldf(\"select DISTINCT au_fname, au_lname\n               from authors join title_authors on authors.au_id = title_authors.au_id\n                            join titles        on title_authors.title_id = titles.title_id\n                            join royalties     on titles.title_id = royalties.title_id\n               where royalty_rate &gt; .06\n               order by au_lname, au_fname\n             \")\n\nError in sqldf(\"select DISTINCT au_fname, au_lname\\n               from authors join title_authors on authors.au_id = title_authors.au_id\\n                            join titles        on title_authors.title_id = titles.title_id\\n                            join royalties     on titles.title_id = royalties.title_id\\n               where royalty_rate &gt; .06\\n               order by au_lname, au_fname\\n             \"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#warning---if-where-clause-removes-all-rows-then-avgsummaxmin-return-null",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#warning---if-where-clause-removes-all-rows-then-avgsummaxmin-return-null",
    "title": "23  aggregate functions, group by, having",
    "section": "23.15 WARNING - If where clause removes all rows then avg,sum,max,min return NULL",
    "text": "23.15 WARNING - If where clause removes all rows then avg,sum,max,min return NULL\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# WARNING : If no rows are returned by the where clause, then the \n#           aggregate functions (except for count) all return NULL\n#  \n#           Note that since we are using R dataframes instead\n#           of tables, NULL will be displayed as NA\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# No rows match the where - result of all aggregate functions, except count \n# is NULL (i.e. NA in R)\n\nsqldf(\"select count(*), sum(pages), avg(pages), min(pages), max(pages)\n      from titles\n      where type = 'this type does not exist' \")\n\nError in sqldf(\"select count(*), sum(pages), avg(pages), min(pages), max(pages)\\n      from titles\\n      where type = 'this type does not exist' \"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice-2",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice-2",
    "title": "23  aggregate functions, group by, having",
    "section": "23.16 Practice",
    "text": "23.16 Practice\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# show the total number of cookbooks (i.e. type = 'cookbook')\n#          total number of pages in all the cookbooks\n#          and the average number of pages in cookbooks\n#\n# NOTE that since there are currently no cookbooks in the table\n# there will be no rows returned by the where clause. Therefore\n# the sum and the avg will be NULL (i.e. NA in R)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select count(*), sum(pages), avg(pages)\n      from titles\n      where type = 'cookbook'\")\n\nError in sqldf(\"select count(*), sum(pages), avg(pages)\\n      from titles\\n      where type = 'cookbook'\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#dont-use-aggregate-functions-non-aggregated-values-in-same-select-clause",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#dont-use-aggregate-functions-non-aggregated-values-in-same-select-clause",
    "title": "23  aggregate functions, group by, having",
    "section": "23.17 DON’T use aggregate functions & non-aggregated values in same select clause",
    "text": "23.17 DON’T use aggregate functions & non-aggregated values in same select clause\n\n##################################################################\n#\n# WARNING : \n#\n# DO NOT include both aggregate function and non-aggregated values\n# in the same select clause\n#\n#    (NOTE - it may help to look at the example below before reading further)\n#\n# BECAUSE ...    \n#\n# The aggregate function will return fewer rows than the \n# non-aggregated data. This presents a problem for SQL because\n# there is a contradiction as to how many rows should be shown!\n#\n# In many many versions of SQL, such queries would generate an ERROR!\n#\n# In SQLite, this query doesn't generate an error. Rather, the query \n# will only return one row. The values of the non-aggregate column\n# will be the first value that would have appeared for that non-aggregate\n# column if the aggregate function was not present.\n#\n# See this page for an in-depth analysis of this issue: \n#   https://www.dataquest.io/blog/sql-tutorial-selecting-ungrouped-columns-without-aggregate-functions/\n##################################################################\n\n\n# The output of the following produces ONE row\nsqldf(\"select avg(price) from titles\")\n\nError in sqldf(\"select avg(price) from titles\"): could not find function \"sqldf\"\n\n# The output of the following produces MORE THAN ONE row\nsqldf(\"select title_name from titles\")\n\nError in sqldf(\"select title_name from titles\"): could not find function \"sqldf\"\n\n# The following will generate an ERROR in MANY MANY versions of SQL.\n# since avg(price) should return ONE number, but there are many different\n# values for title_name.\n#\n# SQLite allows this type of query but the results are confusing.\n# Since the avg generates only a single number, the following results in\n# only a single row with only one particular title even though there are\n# many different title_names.\n\n# DON'T DO THIS!!! (see the comment above)\nsqldf(\"select avg(price) , title_name from titles\")\n\nError in sqldf(\"select avg(price) , title_name from titles\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#order-of-clauses-select-from-where-group-by-having-order-by-limit",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#order-of-clauses-select-from-where-group-by-having-order-by-limit",
    "title": "23  aggregate functions, group by, having",
    "section": "23.18 ORDER OF CLAUSES: select, from, where, group by, having, order by, limit",
    "text": "23.18 ORDER OF CLAUSES: select, from, where, group by, having, order by, limit\n\n# REMEMBER\n#    While select statements don't always need to use every clause, \n#    the clauses that are in a statement must appear in the following order:\n#\n# select ...\n# from ...\n# where ...\n# group by ...\n# having ...\n# order by ...\n# limit ...",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#group-by-affects-how-aggregate-functions-work",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#group-by-affects-how-aggregate-functions-work",
    "title": "23  aggregate functions, group by, having",
    "section": "23.19 GROUP BY affects how aggregate functions work",
    "text": "23.19 GROUP BY affects how aggregate functions work\n\n#################################################################\n# group by COLUMN1, COLUMN2, ...\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The \"group by\" clause has a direct effect on how aggregate functions work.\n#\n# As we've seen above, when a query contains an\n# aggregate function \n#   (and does not contain a group by clause -\n#    remember we didn't start discussing \"group by\" until just now),\n# the query will return a single row. The single row\n# of output would contain the result of applying the aggregate function(s)\n# to all of the rows from the table that satisfied the where clause.\n#\n# By contrast, a query that contains aggregate functions, and also contains\n# a group by clause, could return more than one row of output, i.e. one row of\n# output for each \"group\" of rows from the original table(s) [... keep reading ...] \n#\n# The group by clause specifies one or more columns. The rows from the table(s)\n# that contain the same values for these columns constitute a logical \"group\" of\n# rows. For example the following shows the format of a query that gets info\n# from the titles table. A lot of the query was left out because for now \n# I want to focus just on \"from titles\" and \"group by type\"\n#\n#     select ... (specify what you want to select)\n#     from titles\n#     ... (more stuff from the qeury)\n#     group by type\n#\n# This query segments the rows from the titles table into\n# different \"groups\". \n#   There will be one     \"group\" that contains all rows with type='biography'.\n#   There will be another \"group\" that contains all rows with type='childrens'.\n#   There will be another \"group\" that contains all rows with type='computer'.\n#   etc. \n#\n# If the query were to include aggregate functions, the output would indlude\n# one row for each \"group\" of rows from the original table. This is \n# best explained with an example:\n#################################################################",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice-3",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice-3",
    "title": "23  aggregate functions, group by, having",
    "section": "23.20 Practice",
    "text": "23.20 Practice\n\n# First let's look at all of the types and prices in order\nsqldf(\"select type, price \n      from titles \n      order by type, price\")\n\nError in sqldf(\"select type, price \\n      from titles \\n      order by type, price\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Write a query that returns the following for each \n# type of book (i.e. \"childrens\", \"computer\", etc)\n#\n#     the number of copies of each type \n#     the average price of all books of that type\n#     the max price of all books of that type\n#     the min price of all books of that type\n#\n# HINT: use group by to create different groups of rows from the original table\n#       All the rows with the same value for type will be part of the same group.\n#       Then use the avg(price) function to get the average price for each type.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select type, count(*), avg(price), max(price), min(price)\n      from titles\n      group by type\n      order by type\")\n\nError in sqldf(\"select type, count(*), avg(price), max(price), min(price)\\n      from titles\\n      group by type\\n      order by type\"): could not find function \"sqldf\"\n\n# To make the output easier to read, change the code to display \"#copies\"\n# instead of count(*) at the top of that column in the output.\n\nsqldf(\"select type, count(*) as '#copies', avg(price), max(price), min(price)\n      from titles\n      group by type\n      order by type\")\n\nError in sqldf(\"select type, count(*) as '#copies', avg(price), max(price), min(price)\\n      from titles\\n      group by type\\n      order by type\"): could not find function \"sqldf\"\n\nsqldf(\"select count(*) as '#copies', avg(price), max(price), min(price)\n      from titles\")\n\nError in sqldf(\"select count(*) as '#copies', avg(price), max(price), min(price)\\n      from titles\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#group-by-more-than-one-column",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#group-by-more-than-one-column",
    "title": "23  aggregate functions, group by, having",
    "section": "23.21 GROUP BY more than one column",
    "text": "23.21 GROUP BY more than one column\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# GROUP BY more than one column\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The GROUP BY may contain more than one column. \n# This in effect creates a group from all rows that have the same value\n# for all of the specified columns.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# First let's look at the types, pub_id's, titles and prices of all books in order\nsqldf(\"select type, pub_id, price, title_name\n       from titles\n       order by type, pub_id, price\")\n\nError in sqldf(\"select type, pub_id, price, title_name\\n       from titles\\n       order by type, pub_id, price\"): could not find function \"sqldf\"\n\n# Now let's create groups and show how many titles in each group.\nsqldf(\"select type, pub_id, count(*)\n       from titles\n       group by type, pub_id\n       order by type, pub_id\")\n\nError in sqldf(\"select type, pub_id, count(*)\\n       from titles\\n       group by type, pub_id\\n       order by type, pub_id\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice-4",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#practice-4",
    "title": "23  aggregate functions, group by, having",
    "section": "23.22 Practice",
    "text": "23.22 Practice\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Write a query that returns the average price, max price and min price of each\n# type of book (i.e. \"childrens\", \"computer\", etc) that is published by each \n# publisher.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# IMPORTANT - REMEMBER ... \n# Clauses in a SELECT statement must appear in the following order:\n# All of the clauses are optional except for the \"select\" clause.\n#\n#   select ...\n#   from ...\n#   where ...\n#   group by  ...\n#   having ...\n#   order by ...\n#   limit ...       (limit is not part of the SQL standard but is part of many versions of SQL)\n\n\n# ANSWER\n#\n# In the output of the following command, note that only one row is\n# shown for each type/pub_id combination\n\nsqldf(\"select type, pub_id, count(*) as '#copies', avg(price), min(price), max(price)\n      from titles\n      group by type, pub_id\n      order by type\")\n\nError in sqldf(\"select type, pub_id, count(*) as '#copies', avg(price), min(price), max(price)\\n      from titles\\n      group by type, pub_id\\n      order by type\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# rewrite the order by of the previous query so that all books by the same publisher\n# appear together in consecutive rows (i.e. rows that are \"one after the other\" for \n# the same publisher)\n#\n# Note it makes no difference which column is listed first in the group by \n#      it DOES make a difference which column is listed first in the order by\n\n# ANSWER\n\nsqldf(\"select type, pub_id, avg(price), count(*), min(price), max(price), sum(price)\n      from titles\n      group by type, pub_id   \n      order by pub_id, type\")\n\nError in sqldf(\"select type, pub_id, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles\\n      group by type, pub_id   \\n      order by pub_id, type\"): could not find function \"sqldf\"\n\n# Change the order of the pub_id and the type in the select so that the output is easier to read.\n\nsqldf(\"select pub_id, type, avg(price), count(*), min(price), max(price), sum(price)\n      from titles\n      group by type, pub_id\n      order by pub_id, type\")\n\nError in sqldf(\"select pub_id, type, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles\\n      group by type, pub_id\\n      order by pub_id, type\"): could not find function \"sqldf\"\n\n# WARNING - THE FOLLOWING QUERY IS WRONG SINCE title_name IS NOT AN AGGREGATE\n# FUNCTION AND IS ALSO NOT IN THE GROUP BY CLAUSE.\n# \n# SOME Database Management Systems (DBMS) WILL RETURN AN ERROR FOR THE \n# FOLLOWING QUERY, WHEREAS SQLITE, the database that R sqldf uses by default,\n# DOESN'T REUTRN AN ERROR BUT RATHER RETURNS CONFUSING RESULTS. -- DON'T DO THIS!\n\nsqldf(\"select pub_id, type, title_name, avg(price), count(*), min(price), max(price), sum(price)\n      from titles\n      group by type, pub_id\n      order by pub_id, type\")\n\nError in sqldf(\"select pub_id, type, title_name, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles\\n      group by type, pub_id\\n      order by pub_id, type\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# QUESTION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Rewrite the previous query to show the publisher's name instead of the publisher's id\n# \n# HINTS\n# - you must join the appropriate tables\n#\n# - since the query has a group by, the select clause should only refer to \n#   aggregate functions and to columns that appear in the group by.\n#\n#   The select clause should NOT refer to columns that do not appear in the group by.\n#   Since we want to display the publisher's name we should also group by \n#   the publisher's name instead of the pub_id.\n#   \n#   NOTE - that this is reasonable to do since for all rows with the same\n#          pub_id, the publisher's name is guaranteed to be the same \n#          (think about it)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# show one row for each title.\n#\n# Show the info from the title table and the associated info\n# from the publisher's table in the single row of output for each title.\n\nsqldf(\"select titles.*, publishers.*\n      from titles join publishers on titles.pub_id = publishers.pub_id\n      order by pub_name, type\")\n\nError in sqldf(\"select titles.*, publishers.*\\n      from titles join publishers on titles.pub_id = publishers.pub_id\\n      order by pub_name, type\"): could not find function \"sqldf\"\n\n# Show the pub_name in the output (not just the pub_id)\n# along with aggregate info for that publisher and type of book.\n#\n# In ANSI standard SQL and in most DBMS software (e.g. oracle, MySql, Postgres)\n# We need to include pub_name in the group by if we will include it in the \n# output. \n\nsqldf(\"select pub_name, type, avg(price), count(*), min(price), max(price), sum(price)\n      from titles join publishers on titles.pub_id = publishers.pub_id\n      group by type, pub_name\n      order by pub_name, type\")\n\nError in sqldf(\"select pub_name, type, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles join publishers on titles.pub_id = publishers.pub_id\\n      group by type, pub_name\\n      order by pub_name, type\"): could not find function \"sqldf\"\n\n# SQLite will allow the pub_name in the select clause even if it isn't\n# in the group by. However, you should avoid this - it isn't standard ANSI SQL.\n\nsqldf(\"select pub_name, type, avg(price), count(*), min(price), max(price), sum(price)\n      from titles join publishers on titles.pub_id = publishers.pub_id\n      group by type, publishers.pub_id\n      order by pub_name, type\")\n\nError in sqldf(\"select pub_name, type, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles join publishers on titles.pub_id = publishers.pub_id\\n      group by type, publishers.pub_id\\n      order by pub_name, type\"): could not find function \"sqldf\"\n\n# Rewrite the previous query to only group by the pub_name and not by the type.\n#\n# HINTS - because the type is not part of the group by it should also be eliminated\n#         from the select clause and the order by clause\n\nsqldf(\"select pub_name, avg(price), count(*), min(price), max(price), sum(price)\n      from titles join publishers on titles.pub_id = publishers.pub_id\n      group by pub_name\n      order by pub_name\")\n\nError in sqldf(\"select pub_name, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles join publishers on titles.pub_id = publishers.pub_id\\n      group by pub_name\\n      order by pub_name\"): could not find function \"sqldf\"\n\n#``````````````````````````````````````````````````````````````````````````````\n# SQLite doesn't follow the standard exactly ..\n#``````````````````````````````````````````````````````````````````````````````\n# Note that the SQL standard does not allow for column names in the select and order by \n# clauses that are not also part of the group by.\n# However, SQLite, does not report an error in these cases and the output could be\n# confusing. The following output shows a type, but the avg and other aggregate functions\n# include ALL types, not just the one shown.\n#\n\n# See these page for a description of the issue and suggestions for workarounds:\n#\n#   https://www.dataquest.io/blog/sql-tutorial-selecting-ungrouped-columns-without-aggregate-functions/\n#\n#   https://learnsql.com/blog/not-a-group-by-expression-error/\n#\n#\n# See this page for the official SQLite documentation \n# Below is an excerpt of the relevant info from this page.\n#   \n#   https://www.sqlite.org/lang_select.html#bareagg\n\n        # 2.5. Bare columns in an aggregate query The usual case is that all column\n        # names in an aggregate query are either arguments to aggregate functions or\n        # else appear in the GROUP BY clause. A result column which contains a column\n        # name that is not within an aggregate function and that does not appear in the\n        # GROUP BY clause (if one exists) is called a \"bare\" column. Example:\n        #\n        # SELECT a, b, sum(c) FROM tab1 GROUP BY a; In the query above, the \"a\" column\n        # is part of the GROUP BY clause and so each row of the output contains one of\n        # the distinct values for \"a\". The \"c\" column is contained within the sum()\n        # aggregate function and so that output column is the sum of all \"c\" values in\n        # rows that have the same value for \"a\". But what is the result of the bare\n        # column \"b\"? The answer is that the \"b\" result will be the value for \"b\" in one\n        # of the input rows that form the aggregate. The problem is that you usually do\n        # not know which input row is used to compute \"b\", and so in many cases the\n        # value for \"b\" is undefined.\n        #\n        # Special processing occurs when the aggregate function is either min() or\n        # max(). Example:\n        #\n        # SELECT a, b, max(c) FROM tab1 GROUP BY a; If there is exactly one min() or\n        # max() aggregate in the query, then all bare columns in the result set take\n        # values from an input row which also contains the minimum or maximum. So in the\n        # query above, the value of the \"b\" column in the output will be the value of\n        # the \"b\" column in the input row that has the largest \"c\" value. There are\n        # limitations on this special behavior of min() and max():\n        #\n        # If the same minimum or maximum value occurs on two or more rows, then bare\n        # values might be selected from any of those rows. The choice is arbitrary.\n        # There is no way to predict from which row the bare values will be choosen. The\n        # choice might be different for different bare columns within the same query.\n        #\n        # If there are two or more min() or max() aggregates in the query, then bare\n        # column values will be taken from one of the rows on which one of the\n        # aggregates has their minimum or maximum value. The choice of which min() or\n        # max() aggregate determines the selection of bare column values is arbitrary.\n        # The choice might be different for different bare columns within the same\n        # query.\n        #\n        # This special processing for min() or max() aggregates only works for the\n        # built-in implementation of those aggregates. If an application overrides the\n        # built-in min() or max() aggregates with application-defined alternatives, then\n        # the values selected for bare columns will be taken from an arbitrary row.\n        #\n        # Most other SQL database engines disallow bare columns. If you include a bare\n        # column in a query, other database engines will usually raise an error. The\n        # ability to include bare columns in a query is an SQLite-specific extension.\n#\n#\n#``````````````````````````````````````````````````````````````````````````````\n\nsqldf(\"select pub_name, type, avg(price), count(*), min(price), max(price), sum(price)\n      from titles join publishers on titles.pub_id = publishers.pub_id\n      group by pub_name\n      order by pub_name\")\n\nError in sqldf(\"select pub_name, type, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles join publishers on titles.pub_id = publishers.pub_id\\n      group by pub_name\\n      order by pub_name\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#having-clause",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#having-clause",
    "title": "23  aggregate functions, group by, having",
    "section": "23.23 HAVING clause",
    "text": "23.23 HAVING clause\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# HAVING \n#\n#    group by COLUMN1, COLUMN2, ...\n#    having SOME_LOGICAL_EXPRESSION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Select statements that contain a \"group by\" MAY ALSO contain an optional \"having clause\".\n# Select statements that do not contain a \"group by\" may NOT contain \"having\"\n#\n# Both \"where\" and \"having\" clauses contain logical expression. \n#\n# Where an having clauses differ in the following ways:\n# \n# 1. \"where\"  eliminates individual rows from the original table that do not meet the conditions.\n#    \"having\" eliminates entire groups of rows that do not meet its conditions.\n#\n# 2. \"where\" may refer to any columns in the original tables, but may NOT refer to aggregate functions.\n#    \"having\" may ONLY refer to aggregate functions and column names that appear in the group by clause.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# Example\n\n# show all the data from the titles table\nsqldf(\"select * \n       from titles\n       order by type\")\n\nError in sqldf(\"select * \\n       from titles\\n       order by type\"): could not find function \"sqldf\"\n\n# Without having\nsqldf(\"select type, avg(price), count(*), min(price), max(price), sum(price)\n      from titles\n      group by type\n      order by type\")\n\nError in sqldf(\"select type, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles\\n      group by type\\n      order by type\"): could not find function \"sqldf\"\n\n# same query WITH THE ADDITION of \"having\" (note that having must come before \"order by\")\n#\n# Notice that the rows for groups that don't satisfy the having conditions \n# are eliminated from the output.\nsqldf(\"select type, avg(price), count(*), min(price), max(price), sum(price)\n      from titles\n      group by type\n      having count(*) &gt;=3 \n      order by type\")\n\nError in sqldf(\"select type, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles\\n      group by type\\n      having count(*) &gt;=3 \\n      order by type\"): could not find function \"sqldf\"\n\n# We can see the effect of the having in the above query by running\n# the same query WITHOUT the having\nsqldf(\"select type, avg(price), count(*), min(price), max(price), sum(price)\n      from titles\n      group by type\n      order by type\")\n\nError in sqldf(\"select type, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles\\n      group by type\\n      order by type\"): could not find function \"sqldf\"\n\n# The having clause's logical expression can be as complex as you want.\n#\n# Modify the previous select to show only types of books for which\n# - there are at least 3 books of that type\n#        and also \n# - the avg price is at least $20 or is less than or equal to  $10\n\nsqldf(\"select type, avg(price), count(*), min(price), max(price), sum(price)\n      from titles\n      group by type\n      having count(*) &gt;=3 and (avg(price) &gt;= 20 or avg(price) &lt;= 10)\n      order by type\")\n\nError in sqldf(\"select type, avg(price), count(*), min(price), max(price), sum(price)\\n      from titles\\n      group by type\\n      having count(*) &gt;=3 and (avg(price) &gt;= 20 or avg(price) &lt;= 10)\\n      order by type\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#using-where-and-having-in-the-same-query---a-detailed-analysis",
    "href": "sql0030-sqlFunctions_aggregateFunctions_groupBy_having-v019.html#using-where-and-having-in-the-same-query---a-detailed-analysis",
    "title": "23  aggregate functions, group by, having",
    "section": "23.24 using where and having in the same query - a detailed analysis",
    "text": "23.24 using where and having in the same query - a detailed analysis\n\n#############################################################################\n# using where and having in the same query\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# When a query runs the processing of the raw data in to the\n# final output happens in the following logical order\n#\n#   - FROM: all of the data from the tables is retrieved and joined into \n#           a single \"mega-table\" (mega-table is NOT a standard word). \n#\n#   - WHERE: the where clause eliminates rows from this \"mega-table\" that\n#            do not satisfy the where's logical expression\n#\n#   - GROUP BY: the remaining rows a \"grouped\" by the group by clause\n#\n#   - HAINVG:   the having clause works to eliminate groups that don't \n#               satisfy the having clause's logical expression\n#    \n#   - SELECT:   the select clause is used to generate the output of the \n#               aggregate functions \n#\n#   - ORDER BY: the resulting rows are ordered according to the \"order by\" clause\n#\n#   - LIMIT:    only the rows specified by the limit clause are shown\n#\n# To help you remember this, the clauses in a select statement must be specified\n# in the above order - EXCEPT that the select clause must be listed first. The designers\n# of SQL thought that since the select clause specifies which column appear in the \n# output it is important to see it first ...\n#\n# Notice that the where clause eliminates rows from the original tables\n# BEFORE the having clause eliminates groups. This can have an effect on the output\n# of queries that use both the where and having clauses.\n#\n##################################################################################\n\n\n#----------------------------------------------------\n# compare the following queries WITHOUT having\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The numbers are different in the 2nd query since \n# the where clause eliminated specific rows.\n# \n# After the where clause runs there are no childrens books\n# left and there are fewer biograph, history and psychology books.\n# The min and max page counts also are different to match the \n# books that are left after the where ran.\n# The only group that wasn't affected by the where was the\n# computer books.\n#  \n#----------------------------------------------------\n\n# group by ..\n\nsqldf(\"select type, count(*), count(pages), min(pages), max(pages)\n       from titles\n       GROUP BY TYPE\n       order by type\")\n\nError in sqldf(\"select type, count(*), count(pages), min(pages), max(pages)\\n       from titles\\n       GROUP BY TYPE\\n       order by type\"): could not find function \"sqldf\"\n\n# where ...\n# group by ..\n\nsqldf(\"select type, count(*), count(pages), min(pages), max(pages)\n       from titles\n       WHERE PAGES &gt; 350\n       GROUP BY TYPE\n       order by type\")\n\nError in sqldf(\"select type, count(*), count(pages), min(pages), max(pages)\\n       from titles\\n       WHERE PAGES &gt; 350\\n       GROUP BY TYPE\\n       order by type\"): could not find function \"sqldf\"\n\n#------------------------------------------------------------------\n# Let's see the actual rows that were affected by the where clause.\n# We'll do so by running a similar query WIHTOUT the GROUP BY.\n# We will display the actual data for each row.\n#-----------------------------------------------------------------\n\n# See the rows that were processed by the 1st query above.\n\nsqldf(\"select type, pages, title_name\n       from titles\n       order by type, pages, title_name\n      \")\n\nError in sqldf(\"select type, pages, title_name\\n       from titles\\n       order by type, pages, title_name\\n      \"): could not find function \"sqldf\"\n\n# Now let's add in the where clause to see the rows that were\n# processed by the 2nd query above.\n\nsqldf(\"select type, pages, title_name\n       from titles\n       WHERE PAGES &gt; 350\n       order by type, pages, title_name\n      \")\n\nError in sqldf(\"select type, pages, title_name\\n       from titles\\n       WHERE PAGES &gt; 350\\n       order by type, pages, title_name\\n      \"): could not find function \"sqldf\"\n\n# We can now see why we got the results we did when we \n# ran the versions of the queries with the GROUP BY and \n# the aggregate functions.\n\n\n#--------------------------------------------------------\n# If you use\n#     a where clause \n#     and a group by \n#     and a having\n#\n# The where clause runs then \n# the group by clause runs then\n# the having clause runs\n#--------------------------------------------------------\n\n# group by ...   (same as the 1st query above)\n\nsqldf(\"select type, count(*), count(pages), min(pages), max(pages)\n       from titles\n       GROUP BY TYPE\n       order by type\")\n\nError in sqldf(\"select type, count(*), count(pages), min(pages), max(pages)\\n       from titles\\n       GROUP BY TYPE\\n       order by type\"): could not find function \"sqldf\"\n\n# group by ...\n# having ...\n\n# having gets rid of groups that don't meet it's criteria\nsqldf(\"select type, count(*), count(pages), min(pages), max(pages)\n       from titles\n       group by type\n       having count(*) &gt; 1\n       order by type\")\n\nError in sqldf(\"select type, count(*), count(pages), min(pages), max(pages)\\n       from titles\\n       group by type\\n       having count(*) &gt; 1\\n       order by type\"): could not find function \"sqldf\"\n\n# ADDING IN A WHERE CHANGES THINGS\n# \n# In the following we simply added the line: where pages &gt; 350\n# \n# This does two things\n#   (a) childrens books don't show up at all - because none are longer than 350 pages\n#   (b) only 1 history book shows up - the other 2 history books were shorter then 350 pages\n\n\n# where ...\n# group by ...\n\nsqldf(\"select type, count(*), count(pages), min(pages), max(pages)\n       from titles\n       where pages &gt; 350\n       group by type\n       order by type\")\n\nError in sqldf(\"select type, count(*), count(pages), min(pages), max(pages)\\n       from titles\\n       where pages &gt; 350\\n       group by type\\n       order by type\"): could not find function \"sqldf\"\n\n# NOW - since the where clause was added, the having clause will now\n# also eliminate the history group in addition to the computer group\n# since now the history group also only has 1 title.\n#\n# As a result we are only left with biography and psychology groups.\n\n\n# where ...\n# group by ...\n# having ...\n\nsqldf(\"select type, count(*), count(pages), min(pages), max(pages)\n       from titles\n       where pages &gt; 350\n       group by type\n       having count(*) &gt; 1\n       order by type\")\n\nError in sqldf(\"select type, count(*), count(pages), min(pages), max(pages)\\n       from titles\\n       where pages &gt; 350\\n       group by type\\n       having count(*) &gt; 1\\n       order by type\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>aggregate functions, group by, having</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "",
    "text": "24.1 The “books database”\nIn this and other sections we will be referring to the “books database”.\nClick below to download a document that describes the books database and database technology in general. This document also contains many questions/answers to test your knowledge of SQL. You can also download the CSV files that contain the data for the books database.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#click-to-download-the-specified-files",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#click-to-download-the-specified-files",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.2 click to download the specified files",
    "text": "24.2 click to download the specified files\n\nbooksDatabase description and Questions\ntitles.csv\nauthors.csv\npublishers.csv\ntitle_authors.csv\nroyalties",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#read-in-the-data",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#read-in-the-data",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.3 read in the data",
    "text": "24.3 read in the data\n\n# load the packages we'll need\nif (!require(sqldf)) { install.packages(\"sqldf\"); require(sqldf) }\n\nLoading required package: sqldf\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, : there is no package called 'sqldf'\n\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\nif (!require(readr)) { install.packages(\"readr\"); require(readr) }\n\nLoading required package: readr\n\n# Read in the data for the books database - see the \ntitles = read_csv(\"data/booksDatabase/titles.csv\", na=\"NULL\", show_col_types=FALSE)\nauthors = read_csv(\"data/booksDatabase/authors.csv\", na=\"NULL\", show_col_types=FALSE)\npublishers = read_csv(\"data/booksDatabase/publishers.csv\", na=\"NULL\", show_col_types=FALSE)\ntitle_authors = read_csv(\"data/booksDatabase/title_authors.csv\", na=\"NULL\", show_col_types=FALSE)\nroyalties = read_csv(\"data/booksDatabase/royalties.csv\", na=\"NULL\", show_col_types=FALSE)",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#cross-join",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#cross-join",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.4 CROSS JOIN",
    "text": "24.4 CROSS JOIN\n\n##############################################################################\n# A \"cross join\" is very different from the joins that we've already learned about.\n# A \"cross join\" joins EVERY row from 1st table with EVERY row from 2nd table.\n# For this reason, a cross join does not specify an on condition.\n##############################################################################\n\n# Example - suppose a kindergarten teacher is using a relational database \n# to manage her classroom :)    Suppose she has several toys and several children.\n# One table, students, describes the children,\n# Another table, toys, describes the toys.\n\nstudents &lt;- data.frame(\n  first_name = c(\"abie\", \"bobbie\", \"clara\"),\n  last_name = c(\"aames\", \"berger\", \"cohen\"),\n  gender = c(\"m\", \"m\", \"f\")\n)\nstudents\n\n  first_name last_name gender\n1       abie     aames      m\n2     bobbie    berger      m\n3      clara     cohen      f\n\ntoys = data.frame(\n  toy_name = c(\"doggie\", \"dumbo\"),\n  description = c(\"suffed dog\", \"elephant\")\n)\ntoys\n\n  toy_name description\n1   doggie  suffed dog\n2    dumbo    elephant\n\nsqldf(\"select * from students order by last_name, first_name\")\n\nError in sqldf(\"select * from students order by last_name, first_name\"): could not find function \"sqldf\"\n\nsqldf(\"select * from toys order by toy_name\")\n\nError in sqldf(\"select * from toys order by toy_name\"): could not find function \"sqldf\"\n\n# The teacher wants to make sure that each child has a chance to play\n# with each of the toys. \n#\n# Therefore she might run the following \"cross join\" to see a list\n# of each child and each toy. She can use this result as a checklist\n# to make sure that each child actually did play with each toy.\n\nsqldf(\"select students.*, toys.*\n       from students CROSS JOIN toys\n       order by last_name, first_name, toy_name\")\n\nError in sqldf(\"select students.*, toys.*\\n       from students CROSS JOIN toys\\n       order by last_name, first_name, toy_name\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# About the asterisks ( * ) in the SELECT clause ...\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The asterisks in the query above (i.e. select students.*, toys.* ...)\n# means that the results should include all of the columns from the\n# students table (i.e. students.*) and all of the columns from the\n# toys table (i.e. toys.*). \n#\n# This can be done more concisely with just \"select * ...\" the query below\n# does the exact same thing as the query above since \"select * ...\" means\n# to include all of the columns from all of the tables in the output.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select *\n       from students CROSS JOIN toys\n       order by last_name, first_name, toy_name\")\n\nError in sqldf(\"select *\\n       from students CROSS JOIN toys\\n       order by last_name, first_name, toy_name\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The reason for using tablename.* is apparent when you want to \n# include all of the columns from some of the tables but not from the other\n# tables. For example the following query displays only some of the columns\n# from the students table (students.gender is NOT displayed). It does display\n# ALL of the columns from the toys table (ie. toys.*)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select students.first_name, students.last_name, toys.*\n       from students CROSS JOIN toys\n       order by last_name, first_name, toy_name\")\n\nError in sqldf(\"select students.first_name, students.last_name, toys.*\\n       from students CROSS JOIN toys\\n       order by last_name, first_name, toy_name\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# select table.column ...        vs       select column ... \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# You must include table names in the SELECT clause for columns that \n# appear in more than one table. Column names that that only appear \n# in a single table in the query do NOT need to be preceded by the table name. \n#\n# Therefore the following \n# query is the same as the above query. This is because first_name and\n# last_name only appear as columns in the students table and do not appear \n# in the toys table.\n#\n# However, it is PERMISSIBLE to include the table name for ANY column (even\n# if the column only appears in a single table).\n# Some people prefer to include the table name even when it \n# is not necessary (as done above) to make it clearer to someone reading the \n# code which table contains which columns.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Same results as above (read comment above)\nsqldf(\"select first_name, last_name, toys.*\n       from students CROSS JOIN toys\n       order by last_name, first_name, toy_name\")\n\nError in sqldf(\"select first_name, last_name, toys.*\\n       from students CROSS JOIN toys\\n       order by last_name, first_name, toy_name\"): could not find function \"sqldf\"\n\n#-----------------------------------------------------------\n#    # rows   =   #rows from table1   X   #rows from table2\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The total number of rows in the output of a \"cross join\" is\n# the product of the number of rows in the first table times \n# the number of rows in the 2nd table. In the example above, since\n# students contains 3 rows and toys contains 2 rows, the cross \n# join contains 6 rows.\n#-----------------------------------------------------------\n\n#-----------------------------------------------------------\n# You can use any other clauses in a cross join\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# You an add any of the other clauses (where, group by, having, limit) \n# to a \"cross join\". For example, if the teacher only needs the\n# results of the \"cross join\" for the boys she can add a where\n# clause as follows:\n#-----------------------------------------------------------\n\nsqldf(\"select students.*, toys.*\n       from students CROSS JOIN toys\n       where gender = 'm'\n       order by last_name, first_name, toy_name\n      \")\n\nError in sqldf(\"select students.*, toys.*\\n       from students CROSS JOIN toys\\n       where gender = 'm'\\n       order by last_name, first_name, toy_name\\n      \"): could not find function \"sqldf\"\n\n#--------------------------------------------------------------------------\n# \"Cartesian product\" is another name for a \"cross join\"\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The concept of a \"cross join\" also exists outside the scope of databases.\n# Specifically in mathematical \"set theory\" the concept of a \"cross join\" \n# is known as a \"cartesian product\". Sometimes, people will refer to \n# the term \"cartesian product\" in discussions about databases. However in \n# a select statement the words you can type are only \"cross join\" (NOT \"cartesian product\"). \n#--------------------------------------------------------------------------\n\n#--------------------------------------------------------------------------\n# All other types of joins depend on cross joins\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# On some occasions the need for a cross join arises, but \n# cross joins are not used nearly as often as other types of joins. \n# Nevertheless, it is important to understand the concept of a cross join since\n# every other type of join (\"innner join\", \"left join\", \"right join\", \"full join\")\n# depends on a \"cross join\".\n#\n# For example when calculating the result of an\n# \"inner join\" the database management system (DBMS) starts by first performing a cross join.\n# The DBMS then removes rows from the result of the cross join based on the \n# conditions specified in the on clause and the where clause of the \"inner join\".\n#---------------------------------------------------------------------------\n\n#---------------------------------------------------------------------------\n# A more typical example\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Many people find it hard to understand why you would want to use a cross join.\n# This confusion stems from the fact that rows from the two tables are combined\n# in the result even if there is seemingly no logical reason to combine them.\n#\n# It is easiest to see the results of a cross join when you have very few rows.\n# Therefore we will create two very small tables, favTitles and favPublishers\n#---------------------------------------------------------------------------\n\n# My favorite titles\nfavTitles = sqldf(\"select title_name, type, pub_id, pages\n                   from titles\n                   where title_id in ('T04', 'T05', 'T10')\n                   order by title_name\")\n\nError in sqldf(\"select title_name, type, pub_id, pages\\n                   from titles\\n                   where title_id in ('T04', 'T05', 'T10')\\n                   order by title_name\"): could not find function \"sqldf\"\n\nfavTitles\n\nError: object 'favTitles' not found\n\n# Publishers of those favorite titles\nfavPublishers = sqldf(\"select pub_id, pub_name, city\n                       from publishers\n                       where pub_id in ('P01', 'P05')\n                       order by pub_id\")\n\nError in sqldf(\"select pub_id, pub_name, city\\n                       from publishers\\n                       where pub_id in ('P01', 'P05')\\n                       order by pub_id\"): could not find function \"sqldf\"\n\nfavPublishers\n\nError: object 'favPublishers' not found\n\n# The following is a cross join. It returns every record from the \n# first table (favTitles) paired up with every record from the 2nd table\n# (favPublishers). \n#\n# Notice that the pub_id's on each row of the cross join results do NOT\n# necessarily match. Therefore, it may be confusing as to why you should\n# use a cross join ... (keep reading)\n\nsqldf(\"select favTitles.*, favPublishers.*\n       from favTitles CROSS JOIN favPublishers\n      \")\n\nError in sqldf(\"select favTitles.*, favPublishers.*\\n       from favTitles CROSS JOIN favPublishers\\n      \"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#every-inner-join-starts-with-a-cross-join",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#every-inner-join-starts-with-a-cross-join",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.5 Every INNER JOIN starts with a CROSS JOIN",
    "text": "24.5 Every INNER JOIN starts with a CROSS JOIN\n\n# The following adds a where clause to the code. The where clause\n# removes those rows from\n# the cross join for which the favTitles.pub_id and the favPublishers.pub_id\n# don't match. This is really what you want in this case. In order\n# to get the correct results, first a CROSS JOIN was done that created\n# all possible combinations of a row from favTitles with a row from favPublishers.\n# Then the where clause eliminated the rows in the output that didn't make sense.\n# This leaves us with rows that show the details for a title and the details\n# of the publisher who published that title. \n\nsqldf(\"select favTitles.*, favPublishers.*\n       from favTitles CROSS JOIN favPublishers\n       where favTitles.pub_id = favPublishers.pub_id\n      \")\n\nError in sqldf(\"select favTitles.*, favPublishers.*\\n       from favTitles CROSS JOIN favPublishers\\n       where favTitles.pub_id = favPublishers.pub_id\\n      \"): could not find function \"sqldf\"\n\n# Another way of writing the same query is with an \"inner join\" (which \n# can also be written as just \"join\"). This version of the query \n# uses the word \"join\" instead of \"cross join\" and moves the condition\n# that ties the tables together from the where clause into the \"on\" clause.\n# This does EXACTLY THE SAME THING as the above query (with CROSS JOIN). \n# However, the \"join\" syntax with its \"on\" clause makes the details of \n# how the two tables are related to each other more obvious. \n\nsqldf(\"select favTitles.*, favPublishers.*\n       from favTitles JOIN favPublishers ON favTitles.pub_id = favPublishers.pub_id\n      \")\n\nError in sqldf(\"select favTitles.*, favPublishers.*\\n       from favTitles JOIN favPublishers ON favTitles.pub_id = favPublishers.pub_id\\n      \"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#the-word-inner-in-inner-join-is-optional",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#the-word-inner-in-inner-join-is-optional",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.6 The word INNER in “INNER JOIN” is optional",
    "text": "24.6 The word INNER in “INNER JOIN” is optional\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# JOIN vs INNER JOIN\n#\n# The technical term for this type of join is an \"INNER JOIN\".\n# However, you can write either \"INNER JOIN\" or just \"JOIN\".\n# The following does the same thing as the previous query.\n# The only difference in the code is that we added the\n# word \"INNER\".\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select favTitles.*, favPublishers.*\n       from favTitles INNER JOIN favPublishers ON favTitles.pub_id = favPublishers.pub_id\n      \")\n\nError in sqldf(\"select favTitles.*, favPublishers.*\\n       from favTitles INNER JOIN favPublishers ON favTitles.pub_id = favPublishers.pub_id\\n      \"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#example",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#example",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.7 Example",
    "text": "24.7 Example\n\n# QUESTION \n#\n#   For each publisher, list the name of the publisher and total\n# number of pages that the publisher has published in all their books (ie. add\n# up all the pages in all books for each publisher). Show the publishers who\n# have published the most pages at the top of the result list.\n\n# ANSWER\n#\n# Step 1 - since publishers contains the pub_name  and  titles contains the \n# number of pages (num_pages) for each book, we need to join those tables.\nsqldf(\"select *\n       from publishers join titles on publishers.pub_id = titles.pub_id\n      \")\n\nError in sqldf(\"select *\\n       from publishers join titles on publishers.pub_id = titles.pub_id\\n      \"): could not find function \"sqldf\"\n\n# Step 2 - use group by and sum to add up the pages for each publisher\nsqldf(\"select pub_name, sum(pages)\n       from publishers join titles on publishers.pub_id = titles.pub_id\n       group by publishers.pub_id, pub_name\n      \")\n\nError in sqldf(\"select pub_name, sum(pages)\\n       from publishers join titles on publishers.pub_id = titles.pub_id\\n       group by publishers.pub_id, pub_name\\n      \"): could not find function \"sqldf\"\n\n# Step 3 - use order by \nsqldf(\"select pub_name, sum(pages)\n       from publishers join titles on publishers.pub_id = titles.pub_id\n       group by publishers.pub_id, pub_name\n       order by sum(pages) desc\n      \")\n\nError in sqldf(\"select pub_name, sum(pages)\\n       from publishers join titles on publishers.pub_id = titles.pub_id\\n       group by publishers.pub_id, pub_name\\n       order by sum(pages) desc\\n      \"): could not find function \"sqldf\"\n\n# REMEMBER - every inner join starts out under the covers as a cross join\n# The following two commands are equivalent\n\nsqldf(\"select au_fname, au_lname   \n      from authors INNER join title_authors on authors.au_id = title_authors.au_id    \n      where title_id = 'T11'\n      order by au_lname, au_fname\")\n\nError in sqldf(\"select au_fname, au_lname   \\n      from authors INNER join title_authors on authors.au_id = title_authors.au_id    \\n      where title_id = 'T11'\\n      order by au_lname, au_fname\"): could not find function \"sqldf\"\n\nsqldf(\"select au_fname, au_lname   \n      from authors CROSS join title_authors    \n      where authors.au_id = title_authors.au_id\n                  and \n            title_id = 'T11'\n      order by au_lname, au_fname\")\n\nError in sqldf(\"select au_fname, au_lname   \\n      from authors CROSS join title_authors    \\n      where authors.au_id = title_authors.au_id\\n                  and \\n            title_id = 'T11'\\n      order by au_lname, au_fname\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#even-more-types-of-joins",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#even-more-types-of-joins",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.8 Even more types of JOINs",
    "text": "24.8 Even more types of JOINs\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# SEVERAL DIFFERENT TYPES OF \"JOINS\"\n#\n# NOTE: There are actually several different types of \"joins\". They all do\n# slightly different things. For example:\n#\n#    CROSS JOIN                             - see the top of this file\n#    INNER JOIN (or just JOIN)              - we just described this above\n#    LEFT OUTER JOIN  (or just LEFT JOIN)   - we'll cover this later\n#    RIGHT OUTER JOIN  (or just RIGHT JOIN) - we'll cover this later\n#    FULL OUTER JOIN  (or just FULL JOIN)   - we'll cover this later\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# INNER JOIN   ( or just \"JOIN\" )\n#\n# The following is an \"inner join\" (or just \"join\").\n# (We already covered this above. It's repeated here for completeness).\n\nsqldf(\"select title_name, pub_name\n      from favTitles JOIN favPublishers ON favTitles.pub_id = favPublishers.pub_id\")\n\nError in sqldf(\"select title_name, pub_name\\n      from favTitles JOIN favPublishers ON favTitles.pub_id = favPublishers.pub_id\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#old-ansi-sql-way-of-doing-inner-joins",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#old-ansi-sql-way-of-doing-inner-joins",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.9 “old” ANSI SQL way of doing inner joins",
    "text": "24.9 “old” ANSI SQL way of doing inner joins\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# ANSI SQL  - American National Standards Institute \n# \n# There are different versions of the ANSI SQL standard. The versions are\n# named by the year that the version came out. See this for a full history of SQL:   \n#   https://learnsql.com/blog/history-of-sql-standards/\n#\n# Joins were done differently before SQL 92 \n# They CAN still be done the \"old way\" (and often are). Some people prefer\n# the \"old way\" since there is less to type.\n#\n# The \"old way \" for a cross join is to not specify cross join \n# at all. Just list the tables with commas between them.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"\n  select favTitles.*, favPublishers.*\n  from favTitles, favPublishers\n\")\n\nError in sqldf(\"\\n  select favTitles.*, favPublishers.*\\n  from favTitles, favPublishers\\n\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The \"old way\" of doing an \"inner join\" (i.e. a \"regular - join\")\n# is to do a \"cross join\" the old way and then add a where clause\n# that does the job of the \"on\".\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"\n  select favTitles.*, favPublishers.*\n  from favTitles, favPublishers\n  where favTitles.pub_id = favPublishers.pub_id\n\")\n\nError in sqldf(\"\\n  select favTitles.*, favPublishers.*\\n  from favTitles, favPublishers\\n  where favTitles.pub_id = favPublishers.pub_id\\n\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# in the \"old way\" of doing inner joins, you could add additional \n# conditions to the where clause just like in the \"new way\" of\n# writing queries.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"\n  select favTitles.*, favPublishers.*\n  from favTitles, favPublishers\n  where favTitles.pub_id = favPublishers.pub_id and\n        pages &gt;= 300\n\")\n\nError in sqldf(\"\\n  select favTitles.*, favPublishers.*\\n  from favTitles, favPublishers\\n  where favTitles.pub_id = favPublishers.pub_id and\\n        pages &gt;= 300\\n\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#left-join",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#left-join",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.10 LEFT JOIN",
    "text": "24.10 LEFT JOIN\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# LEFT OUTER JOIN   (or just \"LEFT JOIN\")\n#\n# Before learning about \"LEFT JOIN\", you should first understand one \n# issue that comes up when using \"INNER JOIN\"s. \n#\n# This issue is best shown by way of an example. \n# Publisher, P04 - Tenterhooks Press, does not have any corresponding rows in\n# the titles table (perhaps it's a new publishing company that is just getting\n# started).  For this reason when you use an \"inner join\" to join the titles\n# table and the publishers table you will NOT see any rows for Tenterhooks press.\n# The following \"inner join\" (or just \"join\") shows the output below.\n# Tenterhooks Press does not appear in the output at all.\n# \n#    &gt; sqldf(\"select pub_name, title_name\n#           from publishers JOIN titles on publishers.pub_id = titles.pub_id\n#           order by pub_name, title_name\")\n#    \n#    pub_name                          title_name\n#    1        AAA Publishing         Not Without My Fabrerge Egg\n#    2        AAA Publishing    Perhaps It's a Glandular Problem\n#    3        AAA Publishing           Spontaneous, Not Annoying\n#    4     Abatis Publishers                               1977!\n#    5     Abatis Publishers           But I Did It Unconciously\n#    6     Abatis Publishers              Exchange of Platitudes\n#    7     Abatis Publishers                    How About Never?\n#    8     Abatis Publishers        Just Wait Until After School\n#    9     Abatis Publishers                     Kiss My Boo Boo\n#    10      Core Dump Books        Ask Yor System Administrator\n#    11 Schandenfreude Press           200 Years of German Humor\n#    12 Schandenfreude Press                   I Blame My Mother\n#    13 Schandenfreude Press What Are The Civilian Applications?\n#\n#\n# However, suppose you want to see the same output, but you'd also like\n# to see Tenterhooks Press, even though they haven't actually published\n# any titles yet? .... that is where a LEFT JOIN is useful.\n#\n\n# The output of a \"left join\" contains all of the rows of an \"inner join\"\n# plus possibly a few more rows that would not appear in the output of \n# an inner join. \n# By simply changing the \"inner join\" (i.e. \"join\") in the previous\n# query to \"left join\" (or \"left outer join\") we get the following results.\n# Notice that Tenterhooks Press now DOES appear in a single row. \n# All columns that would have come from the corresponding rows in the titles\n# table are NULL (i.e. NA in R dataframes) for the Tenterhooks Press row.\n\n\n#    &gt; sqldf(\"select pub_name, title_name\n#           from publishers LEFT JOIN titles on publishers.pub_id = titles.pub_id\n#           order by pub_name, title_name\")\n#    \n#    pub_name                          title_name\n#    1        AAA Publishing         Not Without My Fabrerge Egg\n#    2        AAA Publishing    Perhaps It's a Glandular Problem\n#    3        AAA Publishing           Spontaneous, Not Annoying\n#    4     Abatis Publishers                               1977!\n#    5     Abatis Publishers           But I Did It Unconciously\n#    6     Abatis Publishers              Exchange of Platitudes\n#    7     Abatis Publishers                    How About Never?\n#    8     Abatis Publishers        Just Wait Until After School\n#    9     Abatis Publishers                     Kiss My Boo Boo\n#    10      Core Dump Books        Ask Yor System Administrator\n#    11 Schandenfreude Press           200 Years of German Humor\n#    12 Schandenfreude Press                   I Blame My Mother\n#    13 Schandenfreude Press What Are The Civilian Applications?    \n#    14    Tneterhooks Press                                &lt;NA&gt;\n#\n#\n# WHAT DOES \"LEFT\" MEAN ???\n#\n# The word \"left\" and \"right\" in \"left join\" and \"right join\" refer to the\n# location of the table names in the SQL code. Specifically, the text of \n# the code of every JOIN has a table name to the LEFT of the word \"JOIN\" and \n# a table name to the right of the word \"JOIN\". When you specify\n#\n#       \"... tableA LEFT JOIN tableB ON ...\" \n#\n# tableA is the \"left\" table and \n# tableB is the \"right\" table\n#\n# The LEFT JOIN syntax says that if there are rows in the left table (tableA\n# in the example above) that don't have corresponding rows in the \"right\" table\n# (tableB in the example above) then those rows from tableA should still \n# appear in the output. Any columns that would have come from tableB will \n# have NULL values (i.e. NA in R dataframes) in that row.\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The following is a \"regular join\" (i.e. an \"inner join\")\n#\n# Tenterhooks press does not show up since they have no titles\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select titles.title_name, pub_name, publishers.pub_id\n      from titles join publishers on titles.pub_id = publishers.pub_id\n      order by pub_name, title_id\")\n\nError in sqldf(\"select titles.title_name, pub_name, publishers.pub_id\\n      from titles join publishers on titles.pub_id = publishers.pub_id\\n      order by pub_name, title_id\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# The following is a \"left join\"\n#\n# Tenterhooks press DOES show up since a left join will add to \n# the results of an inner join, any rows that appear in the \"left\"\n# hand table that have no corresponding rows in the right hand table.\n# In the result set, the columns from the right hand table in these\n# rows are NULL (or \"NA\" when using sqldf in R)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select titles.title_name, pub_name, publishers.pub_id\n      from publishers left join titles on titles.pub_id = publishers.pub_id\n      order by pub_name, title_id\")\n\nError in sqldf(\"select titles.title_name, pub_name, publishers.pub_id\\n      from publishers left join titles on titles.pub_id = publishers.pub_id\\n      order by pub_name, title_id\"): could not find function \"sqldf\"\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# ALL of the columns from the right hand table contain NULLs (i.e. NA)\n# for the extra rows that are added by the left join\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# To prove that point, the following shows all of the columns from both\n# the left hand table (publishers) and the right hand table (titles) \n# Notice that ALL of the columns for the right hand table will have \n# NULLs (i.e. NA in sqldf in R) for those rows of the output that \n# contain data from the left hand table for which there is no corresponding\n# row in the right hand table\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsqldf(\"select publishers.*, titles.*\n      from publishers left join titles on titles.pub_id = publishers.pub_id\n      order by pub_name, title_id\")\n\nError in sqldf(\"select publishers.*, titles.*\\n      from publishers left join titles on titles.pub_id = publishers.pub_id\\n      order by pub_name, title_id\"): could not find function \"sqldf\"\n\n# BE CAREFUL ...\n#\n# When doing an \"inner join\" (i.e. a \"join\") it doesn't make a difference\n# which table you type to the left of the word \"join\" and which to the right.\n#\n# HOWEVER - for \"LEFT JOIN\"s it DOES MATTER!!!\n#\n# If we modify the previous query and put the publishers table on the \n# right side of the \"LEFT JOIN\" keyword, we will again NOT see Teneterhooks Press\n# since a LEFT JOIN only adds extra rows to the output for the rows in the \n# LEFT hand table that don't have corresponding rows in the right hand table.\n\n\n# Tenterhooks Press does NOT appear since the publishers table is on the\n# right hand side of the \"LEFT JOIN\" keywords\n\nsqldf(\"select titles.title_name, pub_name, publishers.pub_id\n      from titles left join publishers on titles.pub_id = publishers.pub_id\n      order by pub_name, title_id\")\n\nError in sqldf(\"select titles.title_name, pub_name, publishers.pub_id\\n      from titles left join publishers on titles.pub_id = publishers.pub_id\\n      order by pub_name, title_id\"): could not find function \"sqldf\"\n\n# Lets add a row to the titles table that doesn't have a correponding row\n# in the publishers table.\n\nnewBook = data.frame(title_id='014', title_name='Data Everywhere', type='computer', pub_id='P99', pages='200', price='19.99', sales=0, pubdate='1/01/2024')\ntitles2 = rbind(titles, newBook)\ntitles2\n\n# A tibble: 14 × 8\n   title_id title_name                          type       pub_id pages price   sales pubdate        \n   &lt;chr&gt;    &lt;chr&gt;                               &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;          \n 1 T01      1977!                               history    P01    107   21.99     566 8/1/2000 0:00  \n 2 T02      200 Years of German Humor           history    P03    14    19.95    9566 4/1/1998 0:00  \n 3 T03      Ask Yor System Administrator        computer   P02    1226  39.95   25667 9/1/2000 0:00  \n 4 T04      But I Did It Unconciously           psychology P01    510   12.99   13001 5/31/1999 0:00 \n 5 T05      Exchange of Platitudes              psychology P01    201   6.95   201440 1/1/2001 0:00  \n 6 T06      How About Never?                    biography  P01    473   19.95   11320 7/31/2000 0:00 \n 7 T07      I Blame My Mother                   biography  P03    333   23.95 1500200 10/1/1999 0:00 \n 8 T08      Just Wait Until After School        children   P01    86    10       4095 6/1/2001 0:00  \n 9 T09      Kiss My Boo Boo                     children   P01    22    13.95    5000 5/31/2002 0:00 \n10 T10      Not Without My Fabrerge Egg         biography  P05    &lt;NA&gt;  &lt;NA&gt;       NA &lt;NA&gt;           \n11 T11      Perhaps It's a Glandular Problem    psychology P05    826   7.99    94123 11/30/2000 0:00\n12 T12      Spontaneous, Not Annoying           biography  P05    507   12.99  100001 8/31/2000 0:00 \n13 T13      What Are The Civilian Applications? history    P03    802   29.99   10467 5/31/1999 0:00 \n14 014      Data Everywhere                     computer   P99    200   19.99       0 1/01/2024      \n\nsqldf(\"select titles2.title_name, pub_name, publishers.pub_id\n      from publishers left join titles2 on titles2.pub_id = publishers.pub_id\n      order by pub_name, title_id\")\n\nError in sqldf(\"select titles2.title_name, pub_name, publishers.pub_id\\n      from publishers left join titles2 on titles2.pub_id = publishers.pub_id\\n      order by pub_name, title_id\"): could not find function \"sqldf\"\n\nsqldf(\"select titles2.title_name, pub_name, publishers.pub_id\n      from titles2 left join publishers on titles2.pub_id = publishers.pub_id\n      order by pub_name, title_id\")\n\nError in sqldf(\"select titles2.title_name, pub_name, publishers.pub_id\\n      from titles2 left join publishers on titles2.pub_id = publishers.pub_id\\n      order by pub_name, title_id\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#practice",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#practice",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.11 Practice",
    "text": "24.11 Practice\n\n##########################################################################\n# PRACTICE QUESTION\n#\n# Write a query that shows the publisher name (i.e. pub_name) for those publishers\n# (and only those publishers)) who have no titles in the titles table.\n##############################################################################\n\n# Remember this query\nsqldf(\"select publishers.*, titles.*\n      from publishers left join titles on publishers.pub_id = titles.pub_id\n      \")\n\nError in sqldf(\"select publishers.*, titles.*\\n      from publishers left join titles on publishers.pub_id = titles.pub_id\\n      \"): could not find function \"sqldf\"\n\n# add a where clause as shown below to get ONLY those rows from the left table that have no matching rows in the right table\nsqldf(\"select publishers.*, titles.*\n      from publishers left join titles on publishers.pub_id = titles.pub_id\n      where titles.type is null\n      \")\n\nError in sqldf(\"select publishers.*, titles.*\\n      from publishers left join titles on publishers.pub_id = titles.pub_id\\n      where titles.type is null\\n      \"): could not find function \"sqldf\"\n\n# The following works, but it isn't ideal .... because titles.type \n# is not the best column to choose to test for null (keep reading for an explanation ...)\n\nsqldf(\"select pub_name\n      from publishers left join titles on publishers.pub_id = titles.pub_id\n      where titles.type is null\n      \")\n\nError in sqldf(\"select pub_name\\n      from publishers left join titles on publishers.pub_id = titles.pub_id\\n      where titles.type is null\\n      \"): could not find function \"sqldf\"\n\n# To explain why titles.type was not the best column to choose above compare\n# the query below where we used titles.pages to test for NULL. \n# Since there is a row in titles table that contains NULL for pages that row\n# causes the publisher for that row (i..e AAA Publishing) to be displayed\n# in the output.\n\nsqldf(\"select pub_name\n      from publishers left join titles on publishers.pub_id = titles.pub_id\n      where titles.pages is null\n      \")\n\nError in sqldf(\"select pub_name\\n      from publishers left join titles on publishers.pub_id = titles.pub_id\\n      where titles.pages is null\\n      \"): could not find function \"sqldf\"\n\n#----------------------------------------------------------------------------\n# The best way to identify only those rows that were added due to the\n# \"left\" join is to look for NULL in a column that would otherwise never\n# contain a NULL.\n#\n# Best choices are\n# - a primary key field (i.e. column)\n# - or another column that is defined in the database to never allow NULLs\n#----------------------------------------------------------------------------\n\n# The best way to do the same query is by checking the primary key of the right \n# hand table for NULL in the where clause.\n\nsqldf(\"select pub_name\n      from publishers left join titles on publishers.pub_id = titles.pub_id\n      where titles.title_id is null\n      \")\n\nError in sqldf(\"select pub_name\\n      from publishers left join titles on publishers.pub_id = titles.pub_id\\n      where titles.title_id is null\\n      \"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#right-join-and-full-join",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#right-join-and-full-join",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.12 RIGHT JOIN and FULL JOIN",
    "text": "24.12 RIGHT JOIN and FULL JOIN\n\n###############################################################.\n# RIGHT JOIN    and    FULL JOIN\n#\n# LEFT JOIN   is also known as a   LEFT OUTER JOIN\n# RIGHT JOIN   is also known as a  RIGHT OUTER JOIN\n# FULL JOIN   is also known as a   FULL OUTER JOIN\n#\n# These are all known as \"OUTER\" joins\n###############################################################.\n\n# ANSI SQL also has \"right join\" and \"full join\"\n#\n# A right join does the same thing as a left join except that\n# \"right join\" shows rows in the output that correspond to rows from the \n# right hand table that don't have corresponding rows in the left hand table.\n\n# The following LEFT JOIN ...\nsqldf(\"select publishers.*, titles.*\n      from publishers left join titles on titles.pub_id = publishers.pub_id\n      order by pub_name, title_id\")\n\nError in sqldf(\"select publishers.*, titles.*\\n      from publishers left join titles on titles.pub_id = publishers.pub_id\\n      order by pub_name, title_id\"): could not find function \"sqldf\"\n\n# ... will generate the EXACT SAME OUTPUT as the following RIGHT JOIN\nsqldf(\"select publishers.*, titles.*\n      from titles right join publishers on titles.pub_id = publishers.pub_id\n      order by pub_name, title_id\")\n\nError in sqldf(\"select publishers.*, titles.*\\n      from titles right join publishers on titles.pub_id = publishers.pub_id\\n      order by pub_name, title_id\"): could not find function \"sqldf\"\n\n# HOWEVER - SQLite does not implement RIGHT JOIN even though it is part of the ANSI Standard for SQL\n\n# Similarly a \"full join\" shows rows in the output for BOTH\n# - rows in the left hand table that don't have corresponding rows in the right hand table and\n# - rows in the right hand table that don't have corresponding rows in the left hand table and\n#\n# SQLite - the database that are using does not implement RIGHT JOINs or FULL JOINs\n# However, there are simple workarounds for both.\n# The workaround for a right join is simply to use a left join and type \n# the table names in the opposite order.\n#\n# The workaround for FULL JOIN requires you to understand \"UNION\" ... see below\n\n\n##########################################################################.\n### UPDATE !!!\n###\n###     As of now (in 2024) sqlite has implemented both RIGHT JOIN\n###     and FULL JOIN. I will update these notes with that info soon.\n##########################################################################.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#sql-set-operations-i.e.-union-except-intersect",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#sql-set-operations-i.e.-union-except-intersect",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.13 SQL set operations (i.e. UNION, EXCEPT, INTERSECT)",
    "text": "24.13 SQL set operations (i.e. UNION, EXCEPT, INTERSECT)\n\n##################################################\n# Combining the output of 2 queries\n#\n#     UNION\n#     UNION ALL\n#     EXCEPT\n#     INTERSECT\n##################################################\n\n# The following is a query that you should already understand.\n# There is nothing new here. We will see below how to rewrite this \n# query in a different way by using \"UNION\"\n#\n# The following displays titles that have fewer than 10 pages\n# and also titles that have more than 20 pages.\n\nsqldf(\"select title_name, price\n      from titles\n      where price &lt; 10 or price &gt; 20\n      order by price\")\n\nError in sqldf(\"select title_name, price\\n      from titles\\n      where price &lt; 10 or price &gt; 20\\n      order by price\"): could not find function \"sqldf\"\n\n\n\n24.13.1 UNION\n\n#----------------------------------------------------------------------\n# UNION\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# union is used to combine two different queries into one output set.\n# The 2 queries must have the same number of columns and the same type\n# of columns.\n#\n# The order by is done after both queries and combines the rows from \n# the two select statements in the specified order.\n#----------------------------------------------------------------------\n\n# First ... let's see each of the queries on their own ...\n\n# get the titles that are &lt; 10 dollars\nsqldf(\"select title_name, price\n      from titles\n      where price &lt; 10\n\")\n\nError in sqldf(\"select title_name, price\\n      from titles\\n      where price &lt; 10\\n\"): could not find function \"sqldf\"\n\n# get the titles that are &gt; 20 dollars\nsqldf(\"select title_name, price\n      from titles\n      where price &gt; 20\n\")\n\nError in sqldf(\"select title_name, price\\n      from titles\\n      where price &gt; 20\\n\"): could not find function \"sqldf\"\n\n# Now, let's see how to use\n# UNION to combine the two previous queries into a single output.\n\nsqldf(\"select title_name, price\n      from titles\n      where price &lt; 10\n      \n      union\n      \n      select title_name, price\n      from titles\n      where price &gt; 20\n      \n      order by price\")\n\nError in sqldf(\"select title_name, price\\n      from titles\\n      where price &lt; 10\\n      \\n      union\\n      \\n      select title_name, price\\n      from titles\\n      where price &gt; 20\\n      \\n      order by price\"): could not find function \"sqldf\"\n\n# Do the same but order by title_name\nsqldf(\"select title_name, price\n      from titles\n      where price &lt; 10\n      \n      union\n      \n      select title_name, price\n      from titles\n      where price &gt; 20\n      \n      order by title_name\")\n\nError in sqldf(\"select title_name, price\\n      from titles\\n      where price &lt; 10\\n      \\n      union\\n      \\n      select title_name, price\\n      from titles\\n      where price &gt; 20\\n      \\n      order by title_name\"): could not find function \"sqldf\"\n\n# Another example\n# Show all book titles for which the price is &gt; 20 or the pages is &gt; 500\n\nsqldf(\"select title_name, price, pages\n      from titles\n      where price &gt; 20 or pages &gt; 500\n      order by price\")\n\nError in sqldf(\"select title_name, price, pages\\n      from titles\\n      where price &gt; 20 or pages &gt; 500\\n      order by price\"): could not find function \"sqldf\"\n\n\n\n\n24.13.2 UNION ALL\n\n#----------------------------------------------------------\n# UNION removes duplicate rows from the output\n#\n# UNION ALL does NOT remove duplicate rows\n#----------------------------------------------------------\n\n\n# Union removes duplicate rows from the output\n#\n# Notice that some books match both conditions but only come up in the \n# results once. \n\nsqldf(\"select title_name, price, pages\n      from titles\n      where price &gt; 20\n      \n      union\n      \n      select title_name, price, pages\n      from titles\n      where pages &gt; 500\n      \n      order by price\")\n\nError in sqldf(\"select title_name, price, pages\\n      from titles\\n      where price &gt; 20\\n      \\n      union\\n      \\n      select title_name, price, pages\\n      from titles\\n      where pages &gt; 500\\n      \\n      order by price\"): could not find function \"sqldf\"\n\n# UNION ALL\n#\n# Running the same query as above but typing \"UNION ALL\"\n# Will show the rows that meet both conditions, twice.\n\nsqldf(\"select title_name, price, pages\n      from titles\n      where price &gt; 20\n      \n      union all\n      \n      select title_name, price, pages\n      from titles\n      where pages &gt; 500\n      \n      order by price\")\n\nError in sqldf(\"select title_name, price, pages\\n      from titles\\n      where price &gt; 20\\n      \\n      union all\\n      \\n      select title_name, price, pages\\n      from titles\\n      where pages &gt; 500\\n      \\n      order by price\"): could not find function \"sqldf\"\n\n\n\n\n24.13.3 Practice\n\n# PRACTICE QUESTION\n# \n# Show the names of all authors and publishers and the city that they are from.\n# Indicate if the row in the output is for a 'publisher' or for an 'author'.\n# For authors dispaly the name of the author as FIRST LAST in a single column.\n# This column should be called 'name' - this is the same column as \n# the publisher's name would appear. \n# Sort the results by the name.\n#\n# NAME       CITY       Pub_or_author\n# Joe Smith  New York   Author\n# AAA pubs   Seattle    Publisher\n# Sue Cohen  LA         Author\n# etc.\n\n# We can create two queries, one for authors and one for publishers\nsqldf(\"select au_fname || ' ' || au_lname as name, city, 'Author' as 'pub_or_author'\n      from authors\")\n\nError in sqldf(\"select au_fname || ' ' || au_lname as name, city, 'Author' as 'pub_or_author'\\n      from authors\"): could not find function \"sqldf\"\n\nsqldf(\"select pub_name, city, 'Publisher' as 'pub_or_author'\n      from publishers\")\n\nError in sqldf(\"select pub_name, city, 'Publisher' as 'pub_or_author'\\n      from publishers\"): could not find function \"sqldf\"\n\n# Then combine the two queries with union\n\nsqldf(\"select au_fname || ' ' || au_lname as name, city, 'Author' as 'pub_or_author'\n      from authors\n      \n      union\n      \n      select pub_name, city, 'Publisher' as 'pub_or_author'\n      from publishers\n      \n      order by 1\")\n\nError in sqldf(\"select au_fname || ' ' || au_lname as name, city, 'Author' as 'pub_or_author'\\n      from authors\\n      \\n      union\\n      \\n      select pub_name, city, 'Publisher' as 'pub_or_author'\\n      from publishers\\n      \\n      order by 1\"): could not find function \"sqldf\"\n\n\n\n\n24.13.4 EXCEPT\n\n###################################\n# EXCEPT\n###################################\n\n# QUESTION\n# Show the publishers who publish biography books but not history books\n\n# ANSWER\n\n# Let's start by first writing a query that gets those publishers who have\n# published biographies (spoiler alert ... we are later going to \n# remove from this list those publishers who have published history books)\n\nsqldf(\"select distinct pub_name \n      from publishers join titles on publishers.pub_id = titles.pub_id\n      where titles.type = 'biography'\")\n\nError in sqldf(\"select distinct pub_name \\n      from publishers join titles on publishers.pub_id = titles.pub_id\\n      where titles.type = 'biography'\"): could not find function \"sqldf\"\n\n# If you take out the distinct you will get duplicate copies of publisher names\nsqldf(\"select pub_name \n      from publishers join titles on publishers.pub_id = titles.pub_id\n      where titles.type = 'biography'\")\n\nError in sqldf(\"select pub_name \\n      from publishers join titles on publishers.pub_id = titles.pub_id\\n      where titles.type = 'biography'\"): could not find function \"sqldf\"\n\n# You get the duplicates for publishers who published more than one biography\n#\n# You can see that by looking at all of the data, not just the publisher name.\n\nsqldf(\"select publishers.*, titles.*\n      from publishers join titles on publishers.pub_id = titles.pub_id\n      where titles.type = 'biography'\")\n\nError in sqldf(\"select publishers.*, titles.*\\n      from publishers join titles on publishers.pub_id = titles.pub_id\\n      where titles.type = 'biography'\"): could not find function \"sqldf\"\n\n# Once again, this is the query that shows publishers who published biographies\nsqldf(\"select distinct pub_name \n      from publishers join titles on publishers.pub_id = titles.pub_id\n      where titles.type = 'biography'\")\n\nError in sqldf(\"select distinct pub_name \\n      from publishers join titles on publishers.pub_id = titles.pub_id\\n      where titles.type = 'biography'\"): could not find function \"sqldf\"\n\n# This is the query for publishers who published history books\nsqldf(\"select distinct pub_name \n      from publishers join titles on publishers.pub_id = titles.pub_id\n      where titles.type = 'history'\")\n\nError in sqldf(\"select distinct pub_name \\n      from publishers join titles on publishers.pub_id = titles.pub_id\\n      where titles.type = 'history'\"): could not find function \"sqldf\"\n\n# Now show publishers who published biograhpies BUT NOT history books\n\nsqldf(\"select distinct pub_name \n      from publishers join titles on publishers.pub_id = titles.pub_id\n      where titles.type = 'biography'\n      \n      EXCEPT\n      \n      select distinct pub_name \n      from publishers join titles on publishers.pub_id = titles.pub_id\n      where titles.type = 'history'\")\n\nError in sqldf(\"select distinct pub_name \\n      from publishers join titles on publishers.pub_id = titles.pub_id\\n      where titles.type = 'biography'\\n      \\n      EXCEPT\\n      \\n      select distinct pub_name \\n      from publishers join titles on publishers.pub_id = titles.pub_id\\n      where titles.type = 'history'\"): could not find function \"sqldf\"\n\n\n\n\n24.13.5 INTERSECT\n\n###################################\n# INTERSECT\n###################################\n\n#---------------------------------------------------------------------\n# Show the cities that have both publishers and authors residing there.\n#---------------------------------------------------------------------\n\n# show the cities that have publishers\nsqldf(\"select distinct city, state\n      from publishers\n      order by city\n      \")\n\nError in sqldf(\"select distinct city, state\\n      from publishers\\n      order by city\\n      \"): could not find function \"sqldf\"\n\n# Show the cities that have authors\nsqldf(\"select distinct city, state\n      from authors\n      order by city\")\n\nError in sqldf(\"select distinct city, state\\n      from authors\\n      order by city\"): could not find function \"sqldf\"\n\n# Combine the two queries with INTERSECT.\n# This will only show rows that are output from both of the\n# select statements.\n\nsqldf(\"   select distinct city, state\n          from publishers\n\n      INTERSECT\n\n         select distinct city, state\n         from authors\n         \n      order by city\")\n\nError in sqldf(\"   select distinct city, state\\n          from publishers\\n\\n      INTERSECT\\n\\n         select distinct city, state\\n         from authors\\n         \\n      order by city\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#subqueries",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#subqueries",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.14 Subqueries",
    "text": "24.14 Subqueries\n\n###################################################.\n# Subqueries\n####################################################.\n\n#------------------------------------------------------------------------\n# Subqueries that return a single value\n#------------------------------------------------------------------------\n\n# Show titles whose price is greater than the average price of all titles\n\nsqldf(\"select title_name, price\n      from titles\n      where price &gt; \n              (\n                 select avg(price)\n                 from titles\n              )\n      order by title_name\n      \")\n\nError in sqldf(\"select title_name, price\\n      from titles\\n      where price &gt; \\n              (\\n                 select avg(price)\\n                 from titles\\n              )\\n      order by title_name\\n      \"): could not find function \"sqldf\"\n\n# prove it by determining the avg price of all titles\n\nsqldf(\" select avg(price)\n        from titles\n\")\n\nError in sqldf(\" select avg(price)\\n        from titles\\n\"): could not find function \"sqldf\"\n\n# YOU CANNOT WRITE THIS QUERY WITHOUT USING A SUBQUERY!!!!\n# THE FOLLOWING WILL PRODUCE AN ***ERROR*** SINCE\n# YOU MAY NOT USE AN AGGREGATE FUNCTION SUCH AS AVG\n# INSIDE A WHERE CLAUSE\n# \n# AGGREGATE FUNCTIONS ARE ONLY ALLOWED INSIDE\n# HAVING AND INSIDE SELECT FOR QUERIES THAT HAVE A GROUP BY\n\nsqldf(\"select title_name, price\n      from titles\n      where price &gt; avg(price)\n      order by title_name\n      \")\n\nError in sqldf(\"select title_name, price\\n      from titles\\n      where price &gt; avg(price)\\n      order by title_name\\n      \"): could not find function \"sqldf\"\n\n\n\n24.14.1 Subquery in SELECT, FROM, WHERE, HAVING\n\n#-----------------------------------------------------------------------------------.\n# A subquery can appear in any of the following clauses in a select statement\n#\n# SELECT    - the subquery must return a single item (i.e. single row single column)\n#\n# FROM - subqueries in the FROM clause may return many rows and many columns.\n#        The subquery is treated as though it were an actual table.\n#        You need to follow the subquery with a 'name' that will be used\n#        as the name of the pseudo-table that is generated by the subquery.\n#        This is similar to the way you can name columns with aliases.\n#\n# WHERE or the HAVING - these subqueries may return the following:\n#\n#         (a)  a single row, single column , i.e. a single value\n#              e.g. a subquery that appears before or after a + sign or a &gt; sign\n#               or anywhere that you'd expect a single value to appear.\n#\n#         (b) possibly many rows of a single column -\n#             after the IN operator\n#\n#         (c) possibly many rows, many columns -\n#             after the EXISTS operator \n#-----------------------------------------------------------------------------------.\n\n\n\n24.14.2 subquery in SELECT\n\n#----------------------------------------------------------------------\n# Subqueries in the SELECT clause must return a single row, single column.\n#----------------------------------------------------------------------\n\n# QUESTION : \n# Write a query that shows the title_name, price and the amount the price is above average\n# for those titles whose price is above average.\n\nsqldf(\"select title_name, price, price - (select avg(price) from titles) as 'amt_above_avg'\n      from titles\n      where price &gt; (select avg(price) from titles)\n      order by title_name\n      \")\n\nError in sqldf(\"select title_name, price, price - (select avg(price) from titles) as 'amt_above_avg'\\n      from titles\\n      where price &gt; (select avg(price) from titles)\\n      order by title_name\\n      \"): could not find function \"sqldf\"\n\n# QUESTION - same as above but also show the average price of all books as a column in the results\n\nsqldf(\"select title_name, \n              price,\n              (select avg(price) from titles) as avgPriceOfAllBooks,\n              price - (select avg(price) from titles) as 'amt_above_avg'\n      from titles\n      where price &gt; (select avg(price) from titles)\n      order by title_name\n      \")\n\nError in sqldf(\"select title_name, \\n              price,\\n              (select avg(price) from titles) as avgPriceOfAllBooks,\\n              price - (select avg(price) from titles) as 'amt_above_avg'\\n      from titles\\n      where price &gt; (select avg(price) from titles)\\n      order by title_name\\n      \"): could not find function \"sqldf\"\n\n# When the query above is processed, the subqueries get run and produce\n# the result 18.3875. That value is then plugged into the outer query\n# and the outer query is run. The following is what the outer query\n# would look like after the result of the subqueries are plugged into the\n# outer query. You never have to type this. It is done automatically.\n\nsqldf(\"select title_name, \n              price,\n              18.3875 as avgPriceOfAllBooks,\n              price - 18.3875 as 'amt_above_avg'\n      from titles\n      where price &gt; 18.3875\n      order by title_name\n      \")\n\nError in sqldf(\"select title_name, \\n              price,\\n              18.3875 as avgPriceOfAllBooks,\\n              price - 18.3875 as 'amt_above_avg'\\n      from titles\\n      where price &gt; 18.3875\\n      order by title_name\\n      \"): could not find function \"sqldf\"\n\n\n\n\n24.14.3 subquery after IN can return a single column\n\n#------------------------------------------------------------------------\n# Subqueries that return a single column of values\n# can appear after the IN operator.\n#------------------------------------------------------------------------\n\n# Show authors that live in the same city as at least one  publisher\n\n # First let's get all the cities where publishers are located\n\nsqldf(\"select distinct city\n      from publishers\")\n\nError in sqldf(\"select distinct city\\n      from publishers\"): could not find function \"sqldf\"\n\n# You can use the \"in\" operator in sql to compare a value to a \"list\" of\n# values.\n# \n# The following will work ... but it forces us to type in the names \n# of the publisher's cities. If we change the data in the publishers table,\n# this \"hard-coded\" version of the query may not work correctly anymore.\n\nsqldf(\"select au_fname, au_lname, city\n       from authors\n       where city in ('New York','San Francisco','Hamburg','Berkeley')\n       order by au_lname, au_fname\")\n\nError in sqldf(\"select au_fname, au_lname, city\\n       from authors\\n       where city in ('New York','San Francisco','Hamburg','Berkeley')\\n       order by au_lname, au_fname\"): could not find function \"sqldf\"\n\n# We can replace the list of cities with a subquery that automatically\n# figures out that list. This subquery returns a single column\n# that can be used in place of the hard-coded data from the previous query.\n\nsqldf(\"select au_fname, au_lname, city\n       from authors\n       where city in \n           (\n              select distinct city \n              from publishers\n           )\n       order by au_lname, au_fname\")\n\nError in sqldf(\"select au_fname, au_lname, city\\n       from authors\\n       where city in \\n           (\\n              select distinct city \\n              from publishers\\n           )\\n       order by au_lname, au_fname\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#correlated-subqueries",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#correlated-subqueries",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.15 Correlated Subqueries",
    "text": "24.15 Correlated Subqueries\n\n############################\n# Correlated subqueries\n############################\n\n\n# In a \"correlated\" subquery, the subquery is executed once for each\n# row in the outer query. \n# The subquery can refer to the data in the row for the outer query.\n# Notice that in the following query the sub-query\n# refers to the authors.au_id table even thought the from clause in the\n# subquery does NOT include the authors table. This is actually a reference\n# to the row from the authors table that is being processed while the subqery\n# is running. \n#\n# This subquery will be run again and again for every row that \n# is processed in the outer query.\n#\n# Notice that the subquery is in the where clause and the order by clause\n# at the end is once again from the outer query.\n\n# Show authors who published more than 2 titles \nsqldf(\"select au_fname, au_lname\n      from authors\n      where \n         (select count(*)\n          from title_authors\n          where authors.au_id = title_authors.au_id) &gt; 2\n      order by au_lname, au_fname\")\n\nError in sqldf(\"select au_fname, au_lname\\n      from authors\\n      where \\n         (select count(*)\\n          from title_authors\\n          where authors.au_id = title_authors.au_id) &gt; 2\\n      order by au_lname, au_fname\"): could not find function \"sqldf\"\n\nsqldf(\"select au_fname, au_lname,\n          (select count(*)\n          from title_authors\n          where authors.au_id = title_authors.au_id) as numTitles\n      from authors\n      where \n         (select count(*)\n          from title_authors\n          where authors.au_id = title_authors.au_id) &gt; 2\n      order by au_lname, au_fname\")\n\nError in sqldf(\"select au_fname, au_lname,\\n          (select count(*)\\n          from title_authors\\n          where authors.au_id = title_authors.au_id) as numTitles\\n      from authors\\n      where \\n         (select count(*)\\n          from title_authors\\n          where authors.au_id = title_authors.au_id) &gt; 2\\n      order by au_lname, au_fname\"): could not find function \"sqldf\"\n\n#------------------------------------------------------------------.\n# You cannot run the subquery from a correlated-subquery on its\n# own. It must be part of a larger query. For example the following\n# TRIES to run the subquery from the previous example but fails\n# with an error\n#------------------------------------------------------------------.\n\nsqldf(\"select count(*)\n          from title_authors\n          where authors.au_id = title_authors.au_id\")  # ERROR - no such column authors.au_id\n\nError in sqldf(\"select count(*)\\n          from title_authors\\n          where authors.au_id = title_authors.au_id\"): could not find function \"sqldf\"\n\n# A separate inner query is run for every row that is processed in the outer query\n\n# This is the subquery that is run for the row in the authors for Sarah Buchman\nsqldf(\"select count(*)\n       from title_authors\n       where 'A01' = title_authors.au_id\")\n\nError in sqldf(\"select count(*)\\n       from title_authors\\n       where 'A01' = title_authors.au_id\"): could not find function \"sqldf\"\n\n# This is the subquery that is run for the row in the authors for Wendy Heydemark\nsqldf(\"select count(*)\n       from title_authors\n       where 'A02' = title_authors.au_id\")\n\nError in sqldf(\"select count(*)\\n       from title_authors\\n       where 'A02' = title_authors.au_id\"): could not find function \"sqldf\"\n\n# This is the subquery that is run for the row in the authors for Hallie Hull\nsqldf(\"select count(*)\n       from title_authors\n       where 'A03' = title_authors.au_id\")\n\nError in sqldf(\"select count(*)\\n       from title_authors\\n       where 'A03' = title_authors.au_id\"): could not find function \"sqldf\"\n\n# etc ...\n\n\n\n\n\n#------------------------------------------------------------------.\n# The following is another way to get the same results without using any subqueries.\n# Instead of a subquery, the following query uses\n# a join and makes use of the group by and having clauses.\n#------------------------------------------------------------------.\n\nsqldf(\"select au_fname, au_lname\n      from authors join title_authors on authors.au_id = title_authors.au_id\n      group by authors.au_id, au_fname, au_lname\n      having count(*) &gt; 2\n      order by au_lname, au_fname\")\n\nError in sqldf(\"select au_fname, au_lname\\n      from authors join title_authors on authors.au_id = title_authors.au_id\\n      group by authors.au_id, au_fname, au_lname\\n      having count(*) &gt; 2\\n      order by au_lname, au_fname\"): could not find function \"sqldf\"\n\n#------------------------------------------------------------------.\n# Some people will think that the 1st version (with the subquery)\n# is easier to understand.\n#\n# Some people will think that the 2nd version (with the join, group by, having)\n# is easier to understand.\n#\n# Generally it is a matter of style - they are both valid.\n# (NOTE - As a general rule - you should avoid correlated subqueries if possible\n# as they tend to run slower than other types of queries since the correlated\n# subquery is run many times. This is a rule of thumb but depending on the \n# exact queries, it is possible that a correlated subquery will run as \n# fast or faster than alternate queries that return the same results.)\n#\n# HOWEVER\n#\n# If you want to actually see how many books each author wrote, only the 2nd\n# version (without the subquery) will work. See the following. This is exactly the\n# same as the 2nd query above with the addition of\n#\n#            \"count(*) as num_titles)\"\n#\n# on the first line of the query.\n#------------------------------------------------------------------.\n\nsqldf(\"select au_fname, au_lname, count(*) as num_titles \n      from authors join title_authors on authors.au_id = title_authors.au_id\n      group by authors.au_id\n      having count(*) &gt; 2\n      order by au_lname, au_fname\")\n\nError in sqldf(\"select au_fname, au_lname, count(*) as num_titles \\n      from authors join title_authors on authors.au_id = title_authors.au_id\\n      group by authors.au_id\\n      having count(*) &gt; 2\\n      order by au_lname, au_fname\"): could not find function \"sqldf\"\n\n#------------------------------------------------------------------.\n# You CANNOT add the number of titles to the version with the subquery as\n# the outer query does not have access to ANY information about the titles\n# since the \"from\" in the outer query only includes the \"authors\" table. \n# Therefore the \"select\" clause in the outer query may only refer\n# to information from the authors table.\n#\n# TAKEAWAY: \n# When using a subquery in the where or having clauses\n# The only information that can be displayed by the outer query is \n# info that is available in the tables listed \n# in the \"from\" of the outer query. \n#------------------------------------------------------------------.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#table-aliases-with-subqueries",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#table-aliases-with-subqueries",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.16 Table aliases with subqueries",
    "text": "24.16 Table aliases with subqueries\n\n##################################################################\n# USING TABLE ALIASES FOR CORRELATED SUBQUERIES THAT USE THE SAME TABLES\n# IN THE INNER AND OUTER QUERIES\n#\n# In correlated subqueries if the inner query refers to the same \n# table(s) as the outer query - you must use a table alias.\n##################################################################\n\n# Show the books whose length in pages is longer than the average\n# length of books OF THE SAME TYPE\n# \n# You need to use a correlated subquery here. \n#\n# You need to use a subquery to compare the length of a particular\n# book (which is a non-aggregated value) to the avg(length) \n# (which is an aggregated value). \n#\n# To be more specific, you must use a \"correlated\" subquery\n# since each title will have a potentially differnt type. Therefore\n# the average length will be potentially different for books\n# of different types and sql will need to run the subquery once\n# for each row in the titles table.\n#\n# To be even more specific ... the inner query and the \n# outer query refer to the SAME table, i.e. the titles table.\n# AND the inner query must refer to information that is taken from \n# the outer query for that table. Therefore you must somehow make \n# it clear in the inner query which information is from the outer-query-title-table\n# and which information is from the version of the title table that is\n# in the inner query's from clause. \n# This is done by using \"alias\" names for the outer query's copy of the titles table\n# and a different \"alias\" for the inner query's copy of the titles table as shown below.\n\nsqldf(\"\n      select title_name, type, pages\n      from titles as outerTitles \n      where pages &gt; \n          (\n            select avg(pages) \n            from titles as innerTitles\n            where innerTitles.type = outerTitles.type\n          )\n      order by type, pages desc\n      \")\n\nError in sqldf(\"\\n      select title_name, type, pages\\n      from titles as outerTitles \\n      where pages &gt; \\n          (\\n            select avg(pages) \\n            from titles as innerTitles\\n            where innerTitles.type = outerTitles.type\\n          )\\n      order by type, pages desc\\n      \"): could not find function \"sqldf\"\n\n# We can prove to ourselves that this worked by showing the average\n# number of pages for each type of title\n\nsqldf(\"select type, avg(pages)\n      from titles\n      group by type\n      order by type\")\n\nError in sqldf(\"select type, avg(pages)\\n      from titles\\n      group by type\\n      order by type\"): could not find function \"sqldf\"\n\n# We can see those books that are below average in length for their\n# type of book by simply changing the &gt; to a &lt; in \n# the query\n\nsqldf(\"\n      select title_name, type, pages\n      from titles as outerTitles \n      where pages &lt;\n          (\n            select avg(pages) \n            from titles as innerTitles\n            where innerTitles.type = outerTitles.type\n          )\n      order by type, pages desc\n      \")\n\nError in sqldf(\"\\n      select title_name, type, pages\\n      from titles as outerTitles \\n      where pages &lt;\\n          (\\n            select avg(pages) \\n            from titles as innerTitles\\n            where innerTitles.type = outerTitles.type\\n          )\\n      order by type, pages desc\\n      \"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#exists-some-subquery",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#exists-some-subquery",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.17 EXISTS (some subquery)",
    "text": "24.17 EXISTS (some subquery)\n\n#-------------------------------------------------------------------------------\n# Using \"EXISTS\" with correlated subqueries that may or may not return any rows.\n#\n# The EXISTS keyword can be used in WHERE and in HAVING clauses.\n#\n# e.g.    WHERE EXISTS (SOME_SUBQUERY)\n#\n#         HAVING EXISTS (SOME_SUBQUERY)\n#\n# The EXISTS keyword is always followed by a subquery.\n#\n# If the subquery returns any rows then EXISTS (subquery) evaluates to TRUE. \n# If the subquery returns zero rows then EXISTS (subquery) evaluates to FALSE. \n#-------------------------------------------------------------------------------\n\n# \"EXISTS ( some subquery )\"  is used inside a where or having clause. \n# The row from the outer query is included in the results if the subquery\n# contains ANY rows. The actual data resturned by the subqeury is not significant.\n# The only significance is if the subquery returns SOMETHING or returns NOTHING.\n\n# EXAMPLE:\n# Show authors that live in the same city as at least one publisher.\n#\n# [NOTE: above we saw a different way to do this by using \"IN (subquery)\" ]\n\nsqldf(\"select au_fname, au_lname, authors.city\n      from authors\n      where EXISTS\n              (select *\n               from publishers\n               where publishers.city = authors.city)\n      order by au_lname, au_fname\n      \")\n\nError in sqldf(\"select au_fname, au_lname, authors.city\\n      from authors\\n      where EXISTS\\n              (select *\\n               from publishers\\n               where publishers.city = authors.city)\\n      order by au_lname, au_fname\\n      \"): could not find function \"sqldf\"\n\n# You know that the subquery is a CORRELATED subquery because it \n# cannot be run by itself (as shown below). This is because\n# the query refers to the the authors table but does not include\n# the authors table in the from clause.\nsqldf( \"select *\n          from publishers\n        where publishers.city = authors.city\")\n\nError in sqldf(\"select *\\n          from publishers\\n        where publishers.city = authors.city\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#multiple-ways-of-accomplishing-the-same-thing",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#multiple-ways-of-accomplishing-the-same-thing",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.18 MULTIPLE WAYS OF ACCOMPLISHING THE SAME THING",
    "text": "24.18 MULTIPLE WAYS OF ACCOMPLISHING THE SAME THING\n\n#############################################################.\n# MULTIPLE WAYS OF ACCOMPLISHING THE SAME THING\n#\n# There are often multiple different ways you can write queries\n# that result in the same output. Different people will approach\n# the same problem differently. \n#\n# When faced with different approaches, you should try if possible to\n# avoid correlated subqueries. This is because\n# as a \"rule of thumb\" correlated subqueries will run slower\n# than other approaches since the subquery is re-run many times, \n# i.e. once for  each row in the outer query.\n#\n# The following is an example of a query that can be accomplished\n# in many several different ways.\n#############################################################.\n\n#-------------------------------------------------------.\n# QUESTION:\n#\n#   Write a query to show the names of the authors\n#   who did NOT write any psychology books\n#-------------------------------------------------------.\n\n\n#...........................................................\n# One answer - using a correlated subquery with NOT EXISTS\n#...........................................................\n\n# Authors who did not write any psychology books:\n\nsqldf(\"select au_fname, au_lname\n       from authors\n       where NOT EXISTS\n             (select * \n              from title_authors join titles \n                                   on title_authors.title_id = titles.title_id\n              where title_authors.au_id = authors.au_id and\n                    type = 'psychology')\n      \n       order by au_lname, au_fname\n      \")\n\nError in sqldf(\"select au_fname, au_lname\\n       from authors\\n       where NOT EXISTS\\n             (select * \\n              from title_authors join titles \\n                                   on title_authors.title_id = titles.title_id\\n              where title_authors.au_id = authors.au_id and\\n                    type = 'psychology')\\n      \\n       order by au_lname, au_fname\\n      \"): could not find function \"sqldf\"\n\n# FYI - in case you're curious - this is a query for the authors who DID\n# write psychology books\n\n# authors who did write psychology books\nsqldf(\"select distinct au_fname, au_lname\n       from authors join title_authors on authors.au_id = title_authors.au_id\n                    join titles on title_authors.title_id = titles.title_id\n       where type = 'psychology'\")\n\nError in sqldf(\"select distinct au_fname, au_lname\\n       from authors join title_authors on authors.au_id = title_authors.au_id\\n                    join titles on title_authors.title_id = titles.title_id\\n       where type = 'psychology'\"): could not find function \"sqldf\"\n\n#...........................................................\n# Another answer - using EXCEPT\n#\n# The first query before the except retrieves all the authors names.\n# The 2nd query after the EXCEPT retrieves authors who wrote psychology books.\n# The EXCEPT removes the rows returned by the 2nd query from the results of\n# the first query.\n#...........................................................\n\n# Authors who did not write any psychology books:\n\nsqldf(\"-- get all the authors' names\n       select au_fname, au_lname\n       from authors\n      \n   EXCEPT   -- except removes any row that appears in the 2nd query\n   \n      -- get the authors who wrote psychology books\n      select distinct au_fname, au_lname\n      from authors join title_authors on authors.au_id = title_authors.au_id\n                   join titles on titles.title_id = title_authors.title_id\n      where type = 'psychology'\n   \n   order by au_lname, au_fname\")\n\nError in sqldf(\"-- get all the authors' names\\n       select au_fname, au_lname\\n       from authors\\n      \\n   EXCEPT   -- except removes any row that appears in the 2nd query\\n   \\n      -- get the authors who wrote psychology books\\n      select distinct au_fname, au_lname\\n      from authors join title_authors on authors.au_id = title_authors.au_id\\n                   join titles on titles.title_id = title_authors.title_id\\n      where type = 'psychology'\\n   \\n   order by au_lname, au_fname\"): could not find function \"sqldf\"\n\n#...........................................................\n# \n# Another answer - using a LEFT JOIN combined with a subquery in a FROM clause.\n#\n# You can use a subquery in a FROM clause to create a temporary table\n# that will be used for the query. The temporary table needs to be\n# given an alias. \n#\n# The example below uses a left join and a subquery in the FROM clause\n# to retrieve the authors who did not write psychology books.\n# This is yet one more way to accomplish the same results as the \n# examples above.\n#---------------------------------------------------------------------.\n\n# Yet another way of doing the same thing - by using a LEFT join.\n# This also shows an example of using a subquery in a from clause\n# to create a temporary table.\n\nsqldf(\"\n  select au_fname, au_lname\n  from authors LEFT JOIN \n\n           -- the following subquery creates a temporary table\n           -- that contains the authors/titles of psychology books\n  \n           (select *                 \n            from title_authors join titles \n                                 on title_authors.title_id = titles.title_id\n            where type = 'psychology') AS psychologyTitles\n  \n       on authors.au_id = psychologyTitles.au_id\n  \n  where psychologyTitles.au_id is NULL\n  order by au_lname, au_fname\")\n\nError in sqldf(\"\\n  select au_fname, au_lname\\n  from authors LEFT JOIN \\n\\n           -- the following subquery creates a temporary table\\n           -- that contains the authors/titles of psychology books\\n  \\n           (select *                 \\n            from title_authors join titles \\n                                 on title_authors.title_id = titles.title_id\\n            where type = 'psychology') AS psychologyTitles\\n  \\n       on authors.au_id = psychologyTitles.au_id\\n  \\n  where psychologyTitles.au_id is NULL\\n  order by au_lname, au_fname\"): could not find function \"sqldf\"\n\n# You can see the contents of the temporary table by running the\n# subquery by itself as shown here:\nsqldf(\"select *\n       from title_authors join titles \n                            on title_authors.title_id = titles.title_id\n       where type = 'psychology'\")\n\nError in sqldf(\"select *\\n       from title_authors join titles \\n                            on title_authors.title_id = titles.title_id\\n       where type = 'psychology'\"): could not find function \"sqldf\"\n\n# You can see all the columns from the left join here\nsqldf(\"\n  select *\n  from authors LEFT JOIN \n\n           -- the following subquery creates a temporary table\n           -- that contains the authors/titles of psychology books\n  \n           (select *                 \n            from title_authors join titles \n                                 on title_authors.title_id = titles.title_id\n            where type = 'psychology') AS psychologyTitles\n  \n       on authors.au_id = psychologyTitles.au_id\n  \n  -- where psychologyTitles.au_id is NULL\n  order by au_lname, au_fname\")\n\nError in sqldf(\"\\n  select *\\n  from authors LEFT JOIN \\n\\n           -- the following subquery creates a temporary table\\n           -- that contains the authors/titles of psychology books\\n  \\n           (select *                 \\n            from title_authors join titles \\n                                 on title_authors.title_id = titles.title_id\\n            where type = 'psychology') AS psychologyTitles\\n  \\n       on authors.au_id = psychologyTitles.au_id\\n  \\n  -- where psychologyTitles.au_id is NULL\\n  order by au_lname, au_fname\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#case---like-an-if-for-sql",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#case---like-an-if-for-sql",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.19 case - like an if for SQL",
    "text": "24.19 case - like an if for SQL\n\n######################################################################.\n# The case operator can appear in a SELECT clause to create a custom column.\n# It works similar to IF/ELSE/ELSE IF constructs that appear in other \n# languages.\n#\n# The example below should be easy to understand.\n#\n# If there is no ELSE part and no conditions are true, it returns NULL.\n#\n# SELECT ... SOME COLUMNS ... , \n#\n#       case when LOGICAL EXPRESSION then RESULT1\n#            when LOGICAL EXPRESSION then RESULT2\n#            when LOGICAL EXPRESSION then RESULT3\n#              ... etc\n#            else RESULT_IF_NO_LOGICAL_EXPRESSION_WAS_TRUE\n#       end   as   COLUMN_NAME,\n#\n#       ... SOME OTHER COLUMNS ...\n#\n# FROM ... etc\n######################################################################.\n\n# EXAMPLE - this shows the lengths and prices of books in categories \n#           rather than actual numbers.\n\nsqldf(\"select title_name,\n              case\n                 when pages is null then 'unknown'\n                 when pages &lt; 100 then 'short'\n                 when pages &lt; 500 then 'medium'\n                 when pages &lt; 1000 then 'long'\n                 else  'crazy long'\n              end as length,\n              pages,\n              case\n                 when price &lt; 25 then 'cheap'\n                 when price is null then 'unknown'\n                 when price &lt; 30 then 'midrange'\n                 else 'expensive'\n              end as afforability,\n              price\n       from titles\n       order by pages, title_name\")\n\nError in sqldf(\"select title_name,\\n              case\\n                 when pages is null then 'unknown'\\n                 when pages &lt; 100 then 'short'\\n                 when pages &lt; 500 then 'medium'\\n                 when pages &lt; 1000 then 'long'\\n                 else  'crazy long'\\n              end as length,\\n              pages,\\n              case\\n                 when price &lt; 25 then 'cheap'\\n                 when price is null then 'unknown'\\n                 when price &lt; 30 then 'midrange'\\n                 else 'expensive'\\n              end as afforability,\\n              price\\n       from titles\\n       order by pages, title_name\"): could not find function \"sqldf\"\n\n# EXAMPLE:\n#\n# NOTE: Even if you don't understand this description the results below\n# should be pretty easy to understand.\n#\n# DESCRIPTION: \n# Show a list of all the authors.\n#\n# Authors who wrote at least one psychology\n# book should appear on a row with the word psycology in the column \n# named psycology_or_other.\n#\n# Authors who wrote non-psychology books should appear in a row with the\n# word \"other\" in the psychology_or_other column.\n#\n# Authors who wrote both psychology and non-psychology books should\n# appear in two different rows. One for pyschology and one for other.\n\nsqldf(\"select distinct\n              case when type = 'psychology' then 'psychology'\n                   else 'other'\n              end as pyschology_or_other,\n              au_lname, au_fname\n      from authors join title_authors on authors.au_id = title_authors.au_id\n                   join titles on titles.title_id = title_authors.title_id\n      order by pyschology_or_other, au_lname, au_fname\")\n\nError in sqldf(\"select distinct\\n              case when type = 'psychology' then 'psychology'\\n                   else 'other'\\n              end as pyschology_or_other,\\n              au_lname, au_fname\\n      from authors join title_authors on authors.au_id = title_authors.au_id\\n                   join titles on titles.title_id = title_authors.title_id\\n      order by pyschology_or_other, au_lname, au_fname\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#self-joins",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#self-joins",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.20 self joins",
    "text": "24.20 self joins\n\n######################################################\n# Self joins\n######################################################\n\n# A \"self join\" is used when you want to compare two different rows \n# FROM THE SAME TABLE. To do so, the from clause uses two different\n# copies of the same table in a join. \n# The best way to understand this is with an example:\n\n#--------------------------------------------------------------------------\n# find the names of authors who share the same address as another author\n#--------------------------------------------------------------------------\n\n# We want to compare two different rows from the authors table to see if\n# they are from the same address. \n\n\n# Look at the where clause ... why do you think it uses a \"&gt;\" sign?\nsqldf(\"\n      select authors1.au_fname, authors1.au_lname, authors2.au_fname, authors2.au_lname, authors1.address\n      from authors authors1 join authors authors2 on authors1.address = authors2.address\n      where authors1.au_id &gt; authors2.au_id \")\n\nError in sqldf(\"\\n      select authors1.au_fname, authors1.au_lname, authors2.au_fname, authors2.au_lname, authors1.address\\n      from authors authors1 join authors authors2 on authors1.address = authors2.address\\n      where authors1.au_id &gt; authors2.au_id \"): could not find function \"sqldf\"\n\n# let's analyze what's really going on by showing the CROSS JOIN that happens\n# internally as the above select statement is being processed\nsqldf(\"select authors1.au_id, authors1.au_fname, authors1.au_lname, authors1.address,\n              authors2.au_id, authors2.au_fname, authors2.au_lname, authors2.address\n       from authors authors1 CROSS JOIN authors authors2\n       order by authors1.au_id, authors2.au_id\")\n\nError in sqldf(\"select authors1.au_id, authors1.au_fname, authors1.au_lname, authors1.address,\\n              authors2.au_id, authors2.au_fname, authors2.au_lname, authors2.address\\n       from authors authors1 CROSS JOIN authors authors2\\n       order by authors1.au_id, authors2.au_id\"): could not find function \"sqldf\"\n\n# If you take out the where clause, you will get extra rows\nsqldf(\"\n      select authors1.au_fname, authors1.au_lname, authors2.au_fname, authors2.au_lname, authors1.address\n      from authors authors1 join authors authors2 on authors1.address = authors2.address\n      \")\n\nError in sqldf(\"\\n      select authors1.au_fname, authors1.au_lname, authors2.au_fname, authors2.au_lname, authors1.address\\n      from authors authors1 join authors authors2 on authors1.address = authors2.address\\n      \"): could not find function \"sqldf\"\n\n# To understand why you get extra rows without the where take a look at the output\n# of the cross join of the authors table with itself. It is this cross join\n# that is then filtered by the on clause and by the where clause.\nsqldf(\"select authors1.au_fname, authors1.au_lname , authors1.address, authors2.au_fname, authors2.au_lname, authors2.address\n      from authors as authors1   cross join    authors as authors2\n      order by authors1.au_lname, authors1.au_fname, authors2.au_lname, authors2.au_fname\")\n\nError in sqldf(\"select authors1.au_fname, authors1.au_lname , authors1.address, authors2.au_fname, authors2.au_lname, authors2.address\\n      from authors as authors1   cross join    authors as authors2\\n      order by authors1.au_lname, authors1.au_fname, authors2.au_lname, authors2.au_fname\"): could not find function \"sqldf\"\n\n# You might think that we'd solve the problem if we used != instead of &gt;\n# However, this is still a problem. Can you figure out why?\nsqldf(\"\n      select authors1.au_fname, authors1.au_lname, authors2.au_fname, authors2.au_lname, authors1.address\n      from authors authors1 join authors authors2 on authors1.address = authors2.address\n      where authors1.au_id != authors2.au_id \")\n\nError in sqldf(\"\\n      select authors1.au_fname, authors1.au_lname, authors2.au_fname, authors2.au_lname, authors1.address\\n      from authors authors1 join authors authors2 on authors1.address = authors2.address\\n      where authors1.au_id != authors2.au_id \"): could not find function \"sqldf\"\n\n# if we want to check that multiple columns are equal we can do that too \nsqldf(\"\n      select authors1.au_fname, authors1.au_lname, authors2.au_fname, authors2.au_lname, authors1.address\n      from authors authors1 join authors authors2 \n                  on \n           authors1.address = authors2.address and\n           authors1.city = authors2.city and\n           authors1.state = authors2.state and\n           authors1.zip = authors2.zip\n      where authors1.au_id &gt; authors2.au_id \")\n\nError in sqldf(\"\\n      select authors1.au_fname, authors1.au_lname, authors2.au_fname, authors2.au_lname, authors1.address\\n      from authors authors1 join authors authors2 \\n                  on \\n           authors1.address = authors2.address and\\n           authors1.city = authors2.city and\\n           authors1.state = authors2.state and\\n           authors1.zip = authors2.zip\\n      where authors1.au_id &gt; authors2.au_id \"): could not find function \"sqldf\"\n\n# If we used a subquery for this type of question\n# we could not see both authors being displayed on the same row",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#self-joins---another-example",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#self-joins---another-example",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.21 self joins - another example",
    "text": "24.21 self joins - another example\n\n#------------------------------------------------------------------------\n# ANOTHER SELF JOIN EXAMPLE\n#------------------------------------------------------------------------\n# Organization management hierarchy \n# - see the file \"orgChart_large.png\"\n#------------------------------------------------------------------------\n\nemployees = data.frame(\n  empid = c( 1,         2,        3,          4,         5,   6,          7,           8,    9,         10,     11),\n  name = c(\"ann\",      \"floyd\", \"randall\",   \"albert\",\"shawn\",\"tyrone\", \"calvin\", \"harold\", \"tanya\", \"jorge\", \"claire\" ),\n  lastname = c(\"sanders\",\"flake\",\"rodgers\",   \"aames\",\"stevens\",\"tex\", \"coolidge\", \"hughs\", \"tamashevsky\",\"jones\", \"coolidge\" ),\n  salary = c(200,       50,     75,            90,     150,     250,     75,        190,      150,    175,      110 ),\n  mgr = c(NA,            1,        1,           1,       2,      3,        3,       2,         7,      2,        7)\n)\n\nemployees\n\n   empid    name    lastname salary mgr\n1      1     ann     sanders    200  NA\n2      2   floyd       flake     50   1\n3      3 randall     rodgers     75   1\n4      4  albert       aames     90   1\n5      5   shawn     stevens    150   2\n6      6  tyrone         tex    250   3\n7      7  calvin    coolidge     75   3\n8      8  harold       hughs    190   2\n9      9   tanya tamashevsky    150   7\n10    10   jorge       jones    175   2\n11    11  claire    coolidge    110   7\n\n# write a query that shows SO_AND_SO is managed by SO_AND_SO for each person\n\nsqldf(\"select emp.name || ' is managed by ' || manager.name\n       from employees AS emp join employees AS manager on emp.mgr = manager.empid\n       order by emp.name\n      \n      \")\n\nError in sqldf(\"select emp.name || ' is managed by ' || manager.name\\n       from employees AS emp join employees AS manager on emp.mgr = manager.empid\\n       order by emp.name\\n      \\n      \"): could not find function \"sqldf\"\n\n# To make it a little easier to read we could use the \n# aliasses emps and mgrs instead of emp1 and emp2\n\nsqldf(\"select emps.name || ' is managed by ' || mgrs.name\n       from employees emps join employees mgrs on emps.mgr = mgrs.empid\n       order by emps.name\n      \n      \")\n\nError in sqldf(\"select emps.name || ' is managed by ' || mgrs.name\\n       from employees emps join employees mgrs on emps.mgr = mgrs.empid\\n       order by emps.name\\n      \\n      \"): could not find function \"sqldf\"\n\nsqldf(\"select emps.name || ' is managed by ' || mgrs.name\n       from employees as emps join employees as mgrs on emps.mgr = mgrs.empid\n       order by emps.name\n      \n      \")\n\nError in sqldf(\"select emps.name || ' is managed by ' || mgrs.name\\n       from employees as emps join employees as mgrs on emps.mgr = mgrs.empid\\n       order by emps.name\\n      \\n      \"): could not find function \"sqldf\"\n\nsqldf(\"select publishers.pub_name, titles.title_name\n       from publishers join titles on publishers.pub_id = titles.pub_id\n       where publishers.pub_name like 'A%'\")\n\nError in sqldf(\"select publishers.pub_name, titles.title_name\\n       from publishers join titles on publishers.pub_id = titles.pub_id\\n       where publishers.pub_name like 'A%'\"): could not find function \"sqldf\"\n\nsqldf(\"select publishers.pub_name, titles.title_name\n       from publishers join titles on publishers.pub_id = titles.pub_id\n                                      and publishers.pub_name like 'A%'\")\n\nError in sqldf(\"select publishers.pub_name, titles.title_name\\n       from publishers join titles on publishers.pub_id = titles.pub_id\\n                                      and publishers.pub_name like 'A%'\"): could not find function \"sqldf\"\n\nsqldf(\"select publishers.pub_name, titles.title_name\n       from publishers, titles \n       where publishers.pub_id = titles.pub_id\n             and publishers.pub_name like 'A%'\")\n\nError in sqldf(\"select publishers.pub_name, titles.title_name\\n       from publishers, titles \\n       where publishers.pub_id = titles.pub_id\\n             and publishers.pub_name like 'A%'\"): could not find function \"sqldf\"\n\n# It might help to understand what's going on by looking\n# at the cross join of the two tables.\n\nsqldf(\"select emps.*, mgrs.*\n       from employees as emps CROSS JOIN employees as mgrs\n       order by emps.empid, mgrs.empid\")\n\nError in sqldf(\"select emps.*, mgrs.*\\n       from employees as emps CROSS JOIN employees as mgrs\\n       order by emps.empid, mgrs.empid\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#practice-question-rs-are-from-booksdatabase-word-document.",
    "href": "sql0040-crossJoin-leftJoin-subquery-selfJoins-v023.html#practice-question-rs-are-from-booksdatabase-word-document.",
    "title": "24  more joins (cross/left/right/full), subqueries, set operations, case, self joins",
    "section": "24.22 Practice (question #rs are from booksDatabase Word document.)",
    "text": "24.22 Practice (question #rs are from booksDatabase Word document.)\n\n#######################################################################.\n# PRACTICE with subqueries, outer joins, unions and other stuff.\n# Note that many of the questions shown below come from the\n# booksDatabase word document. The numbers for the questions\n# are the numbers from that document.\n#######################################################################.\n\n\n24.22.1 Question 35\n\n# Show the title names  and number of pages for those books that are\n# longer than (ie.  more pages than) the average length of all books.\n\n\n#~~~~~~~~~~~~~~\n# ANSWER\n#~~~~~~~~~~~~~~\n\nsqldf(\"\nselect title_name , pages\nfrom titles\nwhere pages &gt;= (select avg(pages) from titles)\n\")\n\nError in sqldf(\"\\nselect title_name , pages\\nfrom titles\\nwhere pages &gt;= (select avg(pages) from titles)\\n\"): could not find function \"sqldf\"\n\n\n\n\n24.22.2 Question 36\n\n#   Show each publisher's name and the number of authors who have written books\n# for that publisher.\n\n\n#~~~~~~~~~~~~~~\n# ANSWER\n#~~~~~~~~~~~~~~\n\nsqldf(\"\nselect pub_name, count(DISTINCT authors.au_id) as '# of authors'\nfrom authors join title_authors on authors.au_id = title_authors.au_id \njoin titles on title_authors.title_id = titles.title_id \njoin publishers on publishers.pub_id = titles.pub_id\ngroup by publishers.pub_id, pub_name;\n\")\n\nError in sqldf(\"\\nselect pub_name, count(DISTINCT authors.au_id) as '# of authors'\\nfrom authors join title_authors on authors.au_id = title_authors.au_id \\njoin titles on title_authors.title_id = titles.title_id \\njoin publishers on publishers.pub_id = titles.pub_id\\ngroup by publishers.pub_id, pub_name;\\n\"): could not find function \"sqldf\"\n\n# EXPLANATION\n\n# The following query shows the first step that would be necessariy to thinking about\n# how to find the final answer (shown above). The following shows a separate\n# row for each publisher and an author that wrote for that publisher. If you\n# order the results by publisher, it is easy to see that you can think of\n# each different publisher as a \"group\". That is what the group by\n# does in the answer (see above). The count(DISTINCT authors.au_id)\n# gets the number of \"distinct\" authors for the particular publisher.\n# The \"distinct\" is necessary to ensure that you don't count an author\n# twice for the same publisher (e.g. Sarah Buchman wrote two books\n# for Schandenfreude Press but should only be counted once as an\n# author for Scandenfreude Press)\n\nsqldf(\"\nselect pub_name, authors.au_fname, authors.au_lname\nfrom authors join title_authors on authors.au_id = title_authors.au_id \njoin titles on title_authors.title_id = titles.title_id \njoin publishers on publishers.pub_id = titles.pub_id\norder by pub_name, au_fname, au_lname\n\")\n\nError in sqldf(\"\\nselect pub_name, authors.au_fname, authors.au_lname\\nfrom authors join title_authors on authors.au_id = title_authors.au_id \\njoin titles on title_authors.title_id = titles.title_id \\njoin publishers on publishers.pub_id = titles.pub_id\\norder by pub_name, au_fname, au_lname\\n\"): could not find function \"sqldf\"\n\n\n\n\n24.22.3 Question 36.5\n\n# Show the pub_name and the number of titles published by that publisher. \n\n\n#~~~~~~~~~~~~~~\n# ANSWER\n#~~~~~~~~~~~~~~\n\nsqldf(\"select pub_name, count(*) as num_titles\n       from publishers join titles on publishers.pub_id = titles.pub_id\n       group by publishers.pub_id, pub_name\n       order by pub_name\")\n\nError in sqldf(\"select pub_name, count(*) as num_titles\\n       from publishers join titles on publishers.pub_id = titles.pub_id\\n       group by publishers.pub_id, pub_name\\n       order by pub_name\"): could not find function \"sqldf\"\n\n\n\n\n24.22.4 Question 37\n\n# Show the pub_name and the number of titles published by that publisher. \n# Only include publishers for whom at least 4 authors have worked. \n#\n# (this question combines the concepts of the previous two questions)\n\n\n#~~~~~~~~~~~~~~~~.\n# ANSWER\n#~~~~~~~~~~~~~~~~.\n\nsqldf(\"\nselect pub_name, count(*) as 'Number of Titles'\nfrom publishers as pub1 join titles on pub1.pub_id = titles.pub_id\ngroup by pub1.pub_id, pub_name\nhaving   4 &lt;= ( select count(DISTINCT authors.au_id)\n                from authors join title_authors on authors.au_id = title_authors.au_id \n                join titles on title_authors.title_id = titles.title_id \n                join publishers as pub2 on pub2.pub_id = titles.pub_id\n                where pub2.pub_id = pub1.pub_id ) \norder by pub_name\n\")\n\nError in sqldf(\"\\nselect pub_name, count(*) as 'Number of Titles'\\nfrom publishers as pub1 join titles on pub1.pub_id = titles.pub_id\\ngroup by pub1.pub_id, pub_name\\nhaving   4 &lt;= (\\tselect count(DISTINCT authors.au_id)\\n                from authors join title_authors on authors.au_id = title_authors.au_id \\n                join titles on title_authors.title_id = titles.title_id \\n                join publishers as pub2 on pub2.pub_id = titles.pub_id\\n                where pub2.pub_id = pub1.pub_id ) \\norder by pub_name\\n\"): could not find function \"sqldf\"\n\n# Note - the subquery is a correlated subquery. \n# It returns the number of authors who published with a particular publisher.\n# The following are the acutal subqueries that are run for each publisher:\n# This happens automatically.\n\n# For Abatis - 'P01'\n\nsqldf(\" select count(DISTINCT authors.au_id)\n        from authors join title_authors on authors.au_id = title_authors.au_id \n                     join titles on title_authors.title_id = titles.title_id \n                     join publishers as pub2 on pub2.pub_id = titles.pub_id\n        where pub2.pub_id = 'P01'\")\n\nError in sqldf(\" select count(DISTINCT authors.au_id)\\n        from authors join title_authors on authors.au_id = title_authors.au_id \\n                     join titles on title_authors.title_id = titles.title_id \\n                     join publishers as pub2 on pub2.pub_id = titles.pub_id\\n        where pub2.pub_id = 'P01'\"): could not find function \"sqldf\"\n\n# For Core Dump Books - 'P02'\n\nsqldf(\" select count(DISTINCT authors.au_id)\n        from authors join title_authors on authors.au_id = title_authors.au_id \n                     join titles on title_authors.title_id = titles.title_id \n                     join publishers as pub2 on pub2.pub_id = titles.pub_id\n        where pub2.pub_id = 'P02'\")\n\nError in sqldf(\" select count(DISTINCT authors.au_id)\\n        from authors join title_authors on authors.au_id = title_authors.au_id \\n                     join titles on title_authors.title_id = titles.title_id \\n                     join publishers as pub2 on pub2.pub_id = titles.pub_id\\n        where pub2.pub_id = 'P02'\"): could not find function \"sqldf\"\n\n\n\n\n24.22.5 Question 38\n\n# Show the names of publishers who did not publish any books.\n# (I guess they are just getting started in the business ... )\n\n\n#~~~~~~~~~~~~~~~~.\n# ANSWER\n#~~~~~~~~~~~~~~~~.\n\n# ANSWER - with a subquery\n\nsqldf(\"\nselect pub_name \nfrom publishers  as   pub1\nwhere not exists\n( select * \n    from publishers  as pub2  join titles on pub2.pub_id = titles.pub_id\n  where pub2.pub_id = pub1.pub_id );\n\")\n\nError in sqldf(\"\\nselect pub_name \\nfrom publishers  as   pub1\\nwhere not exists\\n( select * \\n    from publishers  as pub2  join titles on pub2.pub_id = titles.pub_id\\n  where pub2.pub_id = pub1.pub_id );\\n\"): could not find function \"sqldf\"\n\n# ANSWER - with a left join\n\nsqldf(\"\nselect pub_name from publishers left join titles on publishers.pub_id = titles.pub_id\nwhere title_id is NULL;\n\")\n\nError in sqldf(\"\\nselect pub_name from publishers left join titles on publishers.pub_id = titles.pub_id\\nwhere title_id is NULL;\\n\"): could not find function \"sqldf\"\n\n\n\n\n24.22.6 Question 39(a)\n\n# List the name of each publisher and the total number of books that\n# each publisher has published. Sort the results so that the publishers who\n# published the most books appear at the top. If two or more publishers\n# published the same number of books then they should be listed in alphabetical order. \n#\n# a.    The answer should only include publisher who have published some books.\n\n\n#~~~~~~~~~~~~~~~~.\n# ANSWER\n#~~~~~~~~~~~~~~~~.\n\nsqldf(\"\nselect pub_name, count(*)\nfrom titles join publishers on publishers.pub_id = titles.pub_id\ngroup by pub_name\norder by count(*) desc, pub_name;\n\")\n\nError in sqldf(\"\\nselect pub_name, count(*)\\nfrom titles join publishers on publishers.pub_id = titles.pub_id\\ngroup by pub_name\\norder by count(*) desc, pub_name;\\n\"): could not find function \"sqldf\"\n\n\n\n\n24.22.7 Question 39(b)\n\n# (2nd part of previous question)\n#\n# b.    This time make sure to also include publishers who have published zero books\n\n\n#~~~~~~~~~~~~~~~~.\n# ANSWER\n#~~~~~~~~~~~~~~~~.\n\nsqldf(\"\nselect pub_name, count(titles.title_id)\nfrom publishers left join titles on publishers.pub_id = titles.pub_id\ngroup by pub_name\norder by count(*) desc, pub_name;\n\")\n\nError in sqldf(\"\\nselect pub_name, count(titles.title_id)\\nfrom publishers left join titles on publishers.pub_id = titles.pub_id\\ngroup by pub_name\\norder by count(*) desc, pub_name;\\n\"): could not find function \"sqldf\"\n\n# ANSWER - with a UNION - however the previous answer is shorter and more to the point\n\nsqldf(\"\nselect pub_name , 0  as  NumTitles\nfrom publishers left join titles on publishers.pub_id = titles.pub_id\nwhere title_id is NULL \n\nUNION\n\nselect pub_name, count(*) as NumTitles\nfrom titles join publishers on publishers.pub_id = titles.pub_id\ngroup by pub_name;\n\")\n\nError in sqldf(\"\\nselect pub_name , 0  as  NumTitles\\nfrom publishers left join titles on publishers.pub_id = titles.pub_id\\nwhere title_id is NULL \\n\\nUNION\\n\\nselect pub_name, count(*) as NumTitles\\nfrom titles join publishers on publishers.pub_id = titles.pub_id\\ngroup by pub_name;\\n\"): could not find function \"sqldf\"\n\n\n\n\n24.22.8 Question 46\n\n#################.\n# QUESTION\n#################.\n\n# Show the names of the most prolific authors, i.e. the authors \n# who have written the most books. Note that there could be\n# several different authors who are \"tied\" for the most number of books \n# written. Sort the names in alphabetical order (last name, first name)\n# Also show the au_id and the number of titles that the author wrote.\n\n\n#~~~~~~~~~~~~~~~~.\n# ANSWER\n#~~~~~~~~~~~~~~~~.\n\n# This is a rather complex answer.\n# This approach uses a subquery within a subquery.\n# There may be other approaches too.\n# There may be simpler answers too.\n# \n# To explain we will show the subqueries and what they produce.\n# Then we will show the full query that includes the subquery.\n#\n# The following query is NOT the answer. It is simply a query that \n# shows the number of books that were written by each author. This\n# will be used as a subquery in the answer shown below.\nsqldf(\"\n          select authors.au_id, count(*) as numTitles\n          from authors join title_authors on authors.au_id = title_authors.au_id\n          group by authors.au_id, au_fname, au_lname\n\")\n\nError in sqldf(\"\\n          select authors.au_id, count(*) as numTitles\\n          from authors join title_authors on authors.au_id = title_authors.au_id\\n          group by authors.au_id, au_fname, au_lname\\n\"): could not find function \"sqldf\"\n\n# We'd like to get the max number of titles that an author wrote. \n# This amounts to getting the highest number from the numTitles column\n# in the previous query. We can do that by using the above query \n# as a subquery in the from clause.\n\nsqldf(\"\n          select max(numTitles2) \n          from \n               (select authors.au_id, count(*) as numTitles2\n                from authors join title_authors on authors.au_id = title_authors.au_id\n                group by authors.au_id, au_fname, au_lname)\n\n      \")\n\nError in sqldf(\"\\n          select max(numTitles2) \\n          from \\n               (select authors.au_id, count(*) as numTitles2\\n                from authors join title_authors on authors.au_id = title_authors.au_id\\n                group by authors.au_id, au_fname, au_lname)\\n\\n      \"): could not find function \"sqldf\"\n\n# Finally we can put this all together to answer our question. \n# The following is the FULL ANSWER to the original question.\n# It uses the above query as a subquery in the having clause (see \n# the code below). Note that in the following code there is a\n# subquery inside of a subquery.\n#\n# FINAL ANSWER:\n\nsqldf(\"\nselect authors.au_id, au_fname, au_lname, count(*) as numTitles\nfrom authors join title_authors on authors.au_id = title_authors.au_id\ngroup by authors.au_id, au_fname, au_lname\nhaving numTitles = \n          (select max(numTitles2) \n           from \n               (select authors.au_id, count(*) as numTitles2\n                from authors join title_authors on authors.au_id = title_authors.au_id\n                group by authors.au_id, au_fname, au_lname))\norder by au_lname, au_fname\n\")\n\nError in sqldf(\"\\nselect authors.au_id, au_fname, au_lname, count(*) as numTitles\\nfrom authors join title_authors on authors.au_id = title_authors.au_id\\ngroup by authors.au_id, au_fname, au_lname\\nhaving numTitles = \\n          (select max(numTitles2) \\n           from \\n               (select authors.au_id, count(*) as numTitles2\\n                from authors join title_authors on authors.au_id = title_authors.au_id\\n                group by authors.au_id, au_fname, au_lname))\\norder by au_lname, au_fname\\n\"): could not find function \"sqldf\"",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>more joins (cross/left/right/full), subqueries, set operations, case, self joins</span>"
    ]
  },
  {
    "objectID": "sql0050-commonTableExpressions-v001.html",
    "href": "sql0050-commonTableExpressions-v001.html",
    "title": "25  Common Table Expressions (CTE)",
    "section": "",
    "text": "See the following to learn about this important feature of modern SQL:\nhttps://learnsql.com/blog/what-is-common-table-expression/",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Common Table Expressions (CTE)</span>"
    ]
  },
  {
    "objectID": "sql0200-otherSqlCommands-v002.html",
    "href": "sql0200-otherSqlCommands-v002.html",
    "title": "26  other commands: update/delete, create/drop/insert",
    "section": "",
    "text": "26.1 db-fiddle website\nsqldf cannot run SQL commands other than SELECT.\nWe will use the following website to demonstrate other SQL commands.\nJust create the database on db-fiddle\nhttps://www.db-fiddle.com/f/uWwmfDJJeCdeS6Xiy3e1bm/0\nsome sample select statements with the same tables\nhttps://www.db-fiddle.com/f/uWwmfDJJeCdeS6Xiy3e1bm/11",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>other commands: update/delete, create/drop/insert</span>"
    ]
  },
  {
    "objectID": "sql0200-otherSqlCommands-v002.html#update",
    "href": "sql0200-otherSqlCommands-v002.html#update",
    "title": "26  other commands: update/delete, create/drop/insert",
    "section": "26.2 update",
    "text": "26.2 update\nThe UPDATE command is used for modifying the data in a table. See the following for more info:\n\nhttps://www.sqlitetutorial.net/sqlite-update/",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>other commands: update/delete, create/drop/insert</span>"
    ]
  },
  {
    "objectID": "sql0200-otherSqlCommands-v002.html#delete",
    "href": "sql0200-otherSqlCommands-v002.html#delete",
    "title": "26  other commands: update/delete, create/drop/insert",
    "section": "26.3 delete",
    "text": "26.3 delete\nThe DELETE command is used to delete entire rows of data from a table. See the following for more info:\n\nhttps://www.sqlitetutorial.net/sqlite-delete/",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>other commands: update/delete, create/drop/insert</span>"
    ]
  },
  {
    "objectID": "sql0200-otherSqlCommands-v002.html#create-table",
    "href": "sql0200-otherSqlCommands-v002.html#create-table",
    "title": "26  other commands: update/delete, create/drop/insert",
    "section": "26.4 create table",
    "text": "26.4 create table\nThe CREATE TABLE command is used to create tables in a relational database. See the following for more info:\n\nhttps://www.sqlitetutorial.net/sqlite-create-table/\n\nAs part of the create table command, you can specify certain “constraints” on the columns of the table. For example, you can specify that a particular column or columns should never be allowed to contain any NULL values or that all of the values in a particular column should be unique (in addition to this requirement for the primary key). See the following for info about how to apply various constraints to the columns in a table:\n\nhttps://www.sqlitetutorial.net/sqlite-not-null-constraint/\nhttps://www.sqlitetutorial.net/sqlite-unique-constraint/\nhttps://www.sqlitetutorial.net/sqlite-check-constraint/\nhttps://www.sqlitetutorial.net/sqlite-autoincrement/",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>other commands: update/delete, create/drop/insert</span>"
    ]
  },
  {
    "objectID": "sql0200-otherSqlCommands-v002.html#insert-a-new-row-into-a-table",
    "href": "sql0200-otherSqlCommands-v002.html#insert-a-new-row-into-a-table",
    "title": "26  other commands: update/delete, create/drop/insert",
    "section": "26.5 insert a new row into a table",
    "text": "26.5 insert a new row into a table\nThe INSERT command is used to insert one or more new rows into a table. See the following for more info:\n\nhttps://www.sqlitetutorial.net/sqlite-insert/",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>other commands: update/delete, create/drop/insert</span>"
    ]
  },
  {
    "objectID": "sql0200-otherSqlCommands-v002.html#drop-table",
    "href": "sql0200-otherSqlCommands-v002.html#drop-table",
    "title": "26  other commands: update/delete, create/drop/insert",
    "section": "26.6 drop table",
    "text": "26.6 drop table\nThe DROP TABLE command removes an entire table (including the structure of the table and all rows of data) from a database. See the following for more info:\n\nhttps://www.sqlitetutorial.net/sqlite-drop-table/",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>other commands: update/delete, create/drop/insert</span>"
    ]
  },
  {
    "objectID": "sql0200-otherSqlCommands-v002.html#sql-dml-vs-ddl-commands",
    "href": "sql0200-otherSqlCommands-v002.html#sql-dml-vs-ddl-commands",
    "title": "26  other commands: update/delete, create/drop/insert",
    "section": "26.7 SQL “DML” vs “DDL” commands",
    "text": "26.7 SQL “DML” vs “DDL” commands\nThe commands in SQL are often categorized into the following two distinct categories:\n\n26.7.1 Data Manipulation Language (DML) SQL commands\nThe commands in SQL that are used for creating, reading, updating and deleting data (collectively referred to as “CRUD” operations) are known as “Data Manipulation Language” (DML) SQL commands. These include the following SQL commands:\n\ninsert (for “creating” rows of data)\nselect (for “reading” rows of data)\nupdate (for “updating” rows of data)\ndelete (for “deleting” rows of data)\n\nThe term DML or “Data Manipulation Language” is often misunderstood. DML is NOT a new language. DML is simply the term that is used to refer to the parts of SQL for “manipulating” data (i.e. performing CRUD operations).\n\n\n26.7.2 Data Definition Language (DML) SQL commands\nThe commands in SQL that are used for creating and managing the database tables are known as “Data Definition Language” (DML) SQL commands. These include the following.\n\nCREATE TABLE - used to create a table\nDROP TABLE - used to destroy an entire table (its structure and its data)\nALTER TABLE - used to change the structure of a table (e.g. add columns)\n\nMany RDBMS products include other DDL commands for example to rename tables as well as to work with other more advanced structure. For more info, see the documentation for your particular RDBMS product.\n\n# There are many SQL commands other than select.\n# The following is a list of some of the more common SQL commands. \n# The list below doesn't include the entire syntax. \n# See this page for more info on the syntax for individual\n# SQL commands: https://www.w3schools.com/sql/default.asp\n#\n#  # create a new table structure\n#  # see : https://www.w3schools.com/sql/sql_create_table.asp\n#  CREATE TABLE someTable ...\n# \n#  # \"drop\" or entirely remove the table structure and all rows of data\n#  DROP TABLE someTable    \n#\n#  # Insert a new row into a table\n#  INSERT INTO someTable ...\n#\n#  # modify the values in a table\n#  UPDATE someTable ...\n#\n#  # delete some or all of the rows in a table\n#  DELETE FROM someTable ...\n#\n#\n#\n# FOR MORE DETAILS ABOUT THESE STATEMENTS, SEE THE catering DATABASE AND\n# THE VARIOUS FILES CONTAINED IN cateringDatabase-v003.zip",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>other commands: update/delete, create/drop/insert</span>"
    ]
  },
  {
    "objectID": "sql0900-sqlWindowFunctions-v002.html",
    "href": "sql0900-sqlWindowFunctions-v002.html",
    "title": "27  SQL “window” functions",
    "section": "",
    "text": "See the following for more info:\nhttps://learnsql.com/blog/why-should-i-learn-sql-window-functions/",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>SQL \"window\" functions</span>"
    ]
  },
  {
    "objectID": "sql0950-workingWithDatabasesInR-v010.html",
    "href": "sql0950-workingWithDatabasesInR-v010.html",
    "title": "28  Working directly with databases in R",
    "section": "",
    "text": "28.1 Download files for use with this material\nClick here to download the books.sqlite file. We will use this with the code below. Note that a sqlite file can also have different extensions, such as .db (or anything else). There is no official standard for the extension.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Working directly with databases in R</span>"
    ]
  },
  {
    "objectID": "sql0950-workingWithDatabasesInR-v010.html#going-beyond-sqldf",
    "href": "sql0950-workingWithDatabasesInR-v010.html#going-beyond-sqldf",
    "title": "28  Working directly with databases in R",
    "section": "28.2 Going beyond sqldf",
    "text": "28.2 Going beyond sqldf\n\n###############################################################################.\n#\n# \"going beyond sqldf\"   -   Connecting to databases through R  -  \n#\n# In this section we will go beyond using sqldf to manipulate dataframes in R.\n# We will learn about how to interact with an actual database management system\n# from within R.\n#\n###############################################################################.\n\n###############################################################################.\n#\n# Resources for learning more about working with databases in R\n#\n# Best Practices in Working with Databases (in RStudio)\n#    https://solutions.posit.co/connections/db/\n#\n# Datacamp Tutorial\n#    https://www.datacamp.com/community/tutorials/sqlite-in-r\n#\n# vignette(\"spec\", package=\"DBI\")\n#\n# help(package=\"DBI\")\n#\n# Functions we will use:\n#    dbConnect\n#    dbExecute    # create table, insert , update, delete, etc.\n#\n#    dbGetQuery   # select (interactive work)\n#\n#    dbSendQuery  # select (batched work)\n#    dbFetch\n#    dbClearResult\n###############################################################################.\n\n\n#-------------------------------------\n# sqldf is not enough\n#-------------------------------------\n\n# As you have already learned, SQL is a standard language for manipulating data\n# that is stored in a relational database. There are many different relational\n# database management system products and each one uses SQL to manipulate the\n# data in the database.\n\n# We started learning about the SQL select statement by using the sqldf\n# function from the sqldf package to manipulate R dataframes with \n# SQL select statements. However, sqldf does NOT allow you to manipulate\n# data that is stored in an actual database. The purpose for sqldf is to allow\n# R programmers who are familiar with SQL SELECT statements \n# to use their knowledge to manipulate R dataframes. This is very useful as \n# SQL is an extremely popular language that is widely known and understood.\n# However, in order to use SQL to manipulate data in an ACTUAL database, R programers\n# must use functions from packages other than sqldf. \n\n\n#-------------------------------------------------------------------\n# More about Relational Database Management System (RDBMS) software\n#-------------------------------------------------------------------\n\n# Relational database management system (RDBMS) products aim to provide a highly\n# efficient mechanism to store and retrieve data. Depending on the specific\n# RDBMS product, the type of computer (and many other details) a relational\n# database management system may able to read and write thousands or even\n# millions or billions of data values per second. To achieve this level of\n# efficiency often requires these products to integrate tightly with the\n# underlying computer in technical ways that go beyond what many other software\n# products require. Therefore installing and getting these products to work\n# correctly can sometimes be a little complex and require more than just running\n# a simple install program.\n#\n# Relational Database Management Systems differ from programs such as Excel that\n# are designed for people to interact with them directly. Relational Database\n# Management System (RDBMS) software products are designed to allow other\n# computer programs to store and retrieve data from them. For example a program\n# written in R (or any other language) can store and retrieve data from an\n# RDBMS. These other computer programs (such as an R program) are in turn used\n# by business people to do their work. Typically, data technologists (e.g.\n# programmers data analysts, etc) write the programs (e.g. in R) that are used\n# by business people (e.g. traders, accountants). The data technologists use SQL\n# and R (or another programming language) to create easy to use tools for the\n# business people. In our class we will learn how to write R programs to send\n# and retrieve data from an RDBMS.\n\n#--------------------------------------------------------------------------\n# CLIENTS AND SERVERS\n#\n#   - client programs\n#   - server programs\n#\n#   - client computers\n#   - server computers\n#--------------------------------------------------------------------------\n\n# An RDBMS software program is known as a \"server program\" (it \"serves up\"\n# information). The computer programs that send and retrieve data from the RDBMS\n# program are known as \"client programs\". In a similar way, the programs that \n# run websites are known as \"(web) server programs\" (they also serve up information)\n# while web browsers are known as \"client programs\".\n\n# Most relational database management systems are intended to be used\n# \"remotely\". In other words, the relational database management system is\n# installed one computer and the computer programs that send and retrieve data\n# from the RDBMS are located on other computers. The computer that the RDBMS is\n# installed on is known as a \"server computer\" (the \"server program\" is\n# installed on the \"server computer\"). A computer that has software installed on\n# it that interacts with the RDBMS is known as a \"client computer\" (a \"client\n# program\" is installed on a \"client computer\"). The client program and server\n# program may communicate over the Internet or over a local computer network\n# (e.g. a network of computers in a company that is not accessible from the\n# larger Internet).\n#\n# It is also possible for client programs and server programs to be\n# installed on the same computer. The details as to which computer each \n# program is installed on (whether the same computer or different computers)\n# is a detail that should not affect the way client programs are written.\n# Often when creating a new program (e.g. an R program) the developer has \n# both the server program (e.g. the RDBMS software) and the client program\n# (e.g. the program they are creating) installed on their personal computer.\n# When the program is eventually used by business users, the program could \n# then be configured to communicate with a different server computer. The\n# specifics of how exactly this is done is beyond the scope of what we are learning\n# in this class. \n#\n\n#--------------------------------------------------------------------\n# Different RDBMS software packages\n#--------------------------------------------------------------------\n# Some popular RDBMS packages that can be downloaded and installed on your\n# computer for free are:\n#\n#   - MySQL available for Windows/Mac/Linux https://www.mysql.com/\n#\n#     The installation of MySql can be somewhat complex. There are multiple\n#     different products to choose between and may require \"administrator privileges\"\n#     to install correctly. Nevertheless, it should be possible for you to install\n#     and use MySql without too much hassle. However, the complications in my mind\n#     do not make this an ideal solution for use in a classroom setting.\n#\n#   - PostgreSQL available for Windows/Mac/Linux https://www.postgresql.org/\n#\n#   - Microsoft SQL Server Express \n#     available for Windows/Linux (not for Mac)\n#     https://www.microsoft.com/en-us/sql-server/sql-server-downloads\n#     NOTE: There are many different versions of \"Microsoft SQL Server\" software\n#           the \"Express\" version is the \"free\" version.\n#\n#     For Windows users, this is a wonderful product that is much easier to use\n#     than MySql. However, Microsoft SQL Server is  NOT available \"out of the box\" for Mac. \n#     While, you can find information online about how to install SQL Server on Macs,\n#     this requires using Docker software - which itself has a learning curve.\n#     If you own a mac and want to try it anyway\n#     you can see this page - https://database.guide/how-to-install-sql-server-on-a-mac/\n#     or search online for many other websites that have similar information.\n#\n#\n#   - SQLite (https://www.sqlite.org/)\n#\n#     This is a \"simple\" relational database management system. It is designed\n#     to be used only \"locally\", not over a computer network. In other words,\n#     the client program (e.g. an R program) that interacts with the RDBMS is\n#     expected to be installed on the same computer as the SQLite software. This\n#     software lacks many of the more sophisticated features found in other\n#     products. SQLite is not designed to be used with tremendous amounts of\n#     information. However, SQLite does allow programs that communicate via SQL\n#     to store their information in a database without too much hassle. This\n#     product is often used by computer programs and apps that don't require\n#     tremendous amounts of data to store and retrieve data in a relational\n#     database.\n#\n#\n#     DIFFERENT OPTIONS TO INSTALL SQLite\n#\n#     Installation of SQLite is relatively straight forward. The entire SQLite\n#     program is contained in a single \"executable file\" that can be downloaded\n#     from the SQLite website. This software does NOT have a \"graphical user\n#     interface (GUI)\". Rather the program presents a simple \"command line\"\n#     interface - similar to R - in which you can type commands and see the\n#     results.\n#\n#     In addition to the \"plain vanilla\" SQLite that is distributed by\n#     sqlite.org, there are other add-on programs that you can download to\n#     provide a more \"friendly\" GUI user interface. One such program is \"SQLite\n#     Studio\" (https://sqlitestudio.pl/). The latest version of SQLite Studio\n#     also does not come with an installation program. Just a zip file that\n#     contains all the files that the program needs to run. To use this program,\n#     unzip the downloaded file and run the program that is in the file named\n#     SQLiteStudio.exe.\n#\n#     To use SQLite from within R does not require downloading any files from\n#     the SQLite website or any other website. Rather the RSQLite package in R\n#     has all of the functionality needed to use SQLite built into it. In our\n#     class we will be using the RSQLite package to interface with the SQLite\n#     database.\n#--------------------------------------------------------------------.\n\n#--------------------------------------------------------------------.\n# sqlfiddle.com\n#--------------------------------------------------------------------.\n# sqlfiddle.com - you can use this website to try different flavors of sql.\n# You can choose the flavor of SQL to use from a dropdown list, (e.g.\n# MySQL, PostgreSQL, SQLite, Oracle)\n#\n# On the left side of the sqlfiddle.com screen you create tables and \n# and insert and modify data by using CREATE TABLE, INSERT, UPDATE and DELETE\n# SQL statements.\n#\n# On the right side of the sqlfiddle.com screen you can enter \n# SELECT statements that manipulate the data.\n#\n# EXAMPLE - click on the following URL:\n#            http://sqlfiddle.com/#!17/8efb57/8\n# To see the following database tables and sample data running in the\n# sqlfiddle.com website.\n#   \n#   +---------------------+           +----------------------+\n#   |  venues             |           |  parties             |\n#   +---------------------+           +----------------------+\n#   | PK   venueId        |           | PK  partyId          |\n#   |                     |           |                      |\n#   |      venueName      |           | FK  venueId          | \n#   |                     | |        /|                      |\n#   |      city           +-+---------+     numGuests        |\n#   |                     | |        \\|                      |\n#   |      state          |           |     cuisine          |\n#   |                     |           |                      |\n#   |      kosherKitchen  |           |     customerFirstName|\n#   |                     |           |                      |\n#   |                     |           |     customerLastName |\n#   |                     |           |                      |\n#   |                     |           |     partyDate        |\n#   |                     |           |                      |\n#   +---------------------+           |     durationInHours  |  \n#                                     +----------------------+                    \n#                                               \\|/\n#                                                |\n#                                                |\n#                                                |\n#                                               ---\n#                                                |\n#   +---------------------+           +----------------------+\n#   |  waiters            |           |  parties_waiters     |\n#   +---------------------+           +----------------------+\n#   | PK   waiterId       |           | PK,FK1  partyId      |\n#   |                     |           |                      |\n#   |      firstName      |           | PK,FK2  waiterId     | \n#   |                     | |        /|                      |\n#   |      lastName       +-+---------+         hourlyWage   |\n#   |                     | |        \\|                      |\n#   |      gender         |           |                      |\n#   |                     |           |                      |\n#   +---------------------+           +----------------------+\n#\n#--------------------------------------------------------------------.\n\n#----------------------------------------------------------------------------.\n# DDL vs DML statements\n#\n# SQL statements that create or modify the structure of the database \n# tables are known collectively as Data Definition Language (DDL) SQL statements. \n# These include commands such as \n#\n#     CREATE TABLE (that creates the table structures),\n#     DROP TABLE (that destroys an entire table, including the structure), \n#     ALTER TABLE (that alters or changes the structure of tables, e.g. add columns)\n#     other similar commands \n#\n# SQL statements such as SELECT, INSERT, UPDATE and DELETE that create, modify\n# retrieve and delte \"data\" in the tables are collectively known as \n# Data Manipulation Language (DML) SQL statements.\n#\n#\n# NOTE: (not very important, but may clarify something ...)\n#\n# sqlfiddle.com instructs you to put DDL statements in the left hand side\n# of the window and SELECT statements in the right hand side. The website\n# (incorrectly, IMHO) refers to INSERT, UPDATE and DELETE statemens as DDL \n# statements. I believe most people in the industry refer to these as DML\n# statements.\n#----------------------------------------------------------------------------.\n\n\n\n\n#-----------------------------------------------------------------------.\n# More about SQLite databases.\n#\n# SQLite is designed to be used without the need for a server program.\n# All the data in a SQLite database is packed into a single file.\n# To connect to a SQLite database, you need to know the path to the \n# SQLite file for the database.\n#\n# The extension for a SQLite file is not standardized - sometimes\n# you will see .db  sometimes .sqlite  sometimes other extensions\n#-----------------------------------------------------------------------.\n\n\n#########################################################################.\n# Using DBI to connect to a database from R\n#------------------------------------------------------------------------.\n# To connect to a database from R, you can use functions from the \n# DBI package. You will also need to use an additional package that is\n# specific for the type of database software you are going to connect to. \n#\n# For example:\n#   - to connect to a sqlite database you will need to use\n#     functions from both the DBI package, as well as the RSQLite package. \n#\n#   - to connect to a PostgreSQL database you will need to use\n#     functions from both the DBI package, as well as the RPostgreSQL package. \n#\n# Fortunately, the code to write for both types of database software products\n# as well as many other database software products is VERY similar.\n#\n# Below, we will demonstrate how to connect to both a sqlite database and a\n# PostgreSQL database using the DBI package. \n#\n# NOTE: There is an alternative to the DBI approach described above.\n#       Another popular alternative to connect to a database from R is to \n#       use the RODBC package. You can research that on your own if \n#       you like. The approach we take here with the DBI package\n#       is just as powerful as ODBC - just an alternative. They are both\n#       popular approaches. \n#########################################################################.\n\n\n#------------------------------------------------------------------------.\n# How to connect to a sqlite database using the DBI package.\n#------------------------------------------------------------------------.\n# Use R's DBI package to establish a \"connection\" with a database.\n# You also need to use a package for the particular database software \n# you are going to be connecting with. For example, the RSQLite package\n# is used for the sqlite database.\n#\n# The DBI package contains a function called dbConnect. \n# The DBMS specific packages, such as RSQLite also contain a dbConnect function.\n# The DBMS specific version of the dbConnect function, calls the DBI version\n# of the dbConnect function as part of its processing.\n#\n# The RSQLite package also provides the SQLite() function. This function\n# returns a \"driver\" object that knows the specifics of how to work with\n# sqlite databases. \n#\n# The dbConnect function in the DBI package takes a \"driver\" as a first\n# argument. The other arguments to dbConnect depend on the type of\n# database software you are trying to connect to. \n#\n# See the code below for more info.\n#########################################################################.\n\n#---------------------------------------------------------------------.\n# Establish a connection to the SQLite database:\n#---------------------------------------------------------------------.\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# You will need both the DBI and RSQLite packages\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nif(!require(DBI)) {install.packages(\"DBI\"); require(DBI)}\n\nLoading required package: DBI\n\nif(!require(RSQLite)) {install.packages(\"RSQLite\"); require(RSQLite)}\n\nLoading required package: RSQLite\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, : there is no package called 'RSQLite'\n\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\nhelp(package=\"DBI\")\nhelp(package=\"RSQLite\")\n\nError in find.package(pkgName, lib.loc, verbose = verbose): there is no package called 'RSQLite'\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# Create a connection to the Books database\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# this should be a path to the .sqlite file on your computer\n\nsqliteBooksFile = \"data/books.sqlite\"   \n\n# Create the connection variable, conBooks (you can name this anything you want)\n# You will use conBooks whenever you want to access the database.\n# See below for more info.\n\nconBooks &lt;- dbConnect(RSQLite::SQLite(), dbname = sqliteBooksFile)\n\nError in (function (cond) : error in evaluating the argument 'drv' in selecting a method for function 'dbConnect': there is no package called 'RSQLite'\n\n#---------------------------------------------------------------------.\n# Show the tables in the database\n#---------------------------------------------------------------------.\n\ndbListTables(conBooks)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbListTables': object 'conBooks' not found\n\n#---------------------------------------------------------------------.\n# The following functions from the DBI package can be used to \n# run SQL statements in the database:\n#\n# FOR SELECT STATEMENTS USE\n#      dbGetQuery() or     # use to get entire results all at once\n#      dbSendQuery()       # use for retrieving large amounts of info a few rows at a time\n# \n# FOR OTHER SQL STATEMENTS USE \n#      dbExecute() or dbSendStatement() \n#---------------------------------------------------------------------.\n\n#......................................\n# Get everything all at once\n#......................................\n\ndbGetQuery(conBooks, \"select * from authors\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbGetQuery': object 'conBooks' not found\n\ndbGetQuery(conBooks, \"select * from titles \n                                  where type='biography'\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbGetQuery': object 'conBooks' not found\n\n#.................................................\n# To get large amounts of data a few rows at a time use the following functions:\n# \n#  # Call dbSendQuery to get a \"handle\"\n#\n#  RESULT_HANDLE = dbSendQuery( conn = CONNECTION ,\n#                               statement = SOME_SELECT_STATEMENT )\n#\n#  # Call dbFetch multiple times.\n#  # Each time you get back a dataframe with a few rows.\n#  # You could also call dbFetch in a loop\n#\n#  ROWS      = dbFetch( res = RESULT_HANDLE , n = NUMBER_OF_ROWS)\n#  MORE_ROWS = dbFetch( res = RESULT_HANDLE , n = NUMBER_OF_ROWS)\n#  MORE_ROWS = dbFetch( res = RESULT_HANDLE , n = NUMBER_OF_ROWS)\n#  MORE_ROWS = dbFetch( res = RESULT_HANDLE , n = NUMBER_OF_ROWS)\n#  etc. \n#\n#  # It is a very good idea to call dbClearResult when you are done processing\n#  # all the rows. That will free up any computer memory that was allocated\n#  # to processing the results. Also most DBMS products have a limited number\n#  # of queries that can be processed simultaneously. dbClearResult\n#  # will free up the resources used by this query so that there are \n#  # more resources available in the database for others who might be trying\n#  # to access the database simultaneously.\n#\n#  dbClearResult( RESULT_HANDLE )\n#.................................................\n\n# Get the rows from the titles table 5 at a time.\n# You can see a summary of where you're up to in the entire result set \n# by displaying the results variable.\n\nresults &lt;- dbSendQuery(conBooks, \"select * from titles\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbSendQuery': object 'conBooks' not found\n\ndbFetch(results, n=5)   # get first 5 rows\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\nresults                 # show a summary of where we are up to\n\nError: object 'results' not found\n\ndbFetch(results, n=5)   # get the next 5 rows\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\nresults                 # show a summary of where we are up to\n\nError: object 'results' not found\n\ndbFetch(results, n=5)   # get the next 5 rows\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\nresults                 # show a summary of where we are up to\n\nError: object 'results' not found\n\ndbClearResult(results)   # we're done so free up any \"resources\" (e.g. memory or connections to database)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbClearResult': object 'results' not found\n\n# Let's do that again ...\n# You can also use the following functions to return specific info about the \n# results, by passing the function the RESULTS_HANDLE that you got back from \n# the dbSendQuery function.\n#\n#   dbGetRowCount(RESULTS_HANDLE)  # return the # of rows returned so far\n#   dbHasCompleted(RESULTS_HANDLE) # FALSE if more rows to be retrieved, TRUE otherwise\n#\n# There are other functions that could be used with the RESULTS_HANDLE too.\n# See the documentation for more info.\n\nresults &lt;- dbSendQuery(conBooks, \"select * from titles\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbSendQuery': object 'conBooks' not found\n\ndbFetch(results, n=5)   # get first 5 rows\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbGetRowCount(results)  # 5\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbGetRowCount': object 'results' not found\n\ndbHasCompleted(results) # FALSE\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbHasCompleted': object 'results' not found\n\ndbFetch(results, n=5)   # get the next 5 rows\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbGetRowCount(results)  # 10\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbGetRowCount': object 'results' not found\n\ndbHasCompleted(results) # FALSE\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbHasCompleted': object 'results' not found\n\ndbFetch(results, n=5)   # try to get the next 5 rows (but there are only 3 more)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbGetRowCount(results)  # 13\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbGetRowCount': object 'results' not found\n\ndbHasCompleted(results) # TRUE\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbHasCompleted': object 'results' not found\n\ndbClearResult(results)   # we're done so free up any \"resources\" (e.g. memory or connections to database)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbClearResult': object 'results' not found\n\n# You can do that in a loop to get back 5 rows at a time, \n# do some processing and then continue.\n\n# Start the query and get the first few rows.\nresults &lt;- dbSendQuery(conBooks, \"select * from titles\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbSendQuery': object 'conBooks' not found\n\nrows = dbFetch(results, n=5)   # get first 5 rows\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\n# Keep looping until we get all of the rows.\nwhile ( dbHasCompleted(results) == FALSE ){\n  newRows = dbFetch(results, n=5)   # get first 5 rows\n  rows = rbind(rows, newRows)\n}\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbHasCompleted': object 'results' not found\n\n# We're done getting all the rows so clear the results handle.\n# This releases any memory or other database \"resources\" that were being used\n# to process the results.\ndbClearResult(results)   \n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbClearResult': object 'results' not found\n\n# These are all the rows\nrows \n\nError: object 'rows' not found\n\n# The default for dbFetch is to retrieve ALL of the records.\n# In the following examples all of the records are retrieved at once.\n\nresults &lt;- dbSendQuery(conBooks, \"select * from titles \n                                  where type='biography'\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbSendQuery': object 'conBooks' not found\n\nresults           # This is NOT the actual data - it is a \"handle\" that you need to use with other functions\n\nError: object 'results' not found\n\ndbFetch(results)  # get all of the data\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbFetch(results)  # can't get it again\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbClearResult(results)  # clear the computer memory/resources after you're finished\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbClearResult': object 'results' not found\n\n# You can also retrieve the rest of the rows that haven't been retrieved yet.\nresults &lt;- dbSendQuery(conBooks, \"select * from authors\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbSendQuery': object 'conBooks' not found\n\ndbFetch(results, n=2)  # get the first 2 rows \n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbFetch(results, n=-1)  # get the rest of the rows \n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbClearResult(results)  # clear the computer memory/resources after you're finished\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbClearResult': object 'results' not found\n\ndbListTables(conBooks)    # packages DBI, odbc\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbListTables': object 'conBooks' not found\n\n# create a table\ndbExecute(conBooks, 'CREATE TABLE test_table(id int, name text)') # packages DBI\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbExecute': object 'conBooks' not found\n\ndbListTables(conBooks)                                            # packages DBI, odbc\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbListTables': object 'conBooks' not found\n\n# insert a row\ndbExecute(conBooks, \"insert into test_table values (1, 'hello')\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbExecute': object 'conBooks' not found\n\n# query the data in the table\ndbGetQuery(conBooks, \"select * from test_table\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbGetQuery': object 'conBooks' not found\n\n# drop the table\ndbExecute(conBooks, 'DROP TABLE IF EXISTS test_table') \n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbExecute': object 'conBooks' not found\n\ndbListTables(conBooks)      \n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbListTables': object 'conBooks' not found\n\n#---------------------------------------------------------------------.\n# Connecting to a PostgreSQL database\n#\n# See the info here:  https://hevodata.com/learn/rpostgresql/\n#---------------------------------------------------------------------.\n# Many RDBMS (Relational Database Management System) software products\n# are designed for use with massive amounts of data. They are\n# often more complicated software products that have many options for optimizing\n# how they work. These types of RDBMS products are often run on a separate\n# computer. PostgreSQL is such a product. Connecting to it requires\n# knowledge of the following info:\n#\n#   - The name of the database. A database is a collection of tables\n#     The same PostgreSQL software can manage several different databases.\n#\n#   - The \"name\" of the computer that is running the PostgreSQL software.\n#     This could be in the form of\n#\n#         *  a \"domain name\", e.g. somedomain.com,\n#         *  an IP address, e.g. 192.168.15.1\n#         * \"domain name\", e.g. somedomain.com,\n#     \n#     Every website on the internet is running on a computer. The \n#     domain name \n#\n#\ndsn_database = \"catering\"   # Specify the name of your Database\n\n# Specify host name e.g.:\"aws-us-east-1-portal.4.dblayer.com\"\n# 127.0.0.1 is an IP address that refers to your computer\ndsn_hostname = \"127.0.0.1\"  \n\n# see: https://dba.stackexchange.com/questions/41458/changing-postgresql-port-using-command-line\n#  or: https://stackoverflow.com/questions/15100368/postgresql-port-confusion-5433-or-5432\n#\n# find the file \"postgresql.conf\" \n# on my Windows computer it is in the following folder:\n#   \\Program Files\\PostgreSQL\\15\\data\n# There should be a line in that file that says: port = SOME_NUMBER\ndsn_port = \"5432\"     # Specify your port number. e.g. 98939\n#dsn_port = \"5050\"     # Specify your port number. e.g. 98939\n#dsn_port = \"65335\"     # Specify your port number. e.g. 98939\n\n# this is the default user id\ndsn_uid = \"postgres\"         # Specify your username. e.g. \"admin\"\n#dsn_uid = \"pgadmin4\"         # Specify your username. e.g. \"admin\"\n#dsn_uid = \"pgadmin4\"         # Specify your username. e.g. \"admin\"\n\n# this is whatever you set your password to\ndsn_pwd = \"password\"        # Specify your password. e.g. \"xxx\"\n#\n# On March 30, 2023,\n# I got the following error when trying to connect R \n# to postgres 15.2 on Windows 10 Home:\n#\n#      SCRAM authentication requires libpq version 10 or above\n#\n# This webpage:\n#   https://stackoverflow.com/questions/62807717/how-can-i-solve-postgresql-scram-authentication-problem\n# says the following:\n#\n#   &gt; Your application uses an API that is linked with the PostgreSQL client C library libpq.\n#   &gt; The version of that library must be 9.6 or older, and SCRAM authentication was introduced in v10.\n#   &gt; Upgrade libpq on the application end and try again.\n#   &gt; \n#   &gt; If you don't need scram-sha-256 authentication, you can revert to md5:\n#   &gt; \n#   &gt; * set password_encryption = md5 in postgresql.conf\n#   &gt; * change the authentication method to md5 in pg_hba.conf\n#   &gt; * reload PostgreSQL\n#   &gt; * change the password of the user to get an MD5 encrypted password\n#\n# I followed the 2nd suggestion - i.e. \n#   &gt; * set password_encryption = md5 in postgresql.conf\n#   &gt; * change the authentication method to md5 in pg_hba.conf\n#   &gt; * reload PostgreSQL\n#   &gt; * change the password of the user to get an MD5 encrypted password\n#\n# -YR \n#---------------------------------------------------------------------.\n\n# You will need both the DBI and RPostgreSQL packages\n\nif(!require(DBI)) {install.packages(\"DBI\"); require(DBI)}\nif(!require(RPostgreSQL)) {install.packages(\"RPostgreSQL\"); require(RPostgreSQL)}\n\nLoading required package: RPostgreSQL\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, : there is no package called 'RPostgreSQL'\n\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\nhelp(package=\"DBI\")\nhelp(package=\"RPostgreSQL\")\n\nError in find.package(pkgName, lib.loc, verbose = verbose): there is no package called 'RPostgreSQL'\n\ndsn_database = \"catering\"   # Specify the name of your Database\n\n# Specify host name e.g.:\"aws-us-east-1-portal.4.dblayer.com\"\n# 127.0.0.1 is an IP address that refers to your computer\ndsn_hostname = \"127.0.0.1\"  \n\n# see: https://dba.stackexchange.com/questions/41458/changing-postgresql-port-using-command-line\n#  or: https://stackoverflow.com/questions/15100368/postgresql-port-confusion-5433-or-5432\n#\n# find the file \"postgresql.conf\" \n# on my Windows computer it is in the following folder:\n#   \\Program Files\\PostgreSQL\\15\\data\n# There should be a line in that file that says: port = SOME_NUMBER\ndsn_port = \"5432\"     # Specify your port number. e.g. 98939\n#dsn_port = \"5050\"     # Specify your port number. e.g. 98939\n#dsn_port = \"65335\"     # Specify your port number. e.g. 98939\n\n# this is the default user id\ndsn_uid = \"postgres\"         # Specify your username. e.g. \"admin\"\n#dsn_uid = \"pgadmin4\"         # Specify your username. e.g. \"admin\"\n#dsn_uid = \"pgadmin4\"         # Specify your username. e.g. \"admin\"\n\n# this is whatever you set your password to\ndsn_pwd = \"password\"        # Specify your password. e.g. \"xxx\"\n\n# Call dbConnect to connect to the database\ntryCatch({\n  drv &lt;- dbDriver(\"PostgreSQL\")      \n  print(\"Connecting to Database…\")\n  conCatering &lt;- dbConnect(drv, \n                      dbname = dsn_database,\n                      host = dsn_hostname, \n                      port = dsn_port,\n                      user = dsn_uid, \n                      password = dsn_pwd)\n  print(\"Database Connected!\")\n},\nerror=function(cond) {\n  print(\"Unable to connect to Database.\")\n  print(cond)\n})\n\n[1] \"Unable to connect to Database.\"\n&lt;simpleError: Couldn't find driver PostgreSQL. Looked in:\n* global namespace\n* in package called PostgreSQL\n* in package called RPostgreSQL&gt;\n\n# You can now use any of the DBI functions by passing the connection\n# object for the catering database.\n\n# Use dbGetQuery to get instant results from select statements.\ndbGetQuery(conCatering, \"select * from waiters\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbGetQuery': object 'conCatering' not found\n\n# Use dbSendQuery, dbFetch, dbClearResult to get only some rows at a time.\nresults &lt;- dbSendQuery(conCatering, \"select * from parties\") \n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbSendQuery': object 'conCatering' not found\n\ndbFetch(results, n=2)  # get first two rows\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbFetch(results)       # get the rest of the rows\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbFetch': object 'results' not found\n\ndbClearResult(results)  # clear the computer memory/resources after you're finished\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'res' in selecting a method for function 'dbClearResult': object 'results' not found\n\n# Use dbListTables to see the tables in the database\n# Use dbExecute to run other SQL commands - eg. create or drop a table\ndbListTables(conCatering)      \n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbListTables': object 'conCatering' not found\n\ndbExecute(conCatering, 'CREATE TABLE test_table(id int, name text)') # packages DBI\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbExecute': object 'conCatering' not found\n\ndbListTables(conCatering)                                            # packages DBI, odbc\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbListTables': object 'conCatering' not found\n\n# insert a row, query the row, then drop the table\ndbExecute (conCatering, \"insert into test_table values (1, 'hello')\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbExecute': object 'conCatering' not found\n\ndbGetQuery(conCatering, \"select * from test_table\")\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbGetQuery': object 'conCatering' not found\n\ndbExecute (conCatering, 'DROP TABLE IF EXISTS test_table') \n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbExecute': object 'conCatering' not found\n\ndbListTables(conCatering)      # the table is gone\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'conn' in selecting a method for function 'dbListTables': object 'conCatering' not found",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Working directly with databases in R</span>"
    ]
  },
  {
    "objectID": "0600100-introToDb-v001.html",
    "href": "0600100-introToDb-v001.html",
    "title": "29  What is a Database?",
    "section": "",
    "text": "29.1\n• Individual databases contain information about a particular topic.\n• EXAMPLE: A telephone company may have the following different databases (as well as many others). These different databases can all be controlled through one DBMS program:\n– Human Resources Database: contains information about employee name, titles, hire dates, salaries, pension and benefit information, 401K data, etc\n– Customer and billing database: information about customer names and addresses, billing information, calling patterns, etc\n– Assets database: information about real estate that the company owns and leases, cell phone towers and leased lines, etc.\n– Marketing database: information about marketing campaigns, advertising rates, locations of billboards that are being used, times/stations and rates for radio and TV ad spots, data from focus groups, etc.\n– etc.\nPeople who use databases\n• Technical IT Professionals (e.g. programmers, database administrators)\n– IT Professional such as programmers and database administrators need to understand the in-depth issues about databases. These professionals create and maintain the program that store their information in databases.\n• End Users\n– Most business people do not usually use a database directly. Rather, business people use programs geared to their specific business needs. “Behind the scenes” those programs store or retrieve data from a database in response to the user’s actions.\n– It is sometimes very helpful for business professionals to be able to access information in databases directly as an IT professional would. This requires some basic knowledge of the SQL language.\n• Business Analysts (BA)\n– When a new program needs to be created, the business analysts work with both the “end users” and the “technical IT professionals” to design the programs. The BAs don’t actually create the computer program code. Rather, the BAs work on the design of what the software should do. BAs must also understand database concepts.\n• (See architecture diagram later in this presentation …)\nFeatures of Databases\nDatabase vs. Excel\n• Medium to large sized companies typically have many different databases that are used to track the many types of data that their business depends on.\n• It is arguably more complicated to implement a database solution than an Excel spreadsheet.\n• Many students wonder what advantages a database has over an Excel file for storing data.\n• The following slides list some features of modern databases that cannot be easily accomplished with a program such as Excel\n• The combination of these reasons makes Excel a poor choice for many types of applications. The complexity and expense of implementing a database solution is more than justified for many business scenarios.\nFeatures of Modern Databases\n• Access to the data by computer programs (not just people)\n• Databases are designed for automated storage, retrieval and manipulation of the data. Computer programs can be designed to access the data, not just people. Websites, apps and desktop programs can be built that insert, retrieve and update information from the database.\n• Excel was not designed to be used in this way.\n• Simultaneous access to the data by multiple users.\n• Databases are designed so that the data can be accessed over the Internet or a local computer network by several users/programs at the same time.\n• Excel was not designed for this. Newer versions of Excel have limited capabilities for “sharing” workbooks but this feature is limited to a few users and doesn’t scale to Internet style access.\n• Able to process HUGE amounts of data.\n• Generally, the amount of data that can be stored in a database is limited only by the amount of disk space on the computer.\n• Excel is limited to about 1million rows per sheet and 16 thousand columns. This may sound like a lot of data but (a) Excel can get very slow when that much data is in a spreadsheet and (b) that is NOT enough data for truly large scale applications, such as storing data for Amazon.com or the New York Stock Exchange.\n• Efficient (i.e. fast) storage, retrieval and manipulation of the data.\n• Databases can be designed to store and retrieve vast amounts of information extremely quickly.\n• Excel works well when an individual user manipulates the data in a spreadsheet one cell at a time. However, Excel does not scale to hundreds or thousands of changes a minute.\n• Flexible querying capability –\n• Using a language such as SQL the information in a database can quickly be summarized, combined and reorganized in an unlimited number of ways.\n• Excel has limited capabilities for summarizing and reorganizing data (e.g. subtotals, pivot tables, etc). However, the flexibility offered by databases far surpass the features that are offered by Excel.\nFeatures of Modern Databases (continued)\n• Durable data.\n• Databases have features to ensure that data will remain valid and uncorrupted even in the face of catastrophic errors such as a power outage or a hard-drive-crash. For example, in the wake of a power outage, data that is stored in a bank’s databases are guaranteed to be retrievable.\n• Excel does not have guarantees which prevent corruption of the data in the wake of power outages, hard drive crashes or similar catastrophic events.\n• Validation features.\n• Databases have features for preventing “bad data” from being entered into the database (e.g. typos or illogical information such as a person’s age being recorded as 237, or as a word such as “blue”, etc). Databases can be setup with rules to describe what is considered valid data. Invalid data will not be accepted into the database.\n• Excel has some limited ability to control what can be entered into specific cells. However, many would argue that these features are difficult to use efficiently. Most Excel users don’t even know that these features exist and don’t use them.\n• Security.\n• Databases have abilities to allow some users to access specific data but not other users.\n\n“Authentication” means that before accessing the data, a user must “login” or otherwise identify who they are. If a user has already logged into the operating system (e.g. windows) then many databases can identify the user based on the information he used to log into the operating system.\n\nAuthentication is necessary to allow the DBMS to enforce security of the data. The database can be setup with rules to indicate which users can access which data. For example a database might store information about employees in a company. The names and telephone numbers might be available to every employee in the company. However, salary data might only be available to employees in the human resources department.\n• Excel has very limited capability to restrict a user from accessing specific cells, unless that user has the password for the spreadsheet. However, Excel’s security feature is dwarfed by the vast number of security features of a modern database system.\nRelational Databases\nvs Other types of Databases\nRelational Databases vs other types of databases\n• Database management systems (and databases) are categorized by the formats in which they organize information.\n• A “Relational database management system” (RDBMS) is software that is used to manage a “relational database”. These types of databases organize their information in rows and columns similar to how information is organized in an Excel document.\n– Relational databases are sometimes known as SQL databases since the creation and manipulation of data in a relational database is done using the SQL computer language. (more on this later …)\n– Relational databases are very popular and have been around since the 1970s.\n• Other categories of databases include different types of “NoSQL” databases. NoSQL databases generally do NOT store their information in rows and columns, but in other structures. Some types of NoSQL databases include\n– Document databases (e.g. “MongoDB”)\n– Graph databases (used to store “graphs” such as Facebook’s “friends graph”)\n– Key-Value databases (stores values that can be looked up with a “key value” – e.g. key=SSN, value=person’s name)\n• The remainder of this presentation will focus primarily on “Relational Databases”.\nRelational DBMS Products\nCurrent Relational DBMS Products\n• Some of the currently used RDBMS products:\n– MySql: “open source” DBMS. Can be downloaded and used for free. Powerful. Companies can purchase a technical support license from MySql, inc. Many many of the websites on the Internet use MySql to store information.\n– PostgreSQL – another “open source” DBMS, similar to MySql\n– Microsoft SQL Server – Microsoft’s “high-end” DBMS. More powerful than Access (i.e. faster, can handle more data, more users, better security features, etc).\n– Microsoft Access – Microsoft’s “low-end” DBMS. Used for smaller applications. Cheaper than SQL Server to buy/license. Includes built in features for building apps. Not really used for large applications.\n– Oracle – first commercially successful Relational DBMS. Very powerful. Popular for large DB applications in fortune 500 companies.\n– IBM Informix\n– many others …\nDatabase Client Server Architecture\nDatabase Diagram\n• See the diagram on the next slide. It will be discussed throughout this section.\n• Don’t worry if you don’t understand the diagram at first. The rest of the slides in this section will explain the details of the diagram.\n• see diagram on next slide …\nArchitecture Diagram\nDatabase Architecture Diagram\n• The diagram on the previous slide shows the organization of a typical database system.\n• Two computers in the diagram:\n– The two computers on the diagram communicate with each other.\n– The computer on the left is running an “application program”.\n– The application program in this picture is used to look up telephone numbers for specific people.\n– The telephone numbers are actually stored on the other computer. The telephone number lookup program will communicate with the computer on the right to get the telephone numbers.\n– Programs that get information from other programs are known as “client programs”.\n– The computer on the right is running a DataBase Management Server program (DBMS).\n– The DBMS maintains the database that stores the telephone numbers.\n– This computer is shown without a screen because the human user doesn’t use this computer directly.\n– Rather this computer is accessed indirectly by the telephone number lookup program.\n– A computer that runs software that is used by other programs is known as a “server computer”. The program that it runs is known as a “server program”.\n• See next slide …\nAbout the Diagram: The database\n• The actual database is shown on the diagram inside the cylinder shape, below the server computer (i.e. the computer on the right).\n• The cylinder that surrounds the data on the diagram represents the server computer’s hard drive. Even though the hard drive is usually “inside” the server computer, it is often shown on such diagrams separately.\nComplete Explanation of Architecture Diagram\n• Complete Explanation of Architecture Diagram\n– Step 1: The user runs an application program that allows him to look up people’s telephone numbers. The user types in a name to lookup and then clicks the “Lookup” button.\n– Step 2: The application needs to get the information so the application program sends a request to the DBMS program over the computer network to lookup the information in the database. (This request is actually expressed using the SQL programming language. SQL is discussed later in this presentation)\n– Step 3: The DBMS looks up the telephone number in the database.\n– Step 4: The DBMS sends the information back to the client application program.\n– Step 5: The application program displays the answer to the user (not shown in the diagram). It appears to the user that the application program “knows” the telephone number. However, really, the application program just asked for this information from the database management system.\nClient and Server programs can run on the same computer or on different computers\n• Note that it is possible to have the application program (AKA “client program”) and the DBMS program (AKA “server program”) on the same computer.\n• However for large database applications used by businesses, the DBMS is usually on a different computer than the application program is running on.\nOther Types of Database Clients\n• The following are different type of systems that interact with databases\n– mobile apps that access data – most iOS or Android apps that accesses data are actually communicating over the Internet to a server program that uses a database to store and retrieve data.\n– websites that access a lot of data – e.g. facebook, amazon, google – all of these websites use databases to store and retrieve the information that you see. For example, your list of facebook friends and the data on your facebook wall are stored in databases, all product information on amazon is stored in a database, the lists of websites on the internet and what information they store is stored in databases maintained by google. When you browse those websites the “web server” program that you communicate with in turn uses a “database server” program to store and retrieve the information that you see.\n– ATM machine– data is stored on the bank’s database. The data is accessible from any ATM machine.\n– Point of Sale – when you buy items in a supermarket and the cashier “scans” the item – the scanner and the checkout system acts as a client to the database server. The database sends product and pricing information back to the checkout system to produce the bill. The database server also updates its inventory records to reflect the fact that the items have been purchased.\n– ”EZ-Pass” – when a car passes through an “ez-pass” toll booth, the information about the car is recorded in a database which is then used to generate billing information.\n– etc.\nStructured Query Language (SQL)\n• The application program uses a special computer language, called Structured Query Language (SQL), to communicate with the DBMS program.\n• SQL is often pronounced as “sequel”\n• Users of the application program do NOT need to understand SQL. It is the computer programmers who create application programs who must understand how to write SQL.\nSQL : Inserts, Updates, Deletes, Queries, …\n• The most common types of SQL requests are:\n– Inserts: Requests from the application program to add information to the database (DB).\n– Deletes: Requests from the application program to remove information from the DB.\n– Updates: Requests from the application program to modify some information that already exists in the DB.\n– Queries: (these are also known as “selects”) Requests from the application program to retrieve specific information from the DB.\n\nThe diagram above shows the application asking the DMBS for Joe Smiths telephone number. This is a simple query that returns a single piece of information. Queries can be much more complex and return a lot of information.\n\nAn example of a more complex query might be – find the list of names and telephone numbers for those people whose last name begins with “S” and whose telephone number is in the 917 area code.\nMany Clients at the Same Time\n• The diagram above only shows a single client computer. In reality it is very common for many different client computers to run application programs at the same time.\n• For example, it is likely that there are many different people each running a separate copy of the telephone number lookup program on their own computer. In this case there would be many different telephone number client computers all communicating with the one DataBase Management System server program.\nDifferent types of client application programs.\n• The diagram above only showed one type of client application program, i.e. the telephone number lookup program. However, it is common for information contained in a single database to be used by different types of application programs simultaneously.\n• Example: A database that tracks information about planes and flights for an airline might be accessed by all of the following different types of application programs simultaneously:\n– A program used by ticketing agents to sell tickets for the flights\n– A different program used by the airplane maintenance staff to determine which planes need to be maintained based on how many miles they have flown so far\n– A third program used by the payroll department to calculate paychecks based on the number of hours and miles flown by the crew.\n– Another program may run on mobile phones to allow customers to look up flight delay information.\n– etc.",
    "crumbs": [
      "Relational databases and SQL (no dplyr knowledge needed)",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>What is a Database?</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html",
    "href": "web-000300-internetArchitecture-v001.html",
    "title": "30  How a webpage gets to your browser",
    "section": "",
    "text": "30.1 Files for this presentation\nClick here to download a zip file that contains several files we will use in this presentation:\nhtmlExamples-v001.zip",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#browsers-communicate-with-web-servers",
    "href": "web-000300-internetArchitecture-v001.html#browsers-communicate-with-web-servers",
    "title": "30  How a webpage gets to your browser",
    "section": "30.2 browsers communicate with “web servers”",
    "text": "30.2 browsers communicate with “web servers”\nEvery website is managed by a computer. When you point your browser at a URL you are really initiating a conversation between your browser and and a program on the computer that is hosting the website. The program that manages the website is known as a web-server program. The computer that the website is hosted on is known as a web-server computer. Your browser is known as a “client program”.",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#the-parts-of-a-url",
    "href": "web-000300-internetArchitecture-v001.html#the-parts-of-a-url",
    "title": "30  How a webpage gets to your browser",
    "section": "30.3 The parts of a URL",
    "text": "30.3 The parts of a URL\nA URL such as https://www.mygreatsite.com/trips/europe/eifelTower.html is comprised of several parts. The URL above is comprised of the following parts: (see this link for a more detailed discussion of the different part of a URL: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL )\n\nhttps\nThis is known as the “scheme” (or the “protocol”). This is the “language” that is used by the browser to communicate with the web server program. For webpages, you will commonly see either “http” or “https”, however other schemes are possible, such as “ftp”, “mailto” as well as others. (Note that “https” and “http” are very different from “HTML”).\n://\nUsed to separate between the scheme (or protocol) and the rest of the URL (In more complicated URLs you may see a number between : and // but that is beyond the scope of our discussion here.)\nwww.mygreatwebsite.com\nThis is called the “domain name”. It is the “name” of the computer that is hosting the website.\n/trips/europe/eifelTower.html\nWhen the browser requests a URL, the web-server program sends a file back to the browser. Classically, these files are stored on the hard drive of the server computer. This part of the URL represents the path to the file on the server computer. (NOTE: For modern websites the response from the web-server to the browser is often generated “dynamically” in “real time” instead of being stored on the server computer in files. However, these responses can and often are stored in files. In any case, this part of the URL can be thought of as a path that helps the server computer understand exactly which information needs to be sent back to the browser.)",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#diagram",
    "href": "web-000300-internetArchitecture-v001.html#diagram",
    "title": "30  How a webpage gets to your browser",
    "section": "30.4 Diagram",
    "text": "30.4 Diagram\nWe’ll disucss the following diagram in class.\n\nThe diagram shows how computers on the Internet communicate with each other. Every computer has a unique number - called an IP address. In order for one computer to engage in a conversation with another computer, the first computer must know the IP address of the 2nd computer. (In this way an IP address is similar to a telephone number.) The diagram shows how your computer that is running the browser finds out the IP address (similar to a telephone number) of the computer that manages the website.",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#ip-addresses-and-dns-servers",
    "href": "web-000300-internetArchitecture-v001.html#ip-addresses-and-dns-servers",
    "title": "30  How a webpage gets to your browser",
    "section": "30.5 IP addresses and DNS servers",
    "text": "30.5 IP addresses and DNS servers\nEach domain name, which represents a computer on the Internet, (e.g. www.mygreatwebsite.com) has a corresponding IP address. You can think of the domain name and IP address for a computer on the Internet as being analogous to a person’s name and the person’s phone number. In order for one computer on the Internet to contact another computer, the first computer must know the IP address of the computer it wants to contact.\nThe first time your browser tries to access a new website, the browser generally does NOT know the IP address for the computer running the website. Your browser must “look up” the IP address. If you don’t know a person’s phone number but you know their name you can “look up” their phone number. In the mid 1900s it was common for someone to “call an operator” to get someone’s phone number. This is similar to what happens with a browser when contacting a website for the first time. The browser needs to find out the IP address for the website. To find the IP address, the browser contacts another computer, known as a Domain Name Server (AKA, DNS server). The browser asks the DNS server to provide the IP address for the website’s domain name (e.g. www.mygreatwebsite.com). This IP address (e.g. 89.123.92.5) is then sent back to the browser. This communication between the browser and the DNS server is labeled in the diagram as steps (1) and (2). This all happens “behind the scenes” and you as a typical computer user is totally unaware that all of this is happening.\nThe browser then uses the IP address to contact the web-server for the website. This is shown in the diagram as steps (3) and (4).",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#how-does-a-computer-know-the-ip-address-of-the-dns-server",
    "href": "web-000300-internetArchitecture-v001.html#how-does-a-computer-know-the-ip-address-of-the-dns-server",
    "title": "30  How a webpage gets to your browser",
    "section": "30.6 How does a computer know the IP address of the DNS server?",
    "text": "30.6 How does a computer know the IP address of the DNS server?\nWe said that in order to communicate, a computer must know the IP address of the computer that it is trying to contact. If so, how does your computer know the IP address of the DNS server computer? The answer is simple. Your computer is configured with that information. This all happens when your computer is setup with Internet service.\nEvery Internet Service Provider has DNS servers that their users computers are configured to contact. Your computer has been configured to contact the DNS server for your Internet Service Provider. The following shows how to see your DNS server settings on Windows and Mac. Note that these instructions can become outdated with newer releases of Windows or Mac OS. If by the time you read this, these instructions are out of date, search online for something like “how do I see what DNS server I’m using on Mac” (or Windows 10, etc) https://www.lifewire.com/check-dns-settings-5215603",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#large-websites-are-run-by-many-different-computers",
    "href": "web-000300-internetArchitecture-v001.html#large-websites-are-run-by-many-different-computers",
    "title": "30  How a webpage gets to your browser",
    "section": "30.7 Large websites are run by many different computers",
    "text": "30.7 Large websites are run by many different computers\nLarge websites such as google.com and amazon.com have many different computers that respond to web requests.\nWe said that a domain name such as www.mygreatwebsite.com corresponds to a specific computer that is running a website. That’s not exactly true. Actually a specific IP address corresponds to a specific computer. When asked for the IP address of a domain name, the DNS server might respond with different IP addresses to different requests for the same domain name. In this way google, amazon and other large websites can spread the work (i.e. the load) of supporting the web requests over many different server computers. The details of how all of this is done is way beyond the scope of our discussion.\nThe main ideas you should walk away from this discussion with are:\n\na domain name represents a computer (or multiple computers) on the Internet\nan IP address represents a specific computer on the Internet\nGiven a domain name, a DNS server, responds with an IP address for that domain name.",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#the-server-sends-html-css-and-javascript-code-back-to-your-browser",
    "href": "web-000300-internetArchitecture-v001.html#the-server-sends-html-css-and-javascript-code-back-to-your-browser",
    "title": "30  How a webpage gets to your browser",
    "section": "30.8 The server sends HTML, CSS and Javascript code back to your browser",
    "text": "30.8 The server sends HTML, CSS and Javascript code back to your browser\nWhen the server receives the request for the webpage it sends back one or more files that contain the “code” for the webpage. It is this code that the browser uses to know how to display the contents of the webpage. The code for a webpage is comprised of the following three languages.\n\nHTML: this language is used to describe the text and overall structure (e.g. headings, paragraphs, lists, tables, etc) of a webpage.\nCascading Style Sheets (CSS): this language is used to describe the styling (e.g. colors, fonts, etc) of the webpage\nJavaScript: this language is used to add “dynamic” features to the webpage, (e.g. menus that pop-up when users click on them).\n\nIt is possible for all three languages to be combined into a single file or for the different languages to be located in different files that the server sends to the browser. The rest of this document describes these three different languages.",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#how-to-see-the-code-for-a-webpage",
    "href": "web-000300-internetArchitecture-v001.html#how-to-see-the-code-for-a-webpage",
    "title": "30  How a webpage gets to your browser",
    "section": "30.9 How to see the “code” for a webpage",
    "text": "30.9 How to see the “code” for a webpage\n\n30.9.1 view page source\nIf you right-click on any webpage you should see an option to “view page source” (or something similar, depending on which browser you are using). If you click on this option you will see the “source code” for the webpage.\n\n\n30.9.2 inspect\nSimilarly, if you right click on the webpage and choose “inspect” you will also see the source code for the webpage along with many tools for analyzing the underlying technologies that the browser uses to present the webpage. The details of how to use all of these tools are beyond the scope of this material. However, we will use some of these tools when we learn about how to do “web scraping”.",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#html-example",
    "href": "web-000300-internetArchitecture-v001.html#html-example",
    "title": "30  How a webpage gets to your browser",
    "section": "30.10 HTML example",
    "text": "30.10 HTML example\nWe will be working with the following files from the htmlExamples.zip file (see the link at the top of this page). Download the zip file and extract the following files and place them in the same folder.\n\nstuffToDo.html\nyellowUmbrella.png\n\nDouble click on this file stuffToDo.html to open it in a browser.\nAlso open stuffToDo.html in a text editor (e.g. RStudio - File | Open File)\nSee this link for an overview of HTML. https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\n\n30.10.1 HTML Tags you should know\n\nh1,h2,h3,h4,h5,h6 (for different level headings)\np - for a paragraph\nul,ol,li - for unordered lists, order lists and list items\nhr (also width attribute) - for horizontal “rules” (i.e. lines)\nimg (also src, width and alt attributes) - for images (i.e. pictures)\na (also href attribute) - for links to other pages\nstrong - to make text bold\nem - to make text italicized (em stands for emphasized)\nspan, div - these don’t have a noticeable effect on the page. They are mainly used in conjunction with CSS (see the next section to learn more about CSS). The span and div tags are used to apply id and class attributes to portions of the text that aren’t otherwise surrounded by other tags. The div tag is used to surround entire portions of the page. The span tag is used to surround portions of text that are inside other tags.\n\n\n\n30.10.2 HTML concepts you must know\n\nHTML element - e.g. &lt;h1&gt;My Stuff&lt;/h1&gt; - this is broken down into the following:\n\nstart tag - e.g. &lt;h1&gt;\nend tag - e.g. &lt;/h1&gt;\ncontents - e.g. My Stuff\n\nHTML empty tags - e.g. &lt;hr /&gt; or &lt;hr \"width=50%\" /&gt; or &lt;img src=\"smiley.jpg\" /&gt;\n\nthese types of tags do NOT have an end tag. They can end with a space followed by a forward slash to indicate that there is no end tag. Modern HTML allows for leaving off the space/ (e.g. &lt;hr&gt; instead of &lt;hr /&gt;, but even in modern HTML the space/ is often still included.\n\nHTML attributes\n\nAre placed inside of start tags or empty tags. An attribute contains a name and a value. The attributes affect how the HTML elements work.\nExample: in &lt;a href=\"https://google.com\"&gt;my favorite browser&lt;/a&gt;\n\nthe start tag is &lt;a href=\"https://google.com/\"&gt;\n\nhref=\"https://google.com/\" is an attribute.\n\nhref is the NAME of the attribute\n\"https://google.com/\" is the VALUE of the attribute\n\n\nthe end tag is &lt;/a&gt;",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#css-example",
    "href": "web-000300-internetArchitecture-v001.html#css-example",
    "title": "30  How a webpage gets to your browser",
    "section": "30.11 CSS example",
    "text": "30.11 CSS example\nHTML is used to layout the basic structure of a webpage.\nCSS is used to apply styles (e.g. colors, fonts, etc.) to a webpage.\nSee this link for an overview of using CSS selectors: https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/Getting_started\nThe CSS for a webpage can be placed in the same file as the HTML code or in a different file. In the overview on the developer.mozilla.org website linked above the CSS is placed in separate file from the HTML code. This is done with the use of the &lt;link&gt; tag as shown in the snippet below. The &lt;link&gt; tag, which identifies the name of the file that contains the CSS code, is placed inside the HTML\n\nelement.\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"nameOfCssFile.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    Rest of your webpage goes here\n  &lt;/body&gt;\n&lt;/html&gt;\nAnother option is to place the CSS code directly inside the HTML file. This is done by typing the CSS styling rules directly inside a &lt;style&gt; element that is placed inside the\n\nelement. For example:\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n       /*  CSS Styling rules go here */\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    Rest of your webpage goes here\n  &lt;/body&gt;\n&lt;/html&gt;\nWe will be working with the following files from the htmlExamples.zip file (see the link at the top of this page). This example uses the 2nd approach listed above (i.e. putting the CSS directly in the HTML file with the &lt;style&gt; element). Download the zip file and extract the following files and place them in the same folder.\n\nstuffToDo-withCss-v002.html\nyellowUmbrella.png\n\nDouble click on this file stuffToDo-withCss-v002.html to open it in a browser.\nAlso open stuffToDo-withCss-v002.html in a text editor (e.g. RStudio - File | Open File)\n\n30.11.1 Practice with CSS selectors\n\nUse the following website to learn about different CSS selectors and to practice using them:\nhttps://flukeout.github.io/\nSuggested answers are here:\nhttps://gist.github.com/chrisman/fcb0a88459cd98239dbe6d2d200b02d1\nAnother website for testing your knowledge of CSS selectors:\nhttps://css-speedrun.netlify.app/\nSuggested answers are here:\nhttps://github.com/Vincenius/css-speedrun\nThe following website is very useful for learning more about CSS as well as many other topics in technology: https://www.w3schools.com/w3css/defaulT.asp",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000300-internetArchitecture-v001.html#javascript-example",
    "href": "web-000300-internetArchitecture-v001.html#javascript-example",
    "title": "30  How a webpage gets to your browser",
    "section": "30.12 Javascript example",
    "text": "30.12 Javascript example\nWe will be working with the following files from the htmlExamples.zip file (see the link at the top of this page). Download the zip file and extract the following file from the zip file before continuing.\n\njavascriptExample-v002.html\n\nDouble click on javascriptExample-v002.html to open it in a browser.\nAlso open javascriptExample-v002.html in a text editor (e.g. RStudio - File | Open File)",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>How a webpage gets to your browser</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html",
    "href": "web-000400-webscrapingContinued-015.html",
    "title": "31  Web Scraping with R",
    "section": "",
    "text": "31.1 Ethics of webscraping\nSee the first section of this page for a discussion of the ethics and legal issues related to webscraping:\nhttps://r4ds.hadley.nz/webscraping",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#how-to-webscrape-with-r",
    "href": "web-000400-webscrapingContinued-015.html#how-to-webscrape-with-r",
    "title": "31  Web Scraping with R",
    "section": "31.2 How to webscrape with R",
    "text": "31.2 How to webscrape with R\n\n##################################################################.\n##################################################################.\n##\n## In this file:\n##\n## - Using the rvest package to scrape information from a\n##   basic HTML website\n##\n## - Packaging up the code to scrape a page into a function\n##\n## - Using a loop to scrape several pages of information\n##   whose URLs differ in a predictable way.\n##\n## - Fixing fragile CSS selectors\n## \n## - Intro to regular expressions (regex)\n#################################################################.\n#################################################################.\n\n#-------------------------------------------------------------------------------\n# Some online resources\n#\n# video demonstrating basics of web scraping in R\n# - https://www.youtube.com/watch?v=v8Yh_4oE-Fs&t=275s\n#\n# Tips for editing HTML in VSCode\n# - https://code.visualstudio.com/docs/languages/html\n#\n# Tips on how to use VSCode in general:\n#   https://code.visualstudio.com/docs/getstarted/tips-and-tricks\n#\n# timing R code\n# - https://www.r-bloggers.com/2017/05/5-ways-to-measure-running-time-of-r-code/\n#\n# video - using RSelenium to scrape dynamic (ie. javascript) webpage\n# - https://www.youtube.com/watch?v=CN989KER4pA\n#\n# CSS selector rules\n# - https://flukeout.github.io/ \n# - answers to the \"game\": https://gist.github.com/humbertodias/b878772e823fd9863a1e4c2415a3f7b6\n#\n# Intro to regular expressions\n# - https://ryanstutorials.net/regular-expressions-tutorial/\n#-------------------------------------------------------------------------------\n\n# Install (if necessary) and load the rvest package\n\n# The following two lines will install and load the rvest package.\n# I commented out these lines in favor of the one line below\n#\n#install.packages(\"rvest\")    # installs it on your machine (only need to do this once on your machine)\n#library(rvest)              # do this everytime your start RStudio  (also require(rvest) works)\n\n# This one line will accomplish what the two lines above do. However,\n# this one line will not install the package if it's not necessary.\nif(!require(rvest)) install.packages(\"rvest\")   # this automatically also loads the \"xml2\" package\n\nLoading required package: rvest\n\nhelp(package=\"rvest\")\nhelp(package=\"xml2\")",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#download-weather-data",
    "href": "web-000400-webscrapingContinued-015.html#download-weather-data",
    "title": "31  Web Scraping with R",
    "section": "31.3 Download weather data",
    "text": "31.3 Download weather data\nWe’ll be working with the following webpage\nhttps://forecast.weather.gov/MapClick.php?lat=37.7771&lon=-122.4196#.Xl0j6BNKhTY",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#scraping-a-piece-of-data",
    "href": "web-000400-webscrapingContinued-015.html#scraping-a-piece-of-data",
    "title": "31  Web Scraping with R",
    "section": "31.4 Scraping a piece of data",
    "text": "31.4 Scraping a piece of data\n\n###########################################################################\n#\n# Code to download high/low temperature data from the following website\n#\n###########################################################################\n\nurl = \"https://forecast.weather.gov/MapClick.php?lat=37.7771&lon=-122.4196#.Xl0j6BNKhTY\"\n\n\n# You can get a very sepecific CSS selector for a particular \n# part of a webpage by using the \"copy css selector\" feature of\n# your browser. Every browser has a slightly different way of doing this\n# but they are all similar. In Chrome do the following:\n#\n# (1) right click on the portion of the page you want to scrape\n#     and choose \"inspect\"\n# (2) right click on the portion of the HTML that contains what\n#     you want and choose \"Copy\" and then \"Copy Selector\"\n# \n# This gives you a very, very specific selector to get this info.\n# \n# For exmaple, we followed this process for the first high temperature \n# for this webpage and got the following selector. \n#\n# CSS SELECTOR: (note the leading # on the line below is part of the selector)\n#    #seven-day-forecast-list &gt; li:nth-child(1) &gt; div &gt; p.temp.temp-high\n#\n# WARNING - this is a VERY specific selector! You will often need\n# to modify this selector so that it is LESS specific and gets \n# more than just the one piece of info you clicked on.\n\nweatherPage = read_html(url)\n\ncssSelector = \"#seven-day-forecast-list &gt; li:nth-child(1) &gt; div &gt; p.temp.temp-high\"\n\ntemperature = weatherPage %&gt;%\n  html_elements( cssSelector ) %&gt;%\n  html_text2()\n\ntemperature\n\n[1] \"High: 62 °F\"\n\nx = read_html(url)\nx\n\n{html_document}\n&lt;html class=\"no-js\"&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body&gt;\\n        &lt;main class=\"container\"&gt;&lt;header class=\"row clearfix\" id=\" ...\n\ny = html_elements(x, cssSelector )\ny\n\n{xml_nodeset (1)}\n[1] &lt;p class=\"temp temp-high\"&gt;High: 62 °F&lt;/p&gt;\\n\n\nz = html_text(y)\nz\n\n[1] \"High: 62 °F\"\n\n# What is the structure of x?\nstr(x)\n\nList of 2\n $ node:&lt;externalptr&gt; \n $ doc :&lt;externalptr&gt; \n - attr(*, \"class\")= chr [1:2] \"xml_document\" \"xml_node\"",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#choosing-better-css-selectors",
    "href": "web-000400-webscrapingContinued-015.html#choosing-better-css-selectors",
    "title": "31  Web Scraping with R",
    "section": "31.5 Choosing better CSS Selectors",
    "text": "31.5 Choosing better CSS Selectors\n\n####################################################################.\n# If we analyze the HTML code, a MUCH BETTER selector is .temp\n# This selects all html elements that have class=\"temp\"\n####################################################################.\n\n#------------------------------------------------------------------.\n# NOTE: \n#\n# When webscraping you should \"play nicely\" with the website.\n# We already read the page above using the following line of code:\n#\n#    weatherPage = read_html(url)\n#\n# Don't do this again. Every time you read the page you are causing\n# the website to do some work to generate the page. You also use\n# network \"bandwidth\". \n#------------------------------------------------------------------.\n\n# Don't do this again - we already did it. Read comment above for more info.\n#\n# weatherPage = read_html(url)\n\ncssSelector = \".temp\"\n\nforecasts &lt;- weatherPage %&gt;%\n  html_elements( cssSelector ) %&gt;%\n  html_text()\n\nforecasts\n\n[1] \"High: 62 °F\" \"Low: 43 °F\"  \"High: 60 °F\" \"Low: 42 °F\"  \"High: 62 °F\"\n[6] \"Low: 45 °F\"  \"High: 64 °F\" \"Low: 46 °F\"  \"High: 61 °F\"\n\nx = read_html(url)\nx\n\n{html_document}\n&lt;html class=\"no-js\"&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body&gt;\\n        &lt;main class=\"container\"&gt;&lt;header class=\"row clearfix\" id=\" ...\n\ny = html_elements(x, cssSelector )\ny\n\n{xml_nodeset (9)}\n[1] &lt;p class=\"temp temp-high\"&gt;High: 62 °F&lt;/p&gt;\\n\n[2] &lt;p class=\"temp temp-low\"&gt;Low: 43 °F&lt;/p&gt;\\n\n[3] &lt;p class=\"temp temp-high\"&gt;High: 60 °F&lt;/p&gt;\\n\n[4] &lt;p class=\"temp temp-low\"&gt;Low: 42 °F&lt;/p&gt;\\n\n[5] &lt;p class=\"temp temp-high\"&gt;High: 62 °F&lt;/p&gt;\\n\n[6] &lt;p class=\"temp temp-low\"&gt;Low: 45 °F&lt;/p&gt;\\n\n[7] &lt;p class=\"temp temp-high\"&gt;High: 64 °F&lt;/p&gt;\\n\n[8] &lt;p class=\"temp temp-low\"&gt;Low: 46 °F&lt;/p&gt;\\n\n[9] &lt;p class=\"temp temp-high\"&gt;High: 61 °F&lt;/p&gt;\\n\n\nz = html_text(y)\nz\n\n[1] \"High: 62 °F\" \"Low: 43 °F\"  \"High: 60 °F\" \"Low: 42 °F\"  \"High: 62 °F\"\n[6] \"Low: 45 °F\"  \"High: 64 °F\" \"Low: 46 °F\"  \"High: 61 °F\"\n\n# What is the structure of x?\nstr(x)\n\nList of 2\n $ node:&lt;externalptr&gt; \n $ doc :&lt;externalptr&gt; \n - attr(*, \"class\")= chr [1:2] \"xml_document\" \"xml_node\"",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#scraping-country-names",
    "href": "web-000400-webscrapingContinued-015.html#scraping-country-names",
    "title": "31  Web Scraping with R",
    "section": "31.6 Scraping country names",
    "text": "31.6 Scraping country names\n\n###########################################################################\n#\n# Get the country names off the following website\n#\n###########################################################################\n\nurl = \"https://scrapethissite.com/pages/simple/\"\ncssSelector = \".country-name\"\n\ncountries &lt;- read_html(url) %&gt;%\n  html_elements( cssSelector ) %&gt;%\n  html_text()\n\nx = read_html(url)\nx\n\n{html_document}\n&lt;html lang=\"en\"&gt;\n [1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF- ...\n [2] &lt;body&gt;\\n    &lt;nav id=\"site-nav\"&gt;&lt;div class=\"container\"&gt;\\n                 ...\n [3] &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery. ...\n [4] &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstra ...\n [5] &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/pnotify/2.1.0/pnotif ...\n [6] &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/pnotify/2.1.0/pnotify ...\n [7] &lt;script type=\"text/javascript\"&gt;\\n    \\n    PNotify.prototype.options.sty ...\n [8] &lt;script type=\"text/javascript\"&gt;\\n    $(\"video\").hover(function() {\\n     ...\n [9] &lt;script&gt;\\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r] ...\n[10] &lt;script&gt;\\n  !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){ ...\n[11] &lt;noscript&gt;&lt;img height=\"1\" width=\"1\" style=\"display:none\" src=\"https://ww ...\n[12] &lt;script type=\"text/javascript\"&gt;\\n    /* &lt;![CDATA[ */\\n    var google_con ...\n[13] &lt;script type=\"text/javascript\" src=\"//www.googleadservices.com/pagead/co ...\n[14] &lt;noscript&gt;\\n    &lt;div style=\"display:inline;\"&gt;\\n    &lt;img height=\"1\" width ...\n[15] &lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=AW-950945 ...\n[16] &lt;script&gt;\\n   window.dataLayer = window.dataLayer || [];\\n   function gta ...\n\ny = html_elements(x, cssSelector)\ny\n\n{xml_nodeset (250)}\n [1] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [2] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [3] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [4] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [5] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [6] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [7] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [8] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [9] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[10] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[11] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[12] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[13] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[14] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[15] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[16] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[17] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[18] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[19] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[20] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n...\n\nz = html_text(y)\nz\n\n  [1] \"\\n                            \\n                            Andorra\\n                        \"                                     \n  [2] \"\\n                            \\n                            United Arab Emirates\\n                        \"                        \n  [3] \"\\n                            \\n                            Afghanistan\\n                        \"                                 \n  [4] \"\\n                            \\n                            Antigua and Barbuda\\n                        \"                         \n  [5] \"\\n                            \\n                            Anguilla\\n                        \"                                    \n  [6] \"\\n                            \\n                            Albania\\n                        \"                                     \n  [7] \"\\n                            \\n                            Armenia\\n                        \"                                     \n  [8] \"\\n                            \\n                            Angola\\n                        \"                                      \n  [9] \"\\n                            \\n                            Antarctica\\n                        \"                                  \n [10] \"\\n                            \\n                            Argentina\\n                        \"                                   \n [11] \"\\n                            \\n                            American Samoa\\n                        \"                              \n [12] \"\\n                            \\n                            Austria\\n                        \"                                     \n [13] \"\\n                            \\n                            Australia\\n                        \"                                   \n [14] \"\\n                            \\n                            Aruba\\n                        \"                                       \n [15] \"\\n                            \\n                            Åland\\n                        \"                                       \n [16] \"\\n                            \\n                            Azerbaijan\\n                        \"                                  \n [17] \"\\n                            \\n                            Bosnia and Herzegovina\\n                        \"                      \n [18] \"\\n                            \\n                            Barbados\\n                        \"                                    \n [19] \"\\n                            \\n                            Bangladesh\\n                        \"                                  \n [20] \"\\n                            \\n                            Belgium\\n                        \"                                     \n [21] \"\\n                            \\n                            Burkina Faso\\n                        \"                                \n [22] \"\\n                            \\n                            Bulgaria\\n                        \"                                    \n [23] \"\\n                            \\n                            Bahrain\\n                        \"                                     \n [24] \"\\n                            \\n                            Burundi\\n                        \"                                     \n [25] \"\\n                            \\n                            Benin\\n                        \"                                       \n [26] \"\\n                            \\n                            Saint Barthélemy\\n                        \"                            \n [27] \"\\n                            \\n                            Bermuda\\n                        \"                                     \n [28] \"\\n                            \\n                            Brunei\\n                        \"                                      \n [29] \"\\n                            \\n                            Bolivia\\n                        \"                                     \n [30] \"\\n                            \\n                            Bonaire\\n                        \"                                     \n [31] \"\\n                            \\n                            Brazil\\n                        \"                                      \n [32] \"\\n                            \\n                            Bahamas\\n                        \"                                     \n [33] \"\\n                            \\n                            Bhutan\\n                        \"                                      \n [34] \"\\n                            \\n                            Bouvet Island\\n                        \"                               \n [35] \"\\n                            \\n                            Botswana\\n                        \"                                    \n [36] \"\\n                            \\n                            Belarus\\n                        \"                                     \n [37] \"\\n                            \\n                            Belize\\n                        \"                                      \n [38] \"\\n                            \\n                            Canada\\n                        \"                                      \n [39] \"\\n                            \\n                            Cocos [Keeling] Islands\\n                        \"                     \n [40] \"\\n                            \\n                            Democratic Republic of the Congo\\n                        \"            \n [41] \"\\n                            \\n                            Central African Republic\\n                        \"                    \n [42] \"\\n                            \\n                            Republic of the Congo\\n                        \"                       \n [43] \"\\n                            \\n                            Switzerland\\n                        \"                                 \n [44] \"\\n                            \\n                            Ivory Coast\\n                        \"                                 \n [45] \"\\n                            \\n                            Cook Islands\\n                        \"                                \n [46] \"\\n                            \\n                            Chile\\n                        \"                                       \n [47] \"\\n                            \\n                            Cameroon\\n                        \"                                    \n [48] \"\\n                            \\n                            China\\n                        \"                                       \n [49] \"\\n                            \\n                            Colombia\\n                        \"                                    \n [50] \"\\n                            \\n                            Costa Rica\\n                        \"                                  \n [51] \"\\n                            \\n                            Cuba\\n                        \"                                        \n [52] \"\\n                            \\n                            Cape Verde\\n                        \"                                  \n [53] \"\\n                            \\n                            Curacao\\n                        \"                                     \n [54] \"\\n                            \\n                            Christmas Island\\n                        \"                            \n [55] \"\\n                            \\n                            Cyprus\\n                        \"                                      \n [56] \"\\n                            \\n                            Czech Republic\\n                        \"                              \n [57] \"\\n                            \\n                            Germany\\n                        \"                                     \n [58] \"\\n                            \\n                            Djibouti\\n                        \"                                    \n [59] \"\\n                            \\n                            Denmark\\n                        \"                                     \n [60] \"\\n                            \\n                            Dominica\\n                        \"                                    \n [61] \"\\n                            \\n                            Dominican Republic\\n                        \"                          \n [62] \"\\n                            \\n                            Algeria\\n                        \"                                     \n [63] \"\\n                            \\n                            Ecuador\\n                        \"                                     \n [64] \"\\n                            \\n                            Estonia\\n                        \"                                     \n [65] \"\\n                            \\n                            Egypt\\n                        \"                                       \n [66] \"\\n                            \\n                            Western Sahara\\n                        \"                              \n [67] \"\\n                            \\n                            Eritrea\\n                        \"                                     \n [68] \"\\n                            \\n                            Spain\\n                        \"                                       \n [69] \"\\n                            \\n                            Ethiopia\\n                        \"                                    \n [70] \"\\n                            \\n                            Finland\\n                        \"                                     \n [71] \"\\n                            \\n                            Fiji\\n                        \"                                        \n [72] \"\\n                            \\n                            Falkland Islands\\n                        \"                            \n [73] \"\\n                            \\n                            Micronesia\\n                        \"                                  \n [74] \"\\n                            \\n                            Faroe Islands\\n                        \"                               \n [75] \"\\n                            \\n                            France\\n                        \"                                      \n [76] \"\\n                            \\n                            Gabon\\n                        \"                                       \n [77] \"\\n                            \\n                            United Kingdom\\n                        \"                              \n [78] \"\\n                            \\n                            Grenada\\n                        \"                                     \n [79] \"\\n                            \\n                            Georgia\\n                        \"                                     \n [80] \"\\n                            \\n                            French Guiana\\n                        \"                               \n [81] \"\\n                            \\n                            Guernsey\\n                        \"                                    \n [82] \"\\n                            \\n                            Ghana\\n                        \"                                       \n [83] \"\\n                            \\n                            Gibraltar\\n                        \"                                   \n [84] \"\\n                            \\n                            Greenland\\n                        \"                                   \n [85] \"\\n                            \\n                            Gambia\\n                        \"                                      \n [86] \"\\n                            \\n                            Guinea\\n                        \"                                      \n [87] \"\\n                            \\n                            Guadeloupe\\n                        \"                                  \n [88] \"\\n                            \\n                            Equatorial Guinea\\n                        \"                           \n [89] \"\\n                            \\n                            Greece\\n                        \"                                      \n [90] \"\\n                            \\n                            South Georgia and the South Sandwich Islands\\n                        \"\n [91] \"\\n                            \\n                            Guatemala\\n                        \"                                   \n [92] \"\\n                            \\n                            Guam\\n                        \"                                        \n [93] \"\\n                            \\n                            Guinea-Bissau\\n                        \"                               \n [94] \"\\n                            \\n                            Guyana\\n                        \"                                      \n [95] \"\\n                            \\n                            Hong Kong\\n                        \"                                   \n [96] \"\\n                            \\n                            Heard Island and McDonald Islands\\n                        \"           \n [97] \"\\n                            \\n                            Honduras\\n                        \"                                    \n [98] \"\\n                            \\n                            Croatia\\n                        \"                                     \n [99] \"\\n                            \\n                            Haiti\\n                        \"                                       \n[100] \"\\n                            \\n                            Hungary\\n                        \"                                     \n[101] \"\\n                            \\n                            Indonesia\\n                        \"                                   \n[102] \"\\n                            \\n                            Ireland\\n                        \"                                     \n[103] \"\\n                            \\n                            Israel\\n                        \"                                      \n[104] \"\\n                            \\n                            Isle of Man\\n                        \"                                 \n[105] \"\\n                            \\n                            India\\n                        \"                                       \n[106] \"\\n                            \\n                            British Indian Ocean Territory\\n                        \"              \n[107] \"\\n                            \\n                            Iraq\\n                        \"                                        \n[108] \"\\n                            \\n                            Iran\\n                        \"                                        \n[109] \"\\n                            \\n                            Iceland\\n                        \"                                     \n[110] \"\\n                            \\n                            Italy\\n                        \"                                       \n[111] \"\\n                            \\n                            Jersey\\n                        \"                                      \n[112] \"\\n                            \\n                            Jamaica\\n                        \"                                     \n[113] \"\\n                            \\n                            Jordan\\n                        \"                                      \n[114] \"\\n                            \\n                            Japan\\n                        \"                                       \n[115] \"\\n                            \\n                            Kenya\\n                        \"                                       \n[116] \"\\n                            \\n                            Kyrgyzstan\\n                        \"                                  \n[117] \"\\n                            \\n                            Cambodia\\n                        \"                                    \n[118] \"\\n                            \\n                            Kiribati\\n                        \"                                    \n[119] \"\\n                            \\n                            Comoros\\n                        \"                                     \n[120] \"\\n                            \\n                            Saint Kitts and Nevis\\n                        \"                       \n[121] \"\\n                            \\n                            North Korea\\n                        \"                                 \n[122] \"\\n                            \\n                            South Korea\\n                        \"                                 \n[123] \"\\n                            \\n                            Kuwait\\n                        \"                                      \n[124] \"\\n                            \\n                            Cayman Islands\\n                        \"                              \n[125] \"\\n                            \\n                            Kazakhstan\\n                        \"                                  \n[126] \"\\n                            \\n                            Laos\\n                        \"                                        \n[127] \"\\n                            \\n                            Lebanon\\n                        \"                                     \n[128] \"\\n                            \\n                            Saint Lucia\\n                        \"                                 \n[129] \"\\n                            \\n                            Liechtenstein\\n                        \"                               \n[130] \"\\n                            \\n                            Sri Lanka\\n                        \"                                   \n[131] \"\\n                            \\n                            Liberia\\n                        \"                                     \n[132] \"\\n                            \\n                            Lesotho\\n                        \"                                     \n[133] \"\\n                            \\n                            Lithuania\\n                        \"                                   \n[134] \"\\n                            \\n                            Luxembourg\\n                        \"                                  \n[135] \"\\n                            \\n                            Latvia\\n                        \"                                      \n[136] \"\\n                            \\n                            Libya\\n                        \"                                       \n[137] \"\\n                            \\n                            Morocco\\n                        \"                                     \n[138] \"\\n                            \\n                            Monaco\\n                        \"                                      \n[139] \"\\n                            \\n                            Moldova\\n                        \"                                     \n[140] \"\\n                            \\n                            Montenegro\\n                        \"                                  \n[141] \"\\n                            \\n                            Saint Martin\\n                        \"                                \n[142] \"\\n                            \\n                            Madagascar\\n                        \"                                  \n[143] \"\\n                            \\n                            Marshall Islands\\n                        \"                            \n[144] \"\\n                            \\n                            Macedonia\\n                        \"                                   \n[145] \"\\n                            \\n                            Mali\\n                        \"                                        \n[146] \"\\n                            \\n                            Myanmar [Burma]\\n                        \"                             \n[147] \"\\n                            \\n                            Mongolia\\n                        \"                                    \n[148] \"\\n                            \\n                            Macao\\n                        \"                                       \n[149] \"\\n                            \\n                            Northern Mariana Islands\\n                        \"                    \n[150] \"\\n                            \\n                            Martinique\\n                        \"                                  \n[151] \"\\n                            \\n                            Mauritania\\n                        \"                                  \n[152] \"\\n                            \\n                            Montserrat\\n                        \"                                  \n[153] \"\\n                            \\n                            Malta\\n                        \"                                       \n[154] \"\\n                            \\n                            Mauritius\\n                        \"                                   \n[155] \"\\n                            \\n                            Maldives\\n                        \"                                    \n[156] \"\\n                            \\n                            Malawi\\n                        \"                                      \n[157] \"\\n                            \\n                            Mexico\\n                        \"                                      \n[158] \"\\n                            \\n                            Malaysia\\n                        \"                                    \n[159] \"\\n                            \\n                            Mozambique\\n                        \"                                  \n[160] \"\\n                            \\n                            Namibia\\n                        \"                                     \n[161] \"\\n                            \\n                            New Caledonia\\n                        \"                               \n[162] \"\\n                            \\n                            Niger\\n                        \"                                       \n[163] \"\\n                            \\n                            Norfolk Island\\n                        \"                              \n[164] \"\\n                            \\n                            Nigeria\\n                        \"                                     \n[165] \"\\n                            \\n                            Nicaragua\\n                        \"                                   \n[166] \"\\n                            \\n                            Netherlands\\n                        \"                                 \n[167] \"\\n                            \\n                            Norway\\n                        \"                                      \n[168] \"\\n                            \\n                            Nepal\\n                        \"                                       \n[169] \"\\n                            \\n                            Nauru\\n                        \"                                       \n[170] \"\\n                            \\n                            Niue\\n                        \"                                        \n[171] \"\\n                            \\n                            New Zealand\\n                        \"                                 \n[172] \"\\n                            \\n                            Oman\\n                        \"                                        \n[173] \"\\n                            \\n                            Panama\\n                        \"                                      \n[174] \"\\n                            \\n                            Peru\\n                        \"                                        \n[175] \"\\n                            \\n                            French Polynesia\\n                        \"                            \n[176] \"\\n                            \\n                            Papua New Guinea\\n                        \"                            \n[177] \"\\n                            \\n                            Philippines\\n                        \"                                 \n[178] \"\\n                            \\n                            Pakistan\\n                        \"                                    \n[179] \"\\n                            \\n                            Poland\\n                        \"                                      \n[180] \"\\n                            \\n                            Saint Pierre and Miquelon\\n                        \"                   \n[181] \"\\n                            \\n                            Pitcairn Islands\\n                        \"                            \n[182] \"\\n                            \\n                            Puerto Rico\\n                        \"                                 \n[183] \"\\n                            \\n                            Palestine\\n                        \"                                   \n[184] \"\\n                            \\n                            Portugal\\n                        \"                                    \n[185] \"\\n                            \\n                            Palau\\n                        \"                                       \n[186] \"\\n                            \\n                            Paraguay\\n                        \"                                    \n[187] \"\\n                            \\n                            Qatar\\n                        \"                                       \n[188] \"\\n                            \\n                            Réunion\\n                        \"                                     \n[189] \"\\n                            \\n                            Romania\\n                        \"                                     \n[190] \"\\n                            \\n                            Serbia\\n                        \"                                      \n[191] \"\\n                            \\n                            Russia\\n                        \"                                      \n[192] \"\\n                            \\n                            Rwanda\\n                        \"                                      \n[193] \"\\n                            \\n                            Saudi Arabia\\n                        \"                                \n[194] \"\\n                            \\n                            Solomon Islands\\n                        \"                             \n[195] \"\\n                            \\n                            Seychelles\\n                        \"                                  \n[196] \"\\n                            \\n                            Sudan\\n                        \"                                       \n[197] \"\\n                            \\n                            Sweden\\n                        \"                                      \n[198] \"\\n                            \\n                            Singapore\\n                        \"                                   \n[199] \"\\n                            \\n                            Saint Helena\\n                        \"                                \n[200] \"\\n                            \\n                            Slovenia\\n                        \"                                    \n[201] \"\\n                            \\n                            Svalbard and Jan Mayen\\n                        \"                      \n[202] \"\\n                            \\n                            Slovakia\\n                        \"                                    \n[203] \"\\n                            \\n                            Sierra Leone\\n                        \"                                \n[204] \"\\n                            \\n                            San Marino\\n                        \"                                  \n[205] \"\\n                            \\n                            Senegal\\n                        \"                                     \n[206] \"\\n                            \\n                            Somalia\\n                        \"                                     \n[207] \"\\n                            \\n                            Suriname\\n                        \"                                    \n[208] \"\\n                            \\n                            South Sudan\\n                        \"                                 \n[209] \"\\n                            \\n                            São Tomé and Príncipe\\n                        \"                       \n[210] \"\\n                            \\n                            El Salvador\\n                        \"                                 \n[211] \"\\n                            \\n                            Sint Maarten\\n                        \"                                \n[212] \"\\n                            \\n                            Syria\\n                        \"                                       \n[213] \"\\n                            \\n                            Swaziland\\n                        \"                                   \n[214] \"\\n                            \\n                            Turks and Caicos Islands\\n                        \"                    \n[215] \"\\n                            \\n                            Chad\\n                        \"                                        \n[216] \"\\n                            \\n                            French Southern Territories\\n                        \"                 \n[217] \"\\n                            \\n                            Togo\\n                        \"                                        \n[218] \"\\n                            \\n                            Thailand\\n                        \"                                    \n[219] \"\\n                            \\n                            Tajikistan\\n                        \"                                  \n[220] \"\\n                            \\n                            Tokelau\\n                        \"                                     \n[221] \"\\n                            \\n                            East Timor\\n                        \"                                  \n[222] \"\\n                            \\n                            Turkmenistan\\n                        \"                                \n[223] \"\\n                            \\n                            Tunisia\\n                        \"                                     \n[224] \"\\n                            \\n                            Tonga\\n                        \"                                       \n[225] \"\\n                            \\n                            Turkey\\n                        \"                                      \n[226] \"\\n                            \\n                            Trinidad and Tobago\\n                        \"                         \n[227] \"\\n                            \\n                            Tuvalu\\n                        \"                                      \n[228] \"\\n                            \\n                            Taiwan\\n                        \"                                      \n[229] \"\\n                            \\n                            Tanzania\\n                        \"                                    \n[230] \"\\n                            \\n                            Ukraine\\n                        \"                                     \n[231] \"\\n                            \\n                            Uganda\\n                        \"                                      \n[232] \"\\n                            \\n                            U.S. Minor Outlying Islands\\n                        \"                 \n[233] \"\\n                            \\n                            United States\\n                        \"                               \n[234] \"\\n                            \\n                            Uruguay\\n                        \"                                     \n[235] \"\\n                            \\n                            Uzbekistan\\n                        \"                                  \n[236] \"\\n                            \\n                            Vatican City\\n                        \"                                \n[237] \"\\n                            \\n                            Saint Vincent and the Grenadines\\n                        \"            \n[238] \"\\n                            \\n                            Venezuela\\n                        \"                                   \n[239] \"\\n                            \\n                            British Virgin Islands\\n                        \"                      \n[240] \"\\n                            \\n                            U.S. Virgin Islands\\n                        \"                         \n[241] \"\\n                            \\n                            Vietnam\\n                        \"                                     \n[242] \"\\n                            \\n                            Vanuatu\\n                        \"                                     \n[243] \"\\n                            \\n                            Wallis and Futuna\\n                        \"                           \n[244] \"\\n                            \\n                            Samoa\\n                        \"                                       \n[245] \"\\n                            \\n                            Kosovo\\n                        \"                                      \n[246] \"\\n                            \\n                            Yemen\\n                        \"                                       \n[247] \"\\n                            \\n                            Mayotte\\n                        \"                                     \n[248] \"\\n                            \\n                            South Africa\\n                        \"                                \n[249] \"\\n                            \\n                            Zambia\\n                        \"                                      \n[250] \"\\n                            \\n                            Zimbabwe\\n                        \"                                    \n\n#..............................................................................\n# Let's examine the results.\n# \n# Notice that the results includes the newlines (\\n) and blanks from the .html\n# file. This is because we picked up EVERYTHING that appears between the\n# start tag and end tag in the HTML.\n#\n# Below, we will see how to fix up the results below by using the gsub function.\n#..............................................................................\n\ncountries  \n\n  [1] \"\\n                            \\n                            Andorra\\n                        \"                                     \n  [2] \"\\n                            \\n                            United Arab Emirates\\n                        \"                        \n  [3] \"\\n                            \\n                            Afghanistan\\n                        \"                                 \n  [4] \"\\n                            \\n                            Antigua and Barbuda\\n                        \"                         \n  [5] \"\\n                            \\n                            Anguilla\\n                        \"                                    \n  [6] \"\\n                            \\n                            Albania\\n                        \"                                     \n  [7] \"\\n                            \\n                            Armenia\\n                        \"                                     \n  [8] \"\\n                            \\n                            Angola\\n                        \"                                      \n  [9] \"\\n                            \\n                            Antarctica\\n                        \"                                  \n [10] \"\\n                            \\n                            Argentina\\n                        \"                                   \n [11] \"\\n                            \\n                            American Samoa\\n                        \"                              \n [12] \"\\n                            \\n                            Austria\\n                        \"                                     \n [13] \"\\n                            \\n                            Australia\\n                        \"                                   \n [14] \"\\n                            \\n                            Aruba\\n                        \"                                       \n [15] \"\\n                            \\n                            Åland\\n                        \"                                       \n [16] \"\\n                            \\n                            Azerbaijan\\n                        \"                                  \n [17] \"\\n                            \\n                            Bosnia and Herzegovina\\n                        \"                      \n [18] \"\\n                            \\n                            Barbados\\n                        \"                                    \n [19] \"\\n                            \\n                            Bangladesh\\n                        \"                                  \n [20] \"\\n                            \\n                            Belgium\\n                        \"                                     \n [21] \"\\n                            \\n                            Burkina Faso\\n                        \"                                \n [22] \"\\n                            \\n                            Bulgaria\\n                        \"                                    \n [23] \"\\n                            \\n                            Bahrain\\n                        \"                                     \n [24] \"\\n                            \\n                            Burundi\\n                        \"                                     \n [25] \"\\n                            \\n                            Benin\\n                        \"                                       \n [26] \"\\n                            \\n                            Saint Barthélemy\\n                        \"                            \n [27] \"\\n                            \\n                            Bermuda\\n                        \"                                     \n [28] \"\\n                            \\n                            Brunei\\n                        \"                                      \n [29] \"\\n                            \\n                            Bolivia\\n                        \"                                     \n [30] \"\\n                            \\n                            Bonaire\\n                        \"                                     \n [31] \"\\n                            \\n                            Brazil\\n                        \"                                      \n [32] \"\\n                            \\n                            Bahamas\\n                        \"                                     \n [33] \"\\n                            \\n                            Bhutan\\n                        \"                                      \n [34] \"\\n                            \\n                            Bouvet Island\\n                        \"                               \n [35] \"\\n                            \\n                            Botswana\\n                        \"                                    \n [36] \"\\n                            \\n                            Belarus\\n                        \"                                     \n [37] \"\\n                            \\n                            Belize\\n                        \"                                      \n [38] \"\\n                            \\n                            Canada\\n                        \"                                      \n [39] \"\\n                            \\n                            Cocos [Keeling] Islands\\n                        \"                     \n [40] \"\\n                            \\n                            Democratic Republic of the Congo\\n                        \"            \n [41] \"\\n                            \\n                            Central African Republic\\n                        \"                    \n [42] \"\\n                            \\n                            Republic of the Congo\\n                        \"                       \n [43] \"\\n                            \\n                            Switzerland\\n                        \"                                 \n [44] \"\\n                            \\n                            Ivory Coast\\n                        \"                                 \n [45] \"\\n                            \\n                            Cook Islands\\n                        \"                                \n [46] \"\\n                            \\n                            Chile\\n                        \"                                       \n [47] \"\\n                            \\n                            Cameroon\\n                        \"                                    \n [48] \"\\n                            \\n                            China\\n                        \"                                       \n [49] \"\\n                            \\n                            Colombia\\n                        \"                                    \n [50] \"\\n                            \\n                            Costa Rica\\n                        \"                                  \n [51] \"\\n                            \\n                            Cuba\\n                        \"                                        \n [52] \"\\n                            \\n                            Cape Verde\\n                        \"                                  \n [53] \"\\n                            \\n                            Curacao\\n                        \"                                     \n [54] \"\\n                            \\n                            Christmas Island\\n                        \"                            \n [55] \"\\n                            \\n                            Cyprus\\n                        \"                                      \n [56] \"\\n                            \\n                            Czech Republic\\n                        \"                              \n [57] \"\\n                            \\n                            Germany\\n                        \"                                     \n [58] \"\\n                            \\n                            Djibouti\\n                        \"                                    \n [59] \"\\n                            \\n                            Denmark\\n                        \"                                     \n [60] \"\\n                            \\n                            Dominica\\n                        \"                                    \n [61] \"\\n                            \\n                            Dominican Republic\\n                        \"                          \n [62] \"\\n                            \\n                            Algeria\\n                        \"                                     \n [63] \"\\n                            \\n                            Ecuador\\n                        \"                                     \n [64] \"\\n                            \\n                            Estonia\\n                        \"                                     \n [65] \"\\n                            \\n                            Egypt\\n                        \"                                       \n [66] \"\\n                            \\n                            Western Sahara\\n                        \"                              \n [67] \"\\n                            \\n                            Eritrea\\n                        \"                                     \n [68] \"\\n                            \\n                            Spain\\n                        \"                                       \n [69] \"\\n                            \\n                            Ethiopia\\n                        \"                                    \n [70] \"\\n                            \\n                            Finland\\n                        \"                                     \n [71] \"\\n                            \\n                            Fiji\\n                        \"                                        \n [72] \"\\n                            \\n                            Falkland Islands\\n                        \"                            \n [73] \"\\n                            \\n                            Micronesia\\n                        \"                                  \n [74] \"\\n                            \\n                            Faroe Islands\\n                        \"                               \n [75] \"\\n                            \\n                            France\\n                        \"                                      \n [76] \"\\n                            \\n                            Gabon\\n                        \"                                       \n [77] \"\\n                            \\n                            United Kingdom\\n                        \"                              \n [78] \"\\n                            \\n                            Grenada\\n                        \"                                     \n [79] \"\\n                            \\n                            Georgia\\n                        \"                                     \n [80] \"\\n                            \\n                            French Guiana\\n                        \"                               \n [81] \"\\n                            \\n                            Guernsey\\n                        \"                                    \n [82] \"\\n                            \\n                            Ghana\\n                        \"                                       \n [83] \"\\n                            \\n                            Gibraltar\\n                        \"                                   \n [84] \"\\n                            \\n                            Greenland\\n                        \"                                   \n [85] \"\\n                            \\n                            Gambia\\n                        \"                                      \n [86] \"\\n                            \\n                            Guinea\\n                        \"                                      \n [87] \"\\n                            \\n                            Guadeloupe\\n                        \"                                  \n [88] \"\\n                            \\n                            Equatorial Guinea\\n                        \"                           \n [89] \"\\n                            \\n                            Greece\\n                        \"                                      \n [90] \"\\n                            \\n                            South Georgia and the South Sandwich Islands\\n                        \"\n [91] \"\\n                            \\n                            Guatemala\\n                        \"                                   \n [92] \"\\n                            \\n                            Guam\\n                        \"                                        \n [93] \"\\n                            \\n                            Guinea-Bissau\\n                        \"                               \n [94] \"\\n                            \\n                            Guyana\\n                        \"                                      \n [95] \"\\n                            \\n                            Hong Kong\\n                        \"                                   \n [96] \"\\n                            \\n                            Heard Island and McDonald Islands\\n                        \"           \n [97] \"\\n                            \\n                            Honduras\\n                        \"                                    \n [98] \"\\n                            \\n                            Croatia\\n                        \"                                     \n [99] \"\\n                            \\n                            Haiti\\n                        \"                                       \n[100] \"\\n                            \\n                            Hungary\\n                        \"                                     \n[101] \"\\n                            \\n                            Indonesia\\n                        \"                                   \n[102] \"\\n                            \\n                            Ireland\\n                        \"                                     \n[103] \"\\n                            \\n                            Israel\\n                        \"                                      \n[104] \"\\n                            \\n                            Isle of Man\\n                        \"                                 \n[105] \"\\n                            \\n                            India\\n                        \"                                       \n[106] \"\\n                            \\n                            British Indian Ocean Territory\\n                        \"              \n[107] \"\\n                            \\n                            Iraq\\n                        \"                                        \n[108] \"\\n                            \\n                            Iran\\n                        \"                                        \n[109] \"\\n                            \\n                            Iceland\\n                        \"                                     \n[110] \"\\n                            \\n                            Italy\\n                        \"                                       \n[111] \"\\n                            \\n                            Jersey\\n                        \"                                      \n[112] \"\\n                            \\n                            Jamaica\\n                        \"                                     \n[113] \"\\n                            \\n                            Jordan\\n                        \"                                      \n[114] \"\\n                            \\n                            Japan\\n                        \"                                       \n[115] \"\\n                            \\n                            Kenya\\n                        \"                                       \n[116] \"\\n                            \\n                            Kyrgyzstan\\n                        \"                                  \n[117] \"\\n                            \\n                            Cambodia\\n                        \"                                    \n[118] \"\\n                            \\n                            Kiribati\\n                        \"                                    \n[119] \"\\n                            \\n                            Comoros\\n                        \"                                     \n[120] \"\\n                            \\n                            Saint Kitts and Nevis\\n                        \"                       \n[121] \"\\n                            \\n                            North Korea\\n                        \"                                 \n[122] \"\\n                            \\n                            South Korea\\n                        \"                                 \n[123] \"\\n                            \\n                            Kuwait\\n                        \"                                      \n[124] \"\\n                            \\n                            Cayman Islands\\n                        \"                              \n[125] \"\\n                            \\n                            Kazakhstan\\n                        \"                                  \n[126] \"\\n                            \\n                            Laos\\n                        \"                                        \n[127] \"\\n                            \\n                            Lebanon\\n                        \"                                     \n[128] \"\\n                            \\n                            Saint Lucia\\n                        \"                                 \n[129] \"\\n                            \\n                            Liechtenstein\\n                        \"                               \n[130] \"\\n                            \\n                            Sri Lanka\\n                        \"                                   \n[131] \"\\n                            \\n                            Liberia\\n                        \"                                     \n[132] \"\\n                            \\n                            Lesotho\\n                        \"                                     \n[133] \"\\n                            \\n                            Lithuania\\n                        \"                                   \n[134] \"\\n                            \\n                            Luxembourg\\n                        \"                                  \n[135] \"\\n                            \\n                            Latvia\\n                        \"                                      \n[136] \"\\n                            \\n                            Libya\\n                        \"                                       \n[137] \"\\n                            \\n                            Morocco\\n                        \"                                     \n[138] \"\\n                            \\n                            Monaco\\n                        \"                                      \n[139] \"\\n                            \\n                            Moldova\\n                        \"                                     \n[140] \"\\n                            \\n                            Montenegro\\n                        \"                                  \n[141] \"\\n                            \\n                            Saint Martin\\n                        \"                                \n[142] \"\\n                            \\n                            Madagascar\\n                        \"                                  \n[143] \"\\n                            \\n                            Marshall Islands\\n                        \"                            \n[144] \"\\n                            \\n                            Macedonia\\n                        \"                                   \n[145] \"\\n                            \\n                            Mali\\n                        \"                                        \n[146] \"\\n                            \\n                            Myanmar [Burma]\\n                        \"                             \n[147] \"\\n                            \\n                            Mongolia\\n                        \"                                    \n[148] \"\\n                            \\n                            Macao\\n                        \"                                       \n[149] \"\\n                            \\n                            Northern Mariana Islands\\n                        \"                    \n[150] \"\\n                            \\n                            Martinique\\n                        \"                                  \n[151] \"\\n                            \\n                            Mauritania\\n                        \"                                  \n[152] \"\\n                            \\n                            Montserrat\\n                        \"                                  \n[153] \"\\n                            \\n                            Malta\\n                        \"                                       \n[154] \"\\n                            \\n                            Mauritius\\n                        \"                                   \n[155] \"\\n                            \\n                            Maldives\\n                        \"                                    \n[156] \"\\n                            \\n                            Malawi\\n                        \"                                      \n[157] \"\\n                            \\n                            Mexico\\n                        \"                                      \n[158] \"\\n                            \\n                            Malaysia\\n                        \"                                    \n[159] \"\\n                            \\n                            Mozambique\\n                        \"                                  \n[160] \"\\n                            \\n                            Namibia\\n                        \"                                     \n[161] \"\\n                            \\n                            New Caledonia\\n                        \"                               \n[162] \"\\n                            \\n                            Niger\\n                        \"                                       \n[163] \"\\n                            \\n                            Norfolk Island\\n                        \"                              \n[164] \"\\n                            \\n                            Nigeria\\n                        \"                                     \n[165] \"\\n                            \\n                            Nicaragua\\n                        \"                                   \n[166] \"\\n                            \\n                            Netherlands\\n                        \"                                 \n[167] \"\\n                            \\n                            Norway\\n                        \"                                      \n[168] \"\\n                            \\n                            Nepal\\n                        \"                                       \n[169] \"\\n                            \\n                            Nauru\\n                        \"                                       \n[170] \"\\n                            \\n                            Niue\\n                        \"                                        \n[171] \"\\n                            \\n                            New Zealand\\n                        \"                                 \n[172] \"\\n                            \\n                            Oman\\n                        \"                                        \n[173] \"\\n                            \\n                            Panama\\n                        \"                                      \n[174] \"\\n                            \\n                            Peru\\n                        \"                                        \n[175] \"\\n                            \\n                            French Polynesia\\n                        \"                            \n[176] \"\\n                            \\n                            Papua New Guinea\\n                        \"                            \n[177] \"\\n                            \\n                            Philippines\\n                        \"                                 \n[178] \"\\n                            \\n                            Pakistan\\n                        \"                                    \n[179] \"\\n                            \\n                            Poland\\n                        \"                                      \n[180] \"\\n                            \\n                            Saint Pierre and Miquelon\\n                        \"                   \n[181] \"\\n                            \\n                            Pitcairn Islands\\n                        \"                            \n[182] \"\\n                            \\n                            Puerto Rico\\n                        \"                                 \n[183] \"\\n                            \\n                            Palestine\\n                        \"                                   \n[184] \"\\n                            \\n                            Portugal\\n                        \"                                    \n[185] \"\\n                            \\n                            Palau\\n                        \"                                       \n[186] \"\\n                            \\n                            Paraguay\\n                        \"                                    \n[187] \"\\n                            \\n                            Qatar\\n                        \"                                       \n[188] \"\\n                            \\n                            Réunion\\n                        \"                                     \n[189] \"\\n                            \\n                            Romania\\n                        \"                                     \n[190] \"\\n                            \\n                            Serbia\\n                        \"                                      \n[191] \"\\n                            \\n                            Russia\\n                        \"                                      \n[192] \"\\n                            \\n                            Rwanda\\n                        \"                                      \n[193] \"\\n                            \\n                            Saudi Arabia\\n                        \"                                \n[194] \"\\n                            \\n                            Solomon Islands\\n                        \"                             \n[195] \"\\n                            \\n                            Seychelles\\n                        \"                                  \n[196] \"\\n                            \\n                            Sudan\\n                        \"                                       \n[197] \"\\n                            \\n                            Sweden\\n                        \"                                      \n[198] \"\\n                            \\n                            Singapore\\n                        \"                                   \n[199] \"\\n                            \\n                            Saint Helena\\n                        \"                                \n[200] \"\\n                            \\n                            Slovenia\\n                        \"                                    \n[201] \"\\n                            \\n                            Svalbard and Jan Mayen\\n                        \"                      \n[202] \"\\n                            \\n                            Slovakia\\n                        \"                                    \n[203] \"\\n                            \\n                            Sierra Leone\\n                        \"                                \n[204] \"\\n                            \\n                            San Marino\\n                        \"                                  \n[205] \"\\n                            \\n                            Senegal\\n                        \"                                     \n[206] \"\\n                            \\n                            Somalia\\n                        \"                                     \n[207] \"\\n                            \\n                            Suriname\\n                        \"                                    \n[208] \"\\n                            \\n                            South Sudan\\n                        \"                                 \n[209] \"\\n                            \\n                            São Tomé and Príncipe\\n                        \"                       \n[210] \"\\n                            \\n                            El Salvador\\n                        \"                                 \n[211] \"\\n                            \\n                            Sint Maarten\\n                        \"                                \n[212] \"\\n                            \\n                            Syria\\n                        \"                                       \n[213] \"\\n                            \\n                            Swaziland\\n                        \"                                   \n[214] \"\\n                            \\n                            Turks and Caicos Islands\\n                        \"                    \n[215] \"\\n                            \\n                            Chad\\n                        \"                                        \n[216] \"\\n                            \\n                            French Southern Territories\\n                        \"                 \n[217] \"\\n                            \\n                            Togo\\n                        \"                                        \n[218] \"\\n                            \\n                            Thailand\\n                        \"                                    \n[219] \"\\n                            \\n                            Tajikistan\\n                        \"                                  \n[220] \"\\n                            \\n                            Tokelau\\n                        \"                                     \n[221] \"\\n                            \\n                            East Timor\\n                        \"                                  \n[222] \"\\n                            \\n                            Turkmenistan\\n                        \"                                \n[223] \"\\n                            \\n                            Tunisia\\n                        \"                                     \n[224] \"\\n                            \\n                            Tonga\\n                        \"                                       \n[225] \"\\n                            \\n                            Turkey\\n                        \"                                      \n[226] \"\\n                            \\n                            Trinidad and Tobago\\n                        \"                         \n[227] \"\\n                            \\n                            Tuvalu\\n                        \"                                      \n[228] \"\\n                            \\n                            Taiwan\\n                        \"                                      \n[229] \"\\n                            \\n                            Tanzania\\n                        \"                                    \n[230] \"\\n                            \\n                            Ukraine\\n                        \"                                     \n[231] \"\\n                            \\n                            Uganda\\n                        \"                                      \n[232] \"\\n                            \\n                            U.S. Minor Outlying Islands\\n                        \"                 \n[233] \"\\n                            \\n                            United States\\n                        \"                               \n[234] \"\\n                            \\n                            Uruguay\\n                        \"                                     \n[235] \"\\n                            \\n                            Uzbekistan\\n                        \"                                  \n[236] \"\\n                            \\n                            Vatican City\\n                        \"                                \n[237] \"\\n                            \\n                            Saint Vincent and the Grenadines\\n                        \"            \n[238] \"\\n                            \\n                            Venezuela\\n                        \"                                   \n[239] \"\\n                            \\n                            British Virgin Islands\\n                        \"                      \n[240] \"\\n                            \\n                            U.S. Virgin Islands\\n                        \"                         \n[241] \"\\n                            \\n                            Vietnam\\n                        \"                                     \n[242] \"\\n                            \\n                            Vanuatu\\n                        \"                                     \n[243] \"\\n                            \\n                            Wallis and Futuna\\n                        \"                           \n[244] \"\\n                            \\n                            Samoa\\n                        \"                                       \n[245] \"\\n                            \\n                            Kosovo\\n                        \"                                      \n[246] \"\\n                            \\n                            Yemen\\n                        \"                                       \n[247] \"\\n                            \\n                            Mayotte\\n                        \"                                     \n[248] \"\\n                            \\n                            South Africa\\n                        \"                                \n[249] \"\\n                            \\n                            Zambia\\n                        \"                                      \n[250] \"\\n                            \\n                            Zimbabwe\\n                        \"",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#same-thing-without-pipes",
    "href": "web-000400-webscrapingContinued-015.html#same-thing-without-pipes",
    "title": "31  Web Scraping with R",
    "section": "31.7 Same thing without pipes",
    "text": "31.7 Same thing without pipes\n\n###########################################################################\n#\n# same thing a slightly different way (without magrittr pipes)\n#\n###########################################################################\n\nurl = \"https://scrapethissite.com/pages/simple/\"\ncssSelector = \".country-name\"\n\nwhole_html_page = read_html(url)\ncountry_name_html =  html_elements( whole_html_page, cssSelector )\njust_the_text =   html_text(country_name_html)\n\n#...........................\n# Let's examine each part \n#...........................\n\n# the contents of the entire HTML page\nwhole_html_page      \n\n{html_document}\n&lt;html lang=\"en\"&gt;\n [1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF- ...\n [2] &lt;body&gt;\\n    &lt;nav id=\"site-nav\"&gt;&lt;div class=\"container\"&gt;\\n                 ...\n [3] &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery. ...\n [4] &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstra ...\n [5] &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/pnotify/2.1.0/pnotif ...\n [6] &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/pnotify/2.1.0/pnotify ...\n [7] &lt;script type=\"text/javascript\"&gt;\\n    \\n    PNotify.prototype.options.sty ...\n [8] &lt;script type=\"text/javascript\"&gt;\\n    $(\"video\").hover(function() {\\n     ...\n [9] &lt;script&gt;\\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r] ...\n[10] &lt;script&gt;\\n  !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){ ...\n[11] &lt;noscript&gt;&lt;img height=\"1\" width=\"1\" style=\"display:none\" src=\"https://ww ...\n[12] &lt;script type=\"text/javascript\"&gt;\\n    /* &lt;![CDATA[ */\\n    var google_con ...\n[13] &lt;script type=\"text/javascript\" src=\"//www.googleadservices.com/pagead/co ...\n[14] &lt;noscript&gt;\\n    &lt;div style=\"display:inline;\"&gt;\\n    &lt;img height=\"1\" width ...\n[15] &lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=AW-950945 ...\n[16] &lt;script&gt;\\n   window.dataLayer = window.dataLayer || [];\\n   function gta ...\n\n# just the HTML tags that we targeted with the cssSelector\ncountry_name_html    \n\n{xml_nodeset (250)}\n [1] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [2] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [3] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [4] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [5] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [6] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [7] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [8] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n [9] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[10] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[11] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[12] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[13] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[14] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[15] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[16] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[17] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[18] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[19] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n[20] &lt;h3 class=\"country-name\"&gt;\\n                            &lt;i class=\"flag-ic ...\n...\n\n# remove the actual start and end tags ... leaving just the text.\n# again ... notice that this picked up the newlines (\\n) and blanks from the .html file\njust_the_text  \n\n  [1] \"\\n                            \\n                            Andorra\\n                        \"                                     \n  [2] \"\\n                            \\n                            United Arab Emirates\\n                        \"                        \n  [3] \"\\n                            \\n                            Afghanistan\\n                        \"                                 \n  [4] \"\\n                            \\n                            Antigua and Barbuda\\n                        \"                         \n  [5] \"\\n                            \\n                            Anguilla\\n                        \"                                    \n  [6] \"\\n                            \\n                            Albania\\n                        \"                                     \n  [7] \"\\n                            \\n                            Armenia\\n                        \"                                     \n  [8] \"\\n                            \\n                            Angola\\n                        \"                                      \n  [9] \"\\n                            \\n                            Antarctica\\n                        \"                                  \n [10] \"\\n                            \\n                            Argentina\\n                        \"                                   \n [11] \"\\n                            \\n                            American Samoa\\n                        \"                              \n [12] \"\\n                            \\n                            Austria\\n                        \"                                     \n [13] \"\\n                            \\n                            Australia\\n                        \"                                   \n [14] \"\\n                            \\n                            Aruba\\n                        \"                                       \n [15] \"\\n                            \\n                            Åland\\n                        \"                                       \n [16] \"\\n                            \\n                            Azerbaijan\\n                        \"                                  \n [17] \"\\n                            \\n                            Bosnia and Herzegovina\\n                        \"                      \n [18] \"\\n                            \\n                            Barbados\\n                        \"                                    \n [19] \"\\n                            \\n                            Bangladesh\\n                        \"                                  \n [20] \"\\n                            \\n                            Belgium\\n                        \"                                     \n [21] \"\\n                            \\n                            Burkina Faso\\n                        \"                                \n [22] \"\\n                            \\n                            Bulgaria\\n                        \"                                    \n [23] \"\\n                            \\n                            Bahrain\\n                        \"                                     \n [24] \"\\n                            \\n                            Burundi\\n                        \"                                     \n [25] \"\\n                            \\n                            Benin\\n                        \"                                       \n [26] \"\\n                            \\n                            Saint Barthélemy\\n                        \"                            \n [27] \"\\n                            \\n                            Bermuda\\n                        \"                                     \n [28] \"\\n                            \\n                            Brunei\\n                        \"                                      \n [29] \"\\n                            \\n                            Bolivia\\n                        \"                                     \n [30] \"\\n                            \\n                            Bonaire\\n                        \"                                     \n [31] \"\\n                            \\n                            Brazil\\n                        \"                                      \n [32] \"\\n                            \\n                            Bahamas\\n                        \"                                     \n [33] \"\\n                            \\n                            Bhutan\\n                        \"                                      \n [34] \"\\n                            \\n                            Bouvet Island\\n                        \"                               \n [35] \"\\n                            \\n                            Botswana\\n                        \"                                    \n [36] \"\\n                            \\n                            Belarus\\n                        \"                                     \n [37] \"\\n                            \\n                            Belize\\n                        \"                                      \n [38] \"\\n                            \\n                            Canada\\n                        \"                                      \n [39] \"\\n                            \\n                            Cocos [Keeling] Islands\\n                        \"                     \n [40] \"\\n                            \\n                            Democratic Republic of the Congo\\n                        \"            \n [41] \"\\n                            \\n                            Central African Republic\\n                        \"                    \n [42] \"\\n                            \\n                            Republic of the Congo\\n                        \"                       \n [43] \"\\n                            \\n                            Switzerland\\n                        \"                                 \n [44] \"\\n                            \\n                            Ivory Coast\\n                        \"                                 \n [45] \"\\n                            \\n                            Cook Islands\\n                        \"                                \n [46] \"\\n                            \\n                            Chile\\n                        \"                                       \n [47] \"\\n                            \\n                            Cameroon\\n                        \"                                    \n [48] \"\\n                            \\n                            China\\n                        \"                                       \n [49] \"\\n                            \\n                            Colombia\\n                        \"                                    \n [50] \"\\n                            \\n                            Costa Rica\\n                        \"                                  \n [51] \"\\n                            \\n                            Cuba\\n                        \"                                        \n [52] \"\\n                            \\n                            Cape Verde\\n                        \"                                  \n [53] \"\\n                            \\n                            Curacao\\n                        \"                                     \n [54] \"\\n                            \\n                            Christmas Island\\n                        \"                            \n [55] \"\\n                            \\n                            Cyprus\\n                        \"                                      \n [56] \"\\n                            \\n                            Czech Republic\\n                        \"                              \n [57] \"\\n                            \\n                            Germany\\n                        \"                                     \n [58] \"\\n                            \\n                            Djibouti\\n                        \"                                    \n [59] \"\\n                            \\n                            Denmark\\n                        \"                                     \n [60] \"\\n                            \\n                            Dominica\\n                        \"                                    \n [61] \"\\n                            \\n                            Dominican Republic\\n                        \"                          \n [62] \"\\n                            \\n                            Algeria\\n                        \"                                     \n [63] \"\\n                            \\n                            Ecuador\\n                        \"                                     \n [64] \"\\n                            \\n                            Estonia\\n                        \"                                     \n [65] \"\\n                            \\n                            Egypt\\n                        \"                                       \n [66] \"\\n                            \\n                            Western Sahara\\n                        \"                              \n [67] \"\\n                            \\n                            Eritrea\\n                        \"                                     \n [68] \"\\n                            \\n                            Spain\\n                        \"                                       \n [69] \"\\n                            \\n                            Ethiopia\\n                        \"                                    \n [70] \"\\n                            \\n                            Finland\\n                        \"                                     \n [71] \"\\n                            \\n                            Fiji\\n                        \"                                        \n [72] \"\\n                            \\n                            Falkland Islands\\n                        \"                            \n [73] \"\\n                            \\n                            Micronesia\\n                        \"                                  \n [74] \"\\n                            \\n                            Faroe Islands\\n                        \"                               \n [75] \"\\n                            \\n                            France\\n                        \"                                      \n [76] \"\\n                            \\n                            Gabon\\n                        \"                                       \n [77] \"\\n                            \\n                            United Kingdom\\n                        \"                              \n [78] \"\\n                            \\n                            Grenada\\n                        \"                                     \n [79] \"\\n                            \\n                            Georgia\\n                        \"                                     \n [80] \"\\n                            \\n                            French Guiana\\n                        \"                               \n [81] \"\\n                            \\n                            Guernsey\\n                        \"                                    \n [82] \"\\n                            \\n                            Ghana\\n                        \"                                       \n [83] \"\\n                            \\n                            Gibraltar\\n                        \"                                   \n [84] \"\\n                            \\n                            Greenland\\n                        \"                                   \n [85] \"\\n                            \\n                            Gambia\\n                        \"                                      \n [86] \"\\n                            \\n                            Guinea\\n                        \"                                      \n [87] \"\\n                            \\n                            Guadeloupe\\n                        \"                                  \n [88] \"\\n                            \\n                            Equatorial Guinea\\n                        \"                           \n [89] \"\\n                            \\n                            Greece\\n                        \"                                      \n [90] \"\\n                            \\n                            South Georgia and the South Sandwich Islands\\n                        \"\n [91] \"\\n                            \\n                            Guatemala\\n                        \"                                   \n [92] \"\\n                            \\n                            Guam\\n                        \"                                        \n [93] \"\\n                            \\n                            Guinea-Bissau\\n                        \"                               \n [94] \"\\n                            \\n                            Guyana\\n                        \"                                      \n [95] \"\\n                            \\n                            Hong Kong\\n                        \"                                   \n [96] \"\\n                            \\n                            Heard Island and McDonald Islands\\n                        \"           \n [97] \"\\n                            \\n                            Honduras\\n                        \"                                    \n [98] \"\\n                            \\n                            Croatia\\n                        \"                                     \n [99] \"\\n                            \\n                            Haiti\\n                        \"                                       \n[100] \"\\n                            \\n                            Hungary\\n                        \"                                     \n[101] \"\\n                            \\n                            Indonesia\\n                        \"                                   \n[102] \"\\n                            \\n                            Ireland\\n                        \"                                     \n[103] \"\\n                            \\n                            Israel\\n                        \"                                      \n[104] \"\\n                            \\n                            Isle of Man\\n                        \"                                 \n[105] \"\\n                            \\n                            India\\n                        \"                                       \n[106] \"\\n                            \\n                            British Indian Ocean Territory\\n                        \"              \n[107] \"\\n                            \\n                            Iraq\\n                        \"                                        \n[108] \"\\n                            \\n                            Iran\\n                        \"                                        \n[109] \"\\n                            \\n                            Iceland\\n                        \"                                     \n[110] \"\\n                            \\n                            Italy\\n                        \"                                       \n[111] \"\\n                            \\n                            Jersey\\n                        \"                                      \n[112] \"\\n                            \\n                            Jamaica\\n                        \"                                     \n[113] \"\\n                            \\n                            Jordan\\n                        \"                                      \n[114] \"\\n                            \\n                            Japan\\n                        \"                                       \n[115] \"\\n                            \\n                            Kenya\\n                        \"                                       \n[116] \"\\n                            \\n                            Kyrgyzstan\\n                        \"                                  \n[117] \"\\n                            \\n                            Cambodia\\n                        \"                                    \n[118] \"\\n                            \\n                            Kiribati\\n                        \"                                    \n[119] \"\\n                            \\n                            Comoros\\n                        \"                                     \n[120] \"\\n                            \\n                            Saint Kitts and Nevis\\n                        \"                       \n[121] \"\\n                            \\n                            North Korea\\n                        \"                                 \n[122] \"\\n                            \\n                            South Korea\\n                        \"                                 \n[123] \"\\n                            \\n                            Kuwait\\n                        \"                                      \n[124] \"\\n                            \\n                            Cayman Islands\\n                        \"                              \n[125] \"\\n                            \\n                            Kazakhstan\\n                        \"                                  \n[126] \"\\n                            \\n                            Laos\\n                        \"                                        \n[127] \"\\n                            \\n                            Lebanon\\n                        \"                                     \n[128] \"\\n                            \\n                            Saint Lucia\\n                        \"                                 \n[129] \"\\n                            \\n                            Liechtenstein\\n                        \"                               \n[130] \"\\n                            \\n                            Sri Lanka\\n                        \"                                   \n[131] \"\\n                            \\n                            Liberia\\n                        \"                                     \n[132] \"\\n                            \\n                            Lesotho\\n                        \"                                     \n[133] \"\\n                            \\n                            Lithuania\\n                        \"                                   \n[134] \"\\n                            \\n                            Luxembourg\\n                        \"                                  \n[135] \"\\n                            \\n                            Latvia\\n                        \"                                      \n[136] \"\\n                            \\n                            Libya\\n                        \"                                       \n[137] \"\\n                            \\n                            Morocco\\n                        \"                                     \n[138] \"\\n                            \\n                            Monaco\\n                        \"                                      \n[139] \"\\n                            \\n                            Moldova\\n                        \"                                     \n[140] \"\\n                            \\n                            Montenegro\\n                        \"                                  \n[141] \"\\n                            \\n                            Saint Martin\\n                        \"                                \n[142] \"\\n                            \\n                            Madagascar\\n                        \"                                  \n[143] \"\\n                            \\n                            Marshall Islands\\n                        \"                            \n[144] \"\\n                            \\n                            Macedonia\\n                        \"                                   \n[145] \"\\n                            \\n                            Mali\\n                        \"                                        \n[146] \"\\n                            \\n                            Myanmar [Burma]\\n                        \"                             \n[147] \"\\n                            \\n                            Mongolia\\n                        \"                                    \n[148] \"\\n                            \\n                            Macao\\n                        \"                                       \n[149] \"\\n                            \\n                            Northern Mariana Islands\\n                        \"                    \n[150] \"\\n                            \\n                            Martinique\\n                        \"                                  \n[151] \"\\n                            \\n                            Mauritania\\n                        \"                                  \n[152] \"\\n                            \\n                            Montserrat\\n                        \"                                  \n[153] \"\\n                            \\n                            Malta\\n                        \"                                       \n[154] \"\\n                            \\n                            Mauritius\\n                        \"                                   \n[155] \"\\n                            \\n                            Maldives\\n                        \"                                    \n[156] \"\\n                            \\n                            Malawi\\n                        \"                                      \n[157] \"\\n                            \\n                            Mexico\\n                        \"                                      \n[158] \"\\n                            \\n                            Malaysia\\n                        \"                                    \n[159] \"\\n                            \\n                            Mozambique\\n                        \"                                  \n[160] \"\\n                            \\n                            Namibia\\n                        \"                                     \n[161] \"\\n                            \\n                            New Caledonia\\n                        \"                               \n[162] \"\\n                            \\n                            Niger\\n                        \"                                       \n[163] \"\\n                            \\n                            Norfolk Island\\n                        \"                              \n[164] \"\\n                            \\n                            Nigeria\\n                        \"                                     \n[165] \"\\n                            \\n                            Nicaragua\\n                        \"                                   \n[166] \"\\n                            \\n                            Netherlands\\n                        \"                                 \n[167] \"\\n                            \\n                            Norway\\n                        \"                                      \n[168] \"\\n                            \\n                            Nepal\\n                        \"                                       \n[169] \"\\n                            \\n                            Nauru\\n                        \"                                       \n[170] \"\\n                            \\n                            Niue\\n                        \"                                        \n[171] \"\\n                            \\n                            New Zealand\\n                        \"                                 \n[172] \"\\n                            \\n                            Oman\\n                        \"                                        \n[173] \"\\n                            \\n                            Panama\\n                        \"                                      \n[174] \"\\n                            \\n                            Peru\\n                        \"                                        \n[175] \"\\n                            \\n                            French Polynesia\\n                        \"                            \n[176] \"\\n                            \\n                            Papua New Guinea\\n                        \"                            \n[177] \"\\n                            \\n                            Philippines\\n                        \"                                 \n[178] \"\\n                            \\n                            Pakistan\\n                        \"                                    \n[179] \"\\n                            \\n                            Poland\\n                        \"                                      \n[180] \"\\n                            \\n                            Saint Pierre and Miquelon\\n                        \"                   \n[181] \"\\n                            \\n                            Pitcairn Islands\\n                        \"                            \n[182] \"\\n                            \\n                            Puerto Rico\\n                        \"                                 \n[183] \"\\n                            \\n                            Palestine\\n                        \"                                   \n[184] \"\\n                            \\n                            Portugal\\n                        \"                                    \n[185] \"\\n                            \\n                            Palau\\n                        \"                                       \n[186] \"\\n                            \\n                            Paraguay\\n                        \"                                    \n[187] \"\\n                            \\n                            Qatar\\n                        \"                                       \n[188] \"\\n                            \\n                            Réunion\\n                        \"                                     \n[189] \"\\n                            \\n                            Romania\\n                        \"                                     \n[190] \"\\n                            \\n                            Serbia\\n                        \"                                      \n[191] \"\\n                            \\n                            Russia\\n                        \"                                      \n[192] \"\\n                            \\n                            Rwanda\\n                        \"                                      \n[193] \"\\n                            \\n                            Saudi Arabia\\n                        \"                                \n[194] \"\\n                            \\n                            Solomon Islands\\n                        \"                             \n[195] \"\\n                            \\n                            Seychelles\\n                        \"                                  \n[196] \"\\n                            \\n                            Sudan\\n                        \"                                       \n[197] \"\\n                            \\n                            Sweden\\n                        \"                                      \n[198] \"\\n                            \\n                            Singapore\\n                        \"                                   \n[199] \"\\n                            \\n                            Saint Helena\\n                        \"                                \n[200] \"\\n                            \\n                            Slovenia\\n                        \"                                    \n[201] \"\\n                            \\n                            Svalbard and Jan Mayen\\n                        \"                      \n[202] \"\\n                            \\n                            Slovakia\\n                        \"                                    \n[203] \"\\n                            \\n                            Sierra Leone\\n                        \"                                \n[204] \"\\n                            \\n                            San Marino\\n                        \"                                  \n[205] \"\\n                            \\n                            Senegal\\n                        \"                                     \n[206] \"\\n                            \\n                            Somalia\\n                        \"                                     \n[207] \"\\n                            \\n                            Suriname\\n                        \"                                    \n[208] \"\\n                            \\n                            South Sudan\\n                        \"                                 \n[209] \"\\n                            \\n                            São Tomé and Príncipe\\n                        \"                       \n[210] \"\\n                            \\n                            El Salvador\\n                        \"                                 \n[211] \"\\n                            \\n                            Sint Maarten\\n                        \"                                \n[212] \"\\n                            \\n                            Syria\\n                        \"                                       \n[213] \"\\n                            \\n                            Swaziland\\n                        \"                                   \n[214] \"\\n                            \\n                            Turks and Caicos Islands\\n                        \"                    \n[215] \"\\n                            \\n                            Chad\\n                        \"                                        \n[216] \"\\n                            \\n                            French Southern Territories\\n                        \"                 \n[217] \"\\n                            \\n                            Togo\\n                        \"                                        \n[218] \"\\n                            \\n                            Thailand\\n                        \"                                    \n[219] \"\\n                            \\n                            Tajikistan\\n                        \"                                  \n[220] \"\\n                            \\n                            Tokelau\\n                        \"                                     \n[221] \"\\n                            \\n                            East Timor\\n                        \"                                  \n[222] \"\\n                            \\n                            Turkmenistan\\n                        \"                                \n[223] \"\\n                            \\n                            Tunisia\\n                        \"                                     \n[224] \"\\n                            \\n                            Tonga\\n                        \"                                       \n[225] \"\\n                            \\n                            Turkey\\n                        \"                                      \n[226] \"\\n                            \\n                            Trinidad and Tobago\\n                        \"                         \n[227] \"\\n                            \\n                            Tuvalu\\n                        \"                                      \n[228] \"\\n                            \\n                            Taiwan\\n                        \"                                      \n[229] \"\\n                            \\n                            Tanzania\\n                        \"                                    \n[230] \"\\n                            \\n                            Ukraine\\n                        \"                                     \n[231] \"\\n                            \\n                            Uganda\\n                        \"                                      \n[232] \"\\n                            \\n                            U.S. Minor Outlying Islands\\n                        \"                 \n[233] \"\\n                            \\n                            United States\\n                        \"                               \n[234] \"\\n                            \\n                            Uruguay\\n                        \"                                     \n[235] \"\\n                            \\n                            Uzbekistan\\n                        \"                                  \n[236] \"\\n                            \\n                            Vatican City\\n                        \"                                \n[237] \"\\n                            \\n                            Saint Vincent and the Grenadines\\n                        \"            \n[238] \"\\n                            \\n                            Venezuela\\n                        \"                                   \n[239] \"\\n                            \\n                            British Virgin Islands\\n                        \"                      \n[240] \"\\n                            \\n                            U.S. Virgin Islands\\n                        \"                         \n[241] \"\\n                            \\n                            Vietnam\\n                        \"                                     \n[242] \"\\n                            \\n                            Vanuatu\\n                        \"                                     \n[243] \"\\n                            \\n                            Wallis and Futuna\\n                        \"                           \n[244] \"\\n                            \\n                            Samoa\\n                        \"                                       \n[245] \"\\n                            \\n                            Kosovo\\n                        \"                                      \n[246] \"\\n                            \\n                            Yemen\\n                        \"                                       \n[247] \"\\n                            \\n                            Mayotte\\n                        \"                                     \n[248] \"\\n                            \\n                            South Africa\\n                        \"                                \n[249] \"\\n                            \\n                            Zambia\\n                        \"                                      \n[250] \"\\n                            \\n                            Zimbabwe\\n                        \"                                    \n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# Let's look a little closer at the contents of what is returned by read_html\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n# We already had this above, just reviewing it again ...\nurl = \"https://scrapethissite.com/pages/simple/\"\nwhole_html_page = read_html(url)\ncountry_name_html =  html_elements( whole_html_page, cssSelector )\njust_the_text =   html_text(country_name_html)\n\n# What is the structure of this data?\nstr(whole_html_page) # list of 2 externalptr objects (see below)\n\nList of 2\n $ node:&lt;externalptr&gt; \n $ doc :&lt;externalptr&gt; \n - attr(*, \"class\")= chr [1:2] \"xml_document\" \"xml_node\"\n\n# What is the class of this data? \nclass(whole_html_page)   # \"xml_document\" \"xml_node\"\n\n[1] \"xml_document\" \"xml_node\"    \n\nmethods(print)    # ... print.xml_document* ... print.xml_node*\n\n  [1] print.acf*                                          \n  [2] print.activeConcordance*                            \n  [3] print.AES*                                          \n  [4] print.anova*                                        \n  [5] print.aov*                                          \n  [6] print.aovlist*                                      \n  [7] print.ar*                                           \n  [8] print.Arima*                                        \n  [9] print.arima0*                                       \n [10] print.AsIs                                          \n [11] print.aspell*                                       \n [12] print.aspell_inspect_context*                       \n [13] print.bibentry*                                     \n [14] print.Bibtex*                                       \n [15] print.browseVignettes*                              \n [16] print.by                                            \n [17] print.cache_info*                                   \n [18] print.changedFiles*                                 \n [19] print.check_bogus_return*                           \n [20] print.check_code_usage_in_package*                  \n [21] print.check_compiled_code*                          \n [22] print.check_demo_index*                             \n [23] print.check_depdef*                                 \n [24] print.check_details*                                \n [25] print.check_details_changes*                        \n [26] print.check_doi_db*                                 \n [27] print.check_dotInternal*                            \n [28] print.check_make_vars*                              \n [29] print.check_nonAPI_calls*                           \n [30] print.check_package_code_assign_to_globalenv*       \n [31] print.check_package_code_attach*                    \n [32] print.check_package_code_data_into_globalenv*       \n [33] print.check_package_code_startup_functions*         \n [34] print.check_package_code_syntax*                    \n [35] print.check_package_code_unload_functions*          \n [36] print.check_package_compact_datasets*               \n [37] print.check_package_CRAN_incoming*                  \n [38] print.check_package_datalist*                       \n [39] print.check_package_datasets*                       \n [40] print.check_package_depends*                        \n [41] print.check_package_description*                    \n [42] print.check_package_description_encoding*           \n [43] print.check_package_license*                        \n [44] print.check_packages_in_dir*                        \n [45] print.check_packages_used*                          \n [46] print.check_po_files*                               \n [47] print.check_pragmas*                                \n [48] print.check_Rd_line_widths*                         \n [49] print.check_Rd_metadata*                            \n [50] print.check_Rd_xrefs*                               \n [51] print.check_RegSym_calls*                           \n [52] print.check_S3_methods_needing_delayed_registration*\n [53] print.check_so_symbols*                             \n [54] print.check_T_and_F*                                \n [55] print.check_url_db*                                 \n [56] print.check_vignette_index*                         \n [57] print.checkDocFiles*                                \n [58] print.checkDocStyle*                                \n [59] print.checkFF*                                      \n [60] print.checkRd*                                      \n [61] print.checkRdContents*                              \n [62] print.checkReplaceFuns*                             \n [63] print.checkS3methods*                               \n [64] print.checkTnF*                                     \n [65] print.checkVignettes*                               \n [66] print.citation*                                     \n [67] print.cli_ansi_html_style*                          \n [68] print.cli_ansi_string*                              \n [69] print.cli_ansi_style*                               \n [70] print.cli_boxx*                                     \n [71] print.cli_diff_chr*                                 \n [72] print.cli_doc*                                      \n [73] print.cli_progress_demo*                            \n [74] print.cli_rule*                                     \n [75] print.cli_sitrep*                                   \n [76] print.cli_spark*                                    \n [77] print.cli_spinner*                                  \n [78] print.cli_tree*                                     \n [79] print.codoc*                                        \n [80] print.codocClasses*                                 \n [81] print.codocData*                                    \n [82] print.colorConverter*                               \n [83] print.compactPDF*                                   \n [84] print.condition                                     \n [85] print.connection                                    \n [86] print.CRAN_package_reverse_dependencies_and_views*  \n [87] print.curl_handle*                                  \n [88] print.curl_multi*                                   \n [89] print.data.frame                                    \n [90] print.Date                                          \n [91] print.default                                       \n [92] print.dendrogram*                                   \n [93] print.density*                                      \n [94] print.difftime                                      \n [95] print.dist*                                         \n [96] print.Dlist                                         \n [97] print.DLLInfo                                       \n [98] print.DLLInfoList                                   \n [99] print.DLLRegisteredRoutines                         \n[100] print.document_context*                             \n[101] print.document_position*                            \n[102] print.document_range*                               \n[103] print.document_selection*                           \n[104] print.dummy_coef*                                   \n[105] print.dummy_coef_list*                              \n[106] print.ecdf*                                         \n[107] print.eigen                                         \n[108] print.evaluate_evaluation*                          \n[109] print.factanal*                                     \n[110] print.factor                                        \n[111] print.family*                                       \n[112] print.fileSnapshot*                                 \n[113] print.findLineNumResult*                            \n[114] print.form_data*                                    \n[115] print.form_file*                                    \n[116] print.formula*                                      \n[117] print.fseq*                                         \n[118] print.ftable*                                       \n[119] print.function                                      \n[120] print.getAnywhere*                                  \n[121] print.glm*                                          \n[122] print.glue*                                         \n[123] print.handle*                                       \n[124] print.hashtab*                                      \n[125] print.hclust*                                       \n[126] print.help_files_with_topic*                        \n[127] print.hexmode                                       \n[128] print.HoltWinters*                                  \n[129] print.hsearch*                                      \n[130] print.hsearch_db*                                   \n[131] print.htest*                                        \n[132] print.html*                                         \n[133] print.html_dependency*                              \n[134] print.htmltools.selector*                           \n[135] print.htmltools.selector.list*                      \n[136] print.infl*                                         \n[137] print.integrate*                                    \n[138] print.isoreg*                                       \n[139] print.json*                                         \n[140] print.key_missing*                                  \n[141] print.kmeans*                                       \n[142] print.knitr_kable*                                  \n[143] print.Latex*                                        \n[144] print.LaTeX*                                        \n[145] print.libraryIQR                                    \n[146] print.lifecycle_warnings*                           \n[147] print.listof                                        \n[148] print.lm*                                           \n[149] print.loadings*                                     \n[150] print.loess*                                        \n[151] print.logLik*                                       \n[152] print.ls_str*                                       \n[153] print.medpolish*                                    \n[154] print.MethodsFunction*                              \n[155] print.mtable*                                       \n[156] print.NativeRoutineList                             \n[157] print.news_db*                                      \n[158] print.nls*                                          \n[159] print.noquote                                       \n[160] print.numeric_version                               \n[161] print.oauth_app*                                    \n[162] print.oauth_endpoint*                               \n[163] print.object_size*                                  \n[164] print.octmode                                       \n[165] print.opts_list*                                    \n[166] print.packageDescription*                           \n[167] print.packageInfo                                   \n[168] print.packageIQR*                                   \n[169] print.packageStatus*                                \n[170] print.paged_df*                                     \n[171] print.pairwise.htest*                               \n[172] print.person*                                       \n[173] print.POSIXct                                       \n[174] print.POSIXlt                                       \n[175] print.power.htest*                                  \n[176] print.ppr*                                          \n[177] print.prcomp*                                       \n[178] print.princomp*                                     \n[179] print.proc_time                                     \n[180] print.quosure*                                      \n[181] print.quosures*                                     \n[182] print.R6*                                           \n[183] print.R6ClassGenerator*                             \n[184] print.raster*                                       \n[185] print.Rconcordance*                                 \n[186] print.Rd*                                           \n[187] print.recordedplot*                                 \n[188] print.request*                                      \n[189] print.response*                                     \n[190] print.restart                                       \n[191] print.RGBcolorConverter*                            \n[192] print.RGlyphFont*                                   \n[193] print.rlang:::list_of_conditions*                   \n[194] print.rlang_box_done*                               \n[195] print.rlang_box_splice*                             \n[196] print.rlang_data_pronoun*                           \n[197] print.rlang_dict*                                   \n[198] print.rlang_dyn_array*                              \n[199] print.rlang_envs*                                   \n[200] print.rlang_error*                                  \n[201] print.rlang_fake_data_pronoun*                      \n[202] print.rlang_lambda_function*                        \n[203] print.rlang_message*                                \n[204] print.rlang_trace*                                  \n[205] print.rlang_warning*                                \n[206] print.rlang_zap*                                    \n[207] print.rle                                           \n[208] print.rlib_bytes*                                   \n[209] print.rlib_error_3_0*                               \n[210] print.rlib_trace_3_0*                               \n[211] print.roman*                                        \n[212] print.rvest_field*                                  \n[213] print.rvest_form*                                   \n[214] print.rvest_session*                                \n[215] print.SavedPlots*                                   \n[216] print.scalar*                                       \n[217] print.sessionInfo*                                  \n[218] print.shiny.tag*                                    \n[219] print.shiny.tag.env*                                \n[220] print.shiny.tag.list*                               \n[221] print.shiny.tag.query*                              \n[222] print.simple.list                                   \n[223] print.smooth.spline*                                \n[224] print.socket*                                       \n[225] print.srcfile                                       \n[226] print.srcref                                        \n[227] print.stepfun*                                      \n[228] print.stl*                                          \n[229] print.stringr_view*                                 \n[230] print.StructTS*                                     \n[231] print.subdir_tests*                                 \n[232] print.summarize_CRAN_check_status*                  \n[233] print.summary.aov*                                  \n[234] print.summary.aovlist*                              \n[235] print.summary.ecdf*                                 \n[236] print.summary.glm*                                  \n[237] print.summary.lm*                                   \n[238] print.summary.loess*                                \n[239] print.summary.manova*                               \n[240] print.summary.nls*                                  \n[241] print.summary.packageStatus*                        \n[242] print.summary.ppr*                                  \n[243] print.summary.prcomp*                               \n[244] print.summary.princomp*                             \n[245] print.summary.table                                 \n[246] print.summary.warnings                              \n[247] print.summaryDefault                                \n[248] print.table                                         \n[249] print.tables_aov*                                   \n[250] print.terms*                                        \n[251] print.ts*                                           \n[252] print.tskernel*                                     \n[253] print.TukeyHSD*                                     \n[254] print.tukeyline*                                    \n[255] print.tukeysmooth*                                  \n[256] print.undoc*                                        \n[257] print.vctrs_bytes*                                  \n[258] print.vctrs_sclr*                                   \n[259] print.vctrs_unspecified*                            \n[260] print.vctrs_vctr*                                   \n[261] print.vignette*                                     \n[262] print.warnings                                      \n[263] print.xfun_md_viewable*                             \n[264] print.xfun_raw_string*                              \n[265] print.xfun_record_results*                          \n[266] print.xfun_rename_seq*                              \n[267] print.xfun_strict_list*                             \n[268] print.xgettext*                                     \n[269] print.xml_document*                                 \n[270] print.xml_missing*                                  \n[271] print.xml_namespace*                                \n[272] print.xml_node*                                     \n[273] print.xml_nodeset*                                  \n[274] print.xngettext*                                    \n[275] print.xtabs*                                        \nsee '?methods' for accessing help and source code\n\nattributes(whole_html_page)\n\n$names\n[1] \"node\" \"doc\" \n\n$class\n[1] \"xml_document\" \"xml_node\"    \n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# An externalptr cannot be accessed directly via R code. It is a \"blob\"\n# (a \"binary large object\") i.e. a piece of data that is only accessible\n# via C language (not R) code that is used to build some of the packages\n# that are used to extend R's functionality. You must use the built in\n# functions in the xml2 and the rvest packages to access this data.\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#working-with-the-data-you-scraped",
    "href": "web-000400-webscrapingContinued-015.html#working-with-the-data-you-scraped",
    "title": "31  Web Scraping with R",
    "section": "31.8 Working with the data you scraped",
    "text": "31.8 Working with the data you scraped\n\n#.....................................................................\n#\n# we can eliminate extra newlines and the blanks with the gsub function\n# \n#.....................................................................\n\n?gsub   # see the documentation\n\nstarting httpd help server ... done\n\nwithout_backslash_n = gsub(\"\\\\n\", \"\", just_the_text)    \nwithout_backslash_n\n\n  [1] \"                                                        Andorra                        \"                                     \n  [2] \"                                                        United Arab Emirates                        \"                        \n  [3] \"                                                        Afghanistan                        \"                                 \n  [4] \"                                                        Antigua and Barbuda                        \"                         \n  [5] \"                                                        Anguilla                        \"                                    \n  [6] \"                                                        Albania                        \"                                     \n  [7] \"                                                        Armenia                        \"                                     \n  [8] \"                                                        Angola                        \"                                      \n  [9] \"                                                        Antarctica                        \"                                  \n [10] \"                                                        Argentina                        \"                                   \n [11] \"                                                        American Samoa                        \"                              \n [12] \"                                                        Austria                        \"                                     \n [13] \"                                                        Australia                        \"                                   \n [14] \"                                                        Aruba                        \"                                       \n [15] \"                                                        Åland                        \"                                       \n [16] \"                                                        Azerbaijan                        \"                                  \n [17] \"                                                        Bosnia and Herzegovina                        \"                      \n [18] \"                                                        Barbados                        \"                                    \n [19] \"                                                        Bangladesh                        \"                                  \n [20] \"                                                        Belgium                        \"                                     \n [21] \"                                                        Burkina Faso                        \"                                \n [22] \"                                                        Bulgaria                        \"                                    \n [23] \"                                                        Bahrain                        \"                                     \n [24] \"                                                        Burundi                        \"                                     \n [25] \"                                                        Benin                        \"                                       \n [26] \"                                                        Saint Barthélemy                        \"                            \n [27] \"                                                        Bermuda                        \"                                     \n [28] \"                                                        Brunei                        \"                                      \n [29] \"                                                        Bolivia                        \"                                     \n [30] \"                                                        Bonaire                        \"                                     \n [31] \"                                                        Brazil                        \"                                      \n [32] \"                                                        Bahamas                        \"                                     \n [33] \"                                                        Bhutan                        \"                                      \n [34] \"                                                        Bouvet Island                        \"                               \n [35] \"                                                        Botswana                        \"                                    \n [36] \"                                                        Belarus                        \"                                     \n [37] \"                                                        Belize                        \"                                      \n [38] \"                                                        Canada                        \"                                      \n [39] \"                                                        Cocos [Keeling] Islands                        \"                     \n [40] \"                                                        Democratic Republic of the Congo                        \"            \n [41] \"                                                        Central African Republic                        \"                    \n [42] \"                                                        Republic of the Congo                        \"                       \n [43] \"                                                        Switzerland                        \"                                 \n [44] \"                                                        Ivory Coast                        \"                                 \n [45] \"                                                        Cook Islands                        \"                                \n [46] \"                                                        Chile                        \"                                       \n [47] \"                                                        Cameroon                        \"                                    \n [48] \"                                                        China                        \"                                       \n [49] \"                                                        Colombia                        \"                                    \n [50] \"                                                        Costa Rica                        \"                                  \n [51] \"                                                        Cuba                        \"                                        \n [52] \"                                                        Cape Verde                        \"                                  \n [53] \"                                                        Curacao                        \"                                     \n [54] \"                                                        Christmas Island                        \"                            \n [55] \"                                                        Cyprus                        \"                                      \n [56] \"                                                        Czech Republic                        \"                              \n [57] \"                                                        Germany                        \"                                     \n [58] \"                                                        Djibouti                        \"                                    \n [59] \"                                                        Denmark                        \"                                     \n [60] \"                                                        Dominica                        \"                                    \n [61] \"                                                        Dominican Republic                        \"                          \n [62] \"                                                        Algeria                        \"                                     \n [63] \"                                                        Ecuador                        \"                                     \n [64] \"                                                        Estonia                        \"                                     \n [65] \"                                                        Egypt                        \"                                       \n [66] \"                                                        Western Sahara                        \"                              \n [67] \"                                                        Eritrea                        \"                                     \n [68] \"                                                        Spain                        \"                                       \n [69] \"                                                        Ethiopia                        \"                                    \n [70] \"                                                        Finland                        \"                                     \n [71] \"                                                        Fiji                        \"                                        \n [72] \"                                                        Falkland Islands                        \"                            \n [73] \"                                                        Micronesia                        \"                                  \n [74] \"                                                        Faroe Islands                        \"                               \n [75] \"                                                        France                        \"                                      \n [76] \"                                                        Gabon                        \"                                       \n [77] \"                                                        United Kingdom                        \"                              \n [78] \"                                                        Grenada                        \"                                     \n [79] \"                                                        Georgia                        \"                                     \n [80] \"                                                        French Guiana                        \"                               \n [81] \"                                                        Guernsey                        \"                                    \n [82] \"                                                        Ghana                        \"                                       \n [83] \"                                                        Gibraltar                        \"                                   \n [84] \"                                                        Greenland                        \"                                   \n [85] \"                                                        Gambia                        \"                                      \n [86] \"                                                        Guinea                        \"                                      \n [87] \"                                                        Guadeloupe                        \"                                  \n [88] \"                                                        Equatorial Guinea                        \"                           \n [89] \"                                                        Greece                        \"                                      \n [90] \"                                                        South Georgia and the South Sandwich Islands                        \"\n [91] \"                                                        Guatemala                        \"                                   \n [92] \"                                                        Guam                        \"                                        \n [93] \"                                                        Guinea-Bissau                        \"                               \n [94] \"                                                        Guyana                        \"                                      \n [95] \"                                                        Hong Kong                        \"                                   \n [96] \"                                                        Heard Island and McDonald Islands                        \"           \n [97] \"                                                        Honduras                        \"                                    \n [98] \"                                                        Croatia                        \"                                     \n [99] \"                                                        Haiti                        \"                                       \n[100] \"                                                        Hungary                        \"                                     \n[101] \"                                                        Indonesia                        \"                                   \n[102] \"                                                        Ireland                        \"                                     \n[103] \"                                                        Israel                        \"                                      \n[104] \"                                                        Isle of Man                        \"                                 \n[105] \"                                                        India                        \"                                       \n[106] \"                                                        British Indian Ocean Territory                        \"              \n[107] \"                                                        Iraq                        \"                                        \n[108] \"                                                        Iran                        \"                                        \n[109] \"                                                        Iceland                        \"                                     \n[110] \"                                                        Italy                        \"                                       \n[111] \"                                                        Jersey                        \"                                      \n[112] \"                                                        Jamaica                        \"                                     \n[113] \"                                                        Jordan                        \"                                      \n[114] \"                                                        Japan                        \"                                       \n[115] \"                                                        Kenya                        \"                                       \n[116] \"                                                        Kyrgyzstan                        \"                                  \n[117] \"                                                        Cambodia                        \"                                    \n[118] \"                                                        Kiribati                        \"                                    \n[119] \"                                                        Comoros                        \"                                     \n[120] \"                                                        Saint Kitts and Nevis                        \"                       \n[121] \"                                                        North Korea                        \"                                 \n[122] \"                                                        South Korea                        \"                                 \n[123] \"                                                        Kuwait                        \"                                      \n[124] \"                                                        Cayman Islands                        \"                              \n[125] \"                                                        Kazakhstan                        \"                                  \n[126] \"                                                        Laos                        \"                                        \n[127] \"                                                        Lebanon                        \"                                     \n[128] \"                                                        Saint Lucia                        \"                                 \n[129] \"                                                        Liechtenstein                        \"                               \n[130] \"                                                        Sri Lanka                        \"                                   \n[131] \"                                                        Liberia                        \"                                     \n[132] \"                                                        Lesotho                        \"                                     \n[133] \"                                                        Lithuania                        \"                                   \n[134] \"                                                        Luxembourg                        \"                                  \n[135] \"                                                        Latvia                        \"                                      \n[136] \"                                                        Libya                        \"                                       \n[137] \"                                                        Morocco                        \"                                     \n[138] \"                                                        Monaco                        \"                                      \n[139] \"                                                        Moldova                        \"                                     \n[140] \"                                                        Montenegro                        \"                                  \n[141] \"                                                        Saint Martin                        \"                                \n[142] \"                                                        Madagascar                        \"                                  \n[143] \"                                                        Marshall Islands                        \"                            \n[144] \"                                                        Macedonia                        \"                                   \n[145] \"                                                        Mali                        \"                                        \n[146] \"                                                        Myanmar [Burma]                        \"                             \n[147] \"                                                        Mongolia                        \"                                    \n[148] \"                                                        Macao                        \"                                       \n[149] \"                                                        Northern Mariana Islands                        \"                    \n[150] \"                                                        Martinique                        \"                                  \n[151] \"                                                        Mauritania                        \"                                  \n[152] \"                                                        Montserrat                        \"                                  \n[153] \"                                                        Malta                        \"                                       \n[154] \"                                                        Mauritius                        \"                                   \n[155] \"                                                        Maldives                        \"                                    \n[156] \"                                                        Malawi                        \"                                      \n[157] \"                                                        Mexico                        \"                                      \n[158] \"                                                        Malaysia                        \"                                    \n[159] \"                                                        Mozambique                        \"                                  \n[160] \"                                                        Namibia                        \"                                     \n[161] \"                                                        New Caledonia                        \"                               \n[162] \"                                                        Niger                        \"                                       \n[163] \"                                                        Norfolk Island                        \"                              \n[164] \"                                                        Nigeria                        \"                                     \n[165] \"                                                        Nicaragua                        \"                                   \n[166] \"                                                        Netherlands                        \"                                 \n[167] \"                                                        Norway                        \"                                      \n[168] \"                                                        Nepal                        \"                                       \n[169] \"                                                        Nauru                        \"                                       \n[170] \"                                                        Niue                        \"                                        \n[171] \"                                                        New Zealand                        \"                                 \n[172] \"                                                        Oman                        \"                                        \n[173] \"                                                        Panama                        \"                                      \n[174] \"                                                        Peru                        \"                                        \n[175] \"                                                        French Polynesia                        \"                            \n[176] \"                                                        Papua New Guinea                        \"                            \n[177] \"                                                        Philippines                        \"                                 \n[178] \"                                                        Pakistan                        \"                                    \n[179] \"                                                        Poland                        \"                                      \n[180] \"                                                        Saint Pierre and Miquelon                        \"                   \n[181] \"                                                        Pitcairn Islands                        \"                            \n[182] \"                                                        Puerto Rico                        \"                                 \n[183] \"                                                        Palestine                        \"                                   \n[184] \"                                                        Portugal                        \"                                    \n[185] \"                                                        Palau                        \"                                       \n[186] \"                                                        Paraguay                        \"                                    \n[187] \"                                                        Qatar                        \"                                       \n[188] \"                                                        Réunion                        \"                                     \n[189] \"                                                        Romania                        \"                                     \n[190] \"                                                        Serbia                        \"                                      \n[191] \"                                                        Russia                        \"                                      \n[192] \"                                                        Rwanda                        \"                                      \n[193] \"                                                        Saudi Arabia                        \"                                \n[194] \"                                                        Solomon Islands                        \"                             \n[195] \"                                                        Seychelles                        \"                                  \n[196] \"                                                        Sudan                        \"                                       \n[197] \"                                                        Sweden                        \"                                      \n[198] \"                                                        Singapore                        \"                                   \n[199] \"                                                        Saint Helena                        \"                                \n[200] \"                                                        Slovenia                        \"                                    \n[201] \"                                                        Svalbard and Jan Mayen                        \"                      \n[202] \"                                                        Slovakia                        \"                                    \n[203] \"                                                        Sierra Leone                        \"                                \n[204] \"                                                        San Marino                        \"                                  \n[205] \"                                                        Senegal                        \"                                     \n[206] \"                                                        Somalia                        \"                                     \n[207] \"                                                        Suriname                        \"                                    \n[208] \"                                                        South Sudan                        \"                                 \n[209] \"                                                        São Tomé and Príncipe                        \"                       \n[210] \"                                                        El Salvador                        \"                                 \n[211] \"                                                        Sint Maarten                        \"                                \n[212] \"                                                        Syria                        \"                                       \n[213] \"                                                        Swaziland                        \"                                   \n[214] \"                                                        Turks and Caicos Islands                        \"                    \n[215] \"                                                        Chad                        \"                                        \n[216] \"                                                        French Southern Territories                        \"                 \n[217] \"                                                        Togo                        \"                                        \n[218] \"                                                        Thailand                        \"                                    \n[219] \"                                                        Tajikistan                        \"                                  \n[220] \"                                                        Tokelau                        \"                                     \n[221] \"                                                        East Timor                        \"                                  \n[222] \"                                                        Turkmenistan                        \"                                \n[223] \"                                                        Tunisia                        \"                                     \n[224] \"                                                        Tonga                        \"                                       \n[225] \"                                                        Turkey                        \"                                      \n[226] \"                                                        Trinidad and Tobago                        \"                         \n[227] \"                                                        Tuvalu                        \"                                      \n[228] \"                                                        Taiwan                        \"                                      \n[229] \"                                                        Tanzania                        \"                                    \n[230] \"                                                        Ukraine                        \"                                     \n[231] \"                                                        Uganda                        \"                                      \n[232] \"                                                        U.S. Minor Outlying Islands                        \"                 \n[233] \"                                                        United States                        \"                               \n[234] \"                                                        Uruguay                        \"                                     \n[235] \"                                                        Uzbekistan                        \"                                  \n[236] \"                                                        Vatican City                        \"                                \n[237] \"                                                        Saint Vincent and the Grenadines                        \"            \n[238] \"                                                        Venezuela                        \"                                   \n[239] \"                                                        British Virgin Islands                        \"                      \n[240] \"                                                        U.S. Virgin Islands                        \"                         \n[241] \"                                                        Vietnam                        \"                                     \n[242] \"                                                        Vanuatu                        \"                                     \n[243] \"                                                        Wallis and Futuna                        \"                           \n[244] \"                                                        Samoa                        \"                                       \n[245] \"                                                        Kosovo                        \"                                      \n[246] \"                                                        Yemen                        \"                                       \n[247] \"                                                        Mayotte                        \"                                     \n[248] \"                                                        South Africa                        \"                                \n[249] \"                                                        Zambia                        \"                                      \n[250] \"                                                        Zimbabwe                        \"                                    \n\n# The following has a bug in that it removes ALL spaces.\n# countries = gsub(\" \" , \"\" , without_backslash_n)\n\n# Just remove the spaces that appear BEFORE the country name\ncountries1 = gsub(\"^ *\", \"\", without_backslash_n)\ncountries2 = gsub(\" *$\", \"\", countries1)\n\ncountries = countries2\n\n# alternatively, you can eliminate spaces and \\n characters \n# before and after the text all in one shot\ncountries3 = gsub(\"(^[ \\\\n]*)|([ \\\\n]*$)\", \"\", without_backslash_n)\ncountries3\n\n  [1] \"Andorra\"                                     \n  [2] \"United Arab Emirates\"                        \n  [3] \"Afghanista\"                                  \n  [4] \"Antigua and Barbuda\"                         \n  [5] \"Anguilla\"                                    \n  [6] \"Albania\"                                     \n  [7] \"Armenia\"                                     \n  [8] \"Angola\"                                      \n  [9] \"Antarctica\"                                  \n [10] \"Argentina\"                                   \n [11] \"American Samoa\"                              \n [12] \"Austria\"                                     \n [13] \"Australia\"                                   \n [14] \"Aruba\"                                       \n [15] \"Åland\"                                       \n [16] \"Azerbaija\"                                   \n [17] \"Bosnia and Herzegovina\"                      \n [18] \"Barbados\"                                    \n [19] \"Bangladesh\"                                  \n [20] \"Belgium\"                                     \n [21] \"Burkina Faso\"                                \n [22] \"Bulgaria\"                                    \n [23] \"Bahrai\"                                      \n [24] \"Burundi\"                                     \n [25] \"Beni\"                                        \n [26] \"Saint Barthélemy\"                            \n [27] \"Bermuda\"                                     \n [28] \"Brunei\"                                      \n [29] \"Bolivia\"                                     \n [30] \"Bonaire\"                                     \n [31] \"Brazil\"                                      \n [32] \"Bahamas\"                                     \n [33] \"Bhuta\"                                       \n [34] \"Bouvet Island\"                               \n [35] \"Botswana\"                                    \n [36] \"Belarus\"                                     \n [37] \"Belize\"                                      \n [38] \"Canada\"                                      \n [39] \"Cocos [Keeling] Islands\"                     \n [40] \"Democratic Republic of the Congo\"            \n [41] \"Central African Republic\"                    \n [42] \"Republic of the Congo\"                       \n [43] \"Switzerland\"                                 \n [44] \"Ivory Coast\"                                 \n [45] \"Cook Islands\"                                \n [46] \"Chile\"                                       \n [47] \"Cameroo\"                                     \n [48] \"China\"                                       \n [49] \"Colombia\"                                    \n [50] \"Costa Rica\"                                  \n [51] \"Cuba\"                                        \n [52] \"Cape Verde\"                                  \n [53] \"Curacao\"                                     \n [54] \"Christmas Island\"                            \n [55] \"Cyprus\"                                      \n [56] \"Czech Republic\"                              \n [57] \"Germany\"                                     \n [58] \"Djibouti\"                                    \n [59] \"Denmark\"                                     \n [60] \"Dominica\"                                    \n [61] \"Dominican Republic\"                          \n [62] \"Algeria\"                                     \n [63] \"Ecuador\"                                     \n [64] \"Estonia\"                                     \n [65] \"Egypt\"                                       \n [66] \"Western Sahara\"                              \n [67] \"Eritrea\"                                     \n [68] \"Spai\"                                        \n [69] \"Ethiopia\"                                    \n [70] \"Finland\"                                     \n [71] \"Fiji\"                                        \n [72] \"Falkland Islands\"                            \n [73] \"Micronesia\"                                  \n [74] \"Faroe Islands\"                               \n [75] \"France\"                                      \n [76] \"Gabo\"                                        \n [77] \"United Kingdom\"                              \n [78] \"Grenada\"                                     \n [79] \"Georgia\"                                     \n [80] \"French Guiana\"                               \n [81] \"Guernsey\"                                    \n [82] \"Ghana\"                                       \n [83] \"Gibraltar\"                                   \n [84] \"Greenland\"                                   \n [85] \"Gambia\"                                      \n [86] \"Guinea\"                                      \n [87] \"Guadeloupe\"                                  \n [88] \"Equatorial Guinea\"                           \n [89] \"Greece\"                                      \n [90] \"South Georgia and the South Sandwich Islands\"\n [91] \"Guatemala\"                                   \n [92] \"Guam\"                                        \n [93] \"Guinea-Bissau\"                               \n [94] \"Guyana\"                                      \n [95] \"Hong Kong\"                                   \n [96] \"Heard Island and McDonald Islands\"           \n [97] \"Honduras\"                                    \n [98] \"Croatia\"                                     \n [99] \"Haiti\"                                       \n[100] \"Hungary\"                                     \n[101] \"Indonesia\"                                   \n[102] \"Ireland\"                                     \n[103] \"Israel\"                                      \n[104] \"Isle of Ma\"                                  \n[105] \"India\"                                       \n[106] \"British Indian Ocean Territory\"              \n[107] \"Iraq\"                                        \n[108] \"Ira\"                                         \n[109] \"Iceland\"                                     \n[110] \"Italy\"                                       \n[111] \"Jersey\"                                      \n[112] \"Jamaica\"                                     \n[113] \"Jorda\"                                       \n[114] \"Japa\"                                        \n[115] \"Kenya\"                                       \n[116] \"Kyrgyzsta\"                                   \n[117] \"Cambodia\"                                    \n[118] \"Kiribati\"                                    \n[119] \"Comoros\"                                     \n[120] \"Saint Kitts and Nevis\"                       \n[121] \"North Korea\"                                 \n[122] \"South Korea\"                                 \n[123] \"Kuwait\"                                      \n[124] \"Cayman Islands\"                              \n[125] \"Kazakhsta\"                                   \n[126] \"Laos\"                                        \n[127] \"Lebano\"                                      \n[128] \"Saint Lucia\"                                 \n[129] \"Liechtenstei\"                                \n[130] \"Sri Lanka\"                                   \n[131] \"Liberia\"                                     \n[132] \"Lesotho\"                                     \n[133] \"Lithuania\"                                   \n[134] \"Luxembourg\"                                  \n[135] \"Latvia\"                                      \n[136] \"Libya\"                                       \n[137] \"Morocco\"                                     \n[138] \"Monaco\"                                      \n[139] \"Moldova\"                                     \n[140] \"Montenegro\"                                  \n[141] \"Saint Marti\"                                 \n[142] \"Madagascar\"                                  \n[143] \"Marshall Islands\"                            \n[144] \"Macedonia\"                                   \n[145] \"Mali\"                                        \n[146] \"Myanmar [Burma]\"                             \n[147] \"Mongolia\"                                    \n[148] \"Macao\"                                       \n[149] \"Northern Mariana Islands\"                    \n[150] \"Martinique\"                                  \n[151] \"Mauritania\"                                  \n[152] \"Montserrat\"                                  \n[153] \"Malta\"                                       \n[154] \"Mauritius\"                                   \n[155] \"Maldives\"                                    \n[156] \"Malawi\"                                      \n[157] \"Mexico\"                                      \n[158] \"Malaysia\"                                    \n[159] \"Mozambique\"                                  \n[160] \"Namibia\"                                     \n[161] \"New Caledonia\"                               \n[162] \"Niger\"                                       \n[163] \"Norfolk Island\"                              \n[164] \"Nigeria\"                                     \n[165] \"Nicaragua\"                                   \n[166] \"Netherlands\"                                 \n[167] \"Norway\"                                      \n[168] \"Nepal\"                                       \n[169] \"Nauru\"                                       \n[170] \"Niue\"                                        \n[171] \"New Zealand\"                                 \n[172] \"Oma\"                                         \n[173] \"Panama\"                                      \n[174] \"Peru\"                                        \n[175] \"French Polynesia\"                            \n[176] \"Papua New Guinea\"                            \n[177] \"Philippines\"                                 \n[178] \"Pakista\"                                     \n[179] \"Poland\"                                      \n[180] \"Saint Pierre and Miquelo\"                    \n[181] \"Pitcairn Islands\"                            \n[182] \"Puerto Rico\"                                 \n[183] \"Palestine\"                                   \n[184] \"Portugal\"                                    \n[185] \"Palau\"                                       \n[186] \"Paraguay\"                                    \n[187] \"Qatar\"                                       \n[188] \"Réunio\"                                      \n[189] \"Romania\"                                     \n[190] \"Serbia\"                                      \n[191] \"Russia\"                                      \n[192] \"Rwanda\"                                      \n[193] \"Saudi Arabia\"                                \n[194] \"Solomon Islands\"                             \n[195] \"Seychelles\"                                  \n[196] \"Suda\"                                        \n[197] \"Swede\"                                       \n[198] \"Singapore\"                                   \n[199] \"Saint Helena\"                                \n[200] \"Slovenia\"                                    \n[201] \"Svalbard and Jan Maye\"                       \n[202] \"Slovakia\"                                    \n[203] \"Sierra Leone\"                                \n[204] \"San Marino\"                                  \n[205] \"Senegal\"                                     \n[206] \"Somalia\"                                     \n[207] \"Suriname\"                                    \n[208] \"South Suda\"                                  \n[209] \"São Tomé and Príncipe\"                       \n[210] \"El Salvador\"                                 \n[211] \"Sint Maarte\"                                 \n[212] \"Syria\"                                       \n[213] \"Swaziland\"                                   \n[214] \"Turks and Caicos Islands\"                    \n[215] \"Chad\"                                        \n[216] \"French Southern Territories\"                 \n[217] \"Togo\"                                        \n[218] \"Thailand\"                                    \n[219] \"Tajikista\"                                   \n[220] \"Tokelau\"                                     \n[221] \"East Timor\"                                  \n[222] \"Turkmenista\"                                 \n[223] \"Tunisia\"                                     \n[224] \"Tonga\"                                       \n[225] \"Turkey\"                                      \n[226] \"Trinidad and Tobago\"                         \n[227] \"Tuvalu\"                                      \n[228] \"Taiwa\"                                       \n[229] \"Tanzania\"                                    \n[230] \"Ukraine\"                                     \n[231] \"Uganda\"                                      \n[232] \"U.S. Minor Outlying Islands\"                 \n[233] \"United States\"                               \n[234] \"Uruguay\"                                     \n[235] \"Uzbekista\"                                   \n[236] \"Vatican City\"                                \n[237] \"Saint Vincent and the Grenadines\"            \n[238] \"Venezuela\"                                   \n[239] \"British Virgin Islands\"                      \n[240] \"U.S. Virgin Islands\"                         \n[241] \"Vietnam\"                                     \n[242] \"Vanuatu\"                                     \n[243] \"Wallis and Futuna\"                           \n[244] \"Samoa\"                                       \n[245] \"Kosovo\"                                      \n[246] \"Yeme\"                                        \n[247] \"Mayotte\"                                     \n[248] \"South Africa\"                                \n[249] \"Zambia\"                                      \n[250] \"Zimbabwe\"",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#get-all-data-into-a-dataframe",
    "href": "web-000400-webscrapingContinued-015.html#get-all-data-into-a-dataframe",
    "title": "31  Web Scraping with R",
    "section": "31.9 Get all data into a dataframe",
    "text": "31.9 Get all data into a dataframe\n\n########################################################\n#\n# Now that we understand the basics we can get\n# all of the country data and put it in a dataframe\n#\n########################################################\n\nurl = \"https://scrapethissite.com/pages/simple/\"\n\nthe_full_html = read_html(url)\n\ncountries = the_full_html %&gt;%\n              html_elements( \".country-name\" ) %&gt;%\n              html_text()\n\ncapitals = the_full_html %&gt;%\n              html_elements( \".country-capital\" ) %&gt;%\n              html_text()\n\npopulation = the_full_html %&gt;%\n  html_elements( \".country-population\" ) %&gt;%\n  html_text()\n\narea = the_full_html %&gt;%\n  html_elements( \".country-area\" ) %&gt;%\n  html_text()\n\n\ncountries\n\n  [1] \"\\n                            \\n                            Andorra\\n                        \"                                     \n  [2] \"\\n                            \\n                            United Arab Emirates\\n                        \"                        \n  [3] \"\\n                            \\n                            Afghanistan\\n                        \"                                 \n  [4] \"\\n                            \\n                            Antigua and Barbuda\\n                        \"                         \n  [5] \"\\n                            \\n                            Anguilla\\n                        \"                                    \n  [6] \"\\n                            \\n                            Albania\\n                        \"                                     \n  [7] \"\\n                            \\n                            Armenia\\n                        \"                                     \n  [8] \"\\n                            \\n                            Angola\\n                        \"                                      \n  [9] \"\\n                            \\n                            Antarctica\\n                        \"                                  \n [10] \"\\n                            \\n                            Argentina\\n                        \"                                   \n [11] \"\\n                            \\n                            American Samoa\\n                        \"                              \n [12] \"\\n                            \\n                            Austria\\n                        \"                                     \n [13] \"\\n                            \\n                            Australia\\n                        \"                                   \n [14] \"\\n                            \\n                            Aruba\\n                        \"                                       \n [15] \"\\n                            \\n                            Åland\\n                        \"                                       \n [16] \"\\n                            \\n                            Azerbaijan\\n                        \"                                  \n [17] \"\\n                            \\n                            Bosnia and Herzegovina\\n                        \"                      \n [18] \"\\n                            \\n                            Barbados\\n                        \"                                    \n [19] \"\\n                            \\n                            Bangladesh\\n                        \"                                  \n [20] \"\\n                            \\n                            Belgium\\n                        \"                                     \n [21] \"\\n                            \\n                            Burkina Faso\\n                        \"                                \n [22] \"\\n                            \\n                            Bulgaria\\n                        \"                                    \n [23] \"\\n                            \\n                            Bahrain\\n                        \"                                     \n [24] \"\\n                            \\n                            Burundi\\n                        \"                                     \n [25] \"\\n                            \\n                            Benin\\n                        \"                                       \n [26] \"\\n                            \\n                            Saint Barthélemy\\n                        \"                            \n [27] \"\\n                            \\n                            Bermuda\\n                        \"                                     \n [28] \"\\n                            \\n                            Brunei\\n                        \"                                      \n [29] \"\\n                            \\n                            Bolivia\\n                        \"                                     \n [30] \"\\n                            \\n                            Bonaire\\n                        \"                                     \n [31] \"\\n                            \\n                            Brazil\\n                        \"                                      \n [32] \"\\n                            \\n                            Bahamas\\n                        \"                                     \n [33] \"\\n                            \\n                            Bhutan\\n                        \"                                      \n [34] \"\\n                            \\n                            Bouvet Island\\n                        \"                               \n [35] \"\\n                            \\n                            Botswana\\n                        \"                                    \n [36] \"\\n                            \\n                            Belarus\\n                        \"                                     \n [37] \"\\n                            \\n                            Belize\\n                        \"                                      \n [38] \"\\n                            \\n                            Canada\\n                        \"                                      \n [39] \"\\n                            \\n                            Cocos [Keeling] Islands\\n                        \"                     \n [40] \"\\n                            \\n                            Democratic Republic of the Congo\\n                        \"            \n [41] \"\\n                            \\n                            Central African Republic\\n                        \"                    \n [42] \"\\n                            \\n                            Republic of the Congo\\n                        \"                       \n [43] \"\\n                            \\n                            Switzerland\\n                        \"                                 \n [44] \"\\n                            \\n                            Ivory Coast\\n                        \"                                 \n [45] \"\\n                            \\n                            Cook Islands\\n                        \"                                \n [46] \"\\n                            \\n                            Chile\\n                        \"                                       \n [47] \"\\n                            \\n                            Cameroon\\n                        \"                                    \n [48] \"\\n                            \\n                            China\\n                        \"                                       \n [49] \"\\n                            \\n                            Colombia\\n                        \"                                    \n [50] \"\\n                            \\n                            Costa Rica\\n                        \"                                  \n [51] \"\\n                            \\n                            Cuba\\n                        \"                                        \n [52] \"\\n                            \\n                            Cape Verde\\n                        \"                                  \n [53] \"\\n                            \\n                            Curacao\\n                        \"                                     \n [54] \"\\n                            \\n                            Christmas Island\\n                        \"                            \n [55] \"\\n                            \\n                            Cyprus\\n                        \"                                      \n [56] \"\\n                            \\n                            Czech Republic\\n                        \"                              \n [57] \"\\n                            \\n                            Germany\\n                        \"                                     \n [58] \"\\n                            \\n                            Djibouti\\n                        \"                                    \n [59] \"\\n                            \\n                            Denmark\\n                        \"                                     \n [60] \"\\n                            \\n                            Dominica\\n                        \"                                    \n [61] \"\\n                            \\n                            Dominican Republic\\n                        \"                          \n [62] \"\\n                            \\n                            Algeria\\n                        \"                                     \n [63] \"\\n                            \\n                            Ecuador\\n                        \"                                     \n [64] \"\\n                            \\n                            Estonia\\n                        \"                                     \n [65] \"\\n                            \\n                            Egypt\\n                        \"                                       \n [66] \"\\n                            \\n                            Western Sahara\\n                        \"                              \n [67] \"\\n                            \\n                            Eritrea\\n                        \"                                     \n [68] \"\\n                            \\n                            Spain\\n                        \"                                       \n [69] \"\\n                            \\n                            Ethiopia\\n                        \"                                    \n [70] \"\\n                            \\n                            Finland\\n                        \"                                     \n [71] \"\\n                            \\n                            Fiji\\n                        \"                                        \n [72] \"\\n                            \\n                            Falkland Islands\\n                        \"                            \n [73] \"\\n                            \\n                            Micronesia\\n                        \"                                  \n [74] \"\\n                            \\n                            Faroe Islands\\n                        \"                               \n [75] \"\\n                            \\n                            France\\n                        \"                                      \n [76] \"\\n                            \\n                            Gabon\\n                        \"                                       \n [77] \"\\n                            \\n                            United Kingdom\\n                        \"                              \n [78] \"\\n                            \\n                            Grenada\\n                        \"                                     \n [79] \"\\n                            \\n                            Georgia\\n                        \"                                     \n [80] \"\\n                            \\n                            French Guiana\\n                        \"                               \n [81] \"\\n                            \\n                            Guernsey\\n                        \"                                    \n [82] \"\\n                            \\n                            Ghana\\n                        \"                                       \n [83] \"\\n                            \\n                            Gibraltar\\n                        \"                                   \n [84] \"\\n                            \\n                            Greenland\\n                        \"                                   \n [85] \"\\n                            \\n                            Gambia\\n                        \"                                      \n [86] \"\\n                            \\n                            Guinea\\n                        \"                                      \n [87] \"\\n                            \\n                            Guadeloupe\\n                        \"                                  \n [88] \"\\n                            \\n                            Equatorial Guinea\\n                        \"                           \n [89] \"\\n                            \\n                            Greece\\n                        \"                                      \n [90] \"\\n                            \\n                            South Georgia and the South Sandwich Islands\\n                        \"\n [91] \"\\n                            \\n                            Guatemala\\n                        \"                                   \n [92] \"\\n                            \\n                            Guam\\n                        \"                                        \n [93] \"\\n                            \\n                            Guinea-Bissau\\n                        \"                               \n [94] \"\\n                            \\n                            Guyana\\n                        \"                                      \n [95] \"\\n                            \\n                            Hong Kong\\n                        \"                                   \n [96] \"\\n                            \\n                            Heard Island and McDonald Islands\\n                        \"           \n [97] \"\\n                            \\n                            Honduras\\n                        \"                                    \n [98] \"\\n                            \\n                            Croatia\\n                        \"                                     \n [99] \"\\n                            \\n                            Haiti\\n                        \"                                       \n[100] \"\\n                            \\n                            Hungary\\n                        \"                                     \n[101] \"\\n                            \\n                            Indonesia\\n                        \"                                   \n[102] \"\\n                            \\n                            Ireland\\n                        \"                                     \n[103] \"\\n                            \\n                            Israel\\n                        \"                                      \n[104] \"\\n                            \\n                            Isle of Man\\n                        \"                                 \n[105] \"\\n                            \\n                            India\\n                        \"                                       \n[106] \"\\n                            \\n                            British Indian Ocean Territory\\n                        \"              \n[107] \"\\n                            \\n                            Iraq\\n                        \"                                        \n[108] \"\\n                            \\n                            Iran\\n                        \"                                        \n[109] \"\\n                            \\n                            Iceland\\n                        \"                                     \n[110] \"\\n                            \\n                            Italy\\n                        \"                                       \n[111] \"\\n                            \\n                            Jersey\\n                        \"                                      \n[112] \"\\n                            \\n                            Jamaica\\n                        \"                                     \n[113] \"\\n                            \\n                            Jordan\\n                        \"                                      \n[114] \"\\n                            \\n                            Japan\\n                        \"                                       \n[115] \"\\n                            \\n                            Kenya\\n                        \"                                       \n[116] \"\\n                            \\n                            Kyrgyzstan\\n                        \"                                  \n[117] \"\\n                            \\n                            Cambodia\\n                        \"                                    \n[118] \"\\n                            \\n                            Kiribati\\n                        \"                                    \n[119] \"\\n                            \\n                            Comoros\\n                        \"                                     \n[120] \"\\n                            \\n                            Saint Kitts and Nevis\\n                        \"                       \n[121] \"\\n                            \\n                            North Korea\\n                        \"                                 \n[122] \"\\n                            \\n                            South Korea\\n                        \"                                 \n[123] \"\\n                            \\n                            Kuwait\\n                        \"                                      \n[124] \"\\n                            \\n                            Cayman Islands\\n                        \"                              \n[125] \"\\n                            \\n                            Kazakhstan\\n                        \"                                  \n[126] \"\\n                            \\n                            Laos\\n                        \"                                        \n[127] \"\\n                            \\n                            Lebanon\\n                        \"                                     \n[128] \"\\n                            \\n                            Saint Lucia\\n                        \"                                 \n[129] \"\\n                            \\n                            Liechtenstein\\n                        \"                               \n[130] \"\\n                            \\n                            Sri Lanka\\n                        \"                                   \n[131] \"\\n                            \\n                            Liberia\\n                        \"                                     \n[132] \"\\n                            \\n                            Lesotho\\n                        \"                                     \n[133] \"\\n                            \\n                            Lithuania\\n                        \"                                   \n[134] \"\\n                            \\n                            Luxembourg\\n                        \"                                  \n[135] \"\\n                            \\n                            Latvia\\n                        \"                                      \n[136] \"\\n                            \\n                            Libya\\n                        \"                                       \n[137] \"\\n                            \\n                            Morocco\\n                        \"                                     \n[138] \"\\n                            \\n                            Monaco\\n                        \"                                      \n[139] \"\\n                            \\n                            Moldova\\n                        \"                                     \n[140] \"\\n                            \\n                            Montenegro\\n                        \"                                  \n[141] \"\\n                            \\n                            Saint Martin\\n                        \"                                \n[142] \"\\n                            \\n                            Madagascar\\n                        \"                                  \n[143] \"\\n                            \\n                            Marshall Islands\\n                        \"                            \n[144] \"\\n                            \\n                            Macedonia\\n                        \"                                   \n[145] \"\\n                            \\n                            Mali\\n                        \"                                        \n[146] \"\\n                            \\n                            Myanmar [Burma]\\n                        \"                             \n[147] \"\\n                            \\n                            Mongolia\\n                        \"                                    \n[148] \"\\n                            \\n                            Macao\\n                        \"                                       \n[149] \"\\n                            \\n                            Northern Mariana Islands\\n                        \"                    \n[150] \"\\n                            \\n                            Martinique\\n                        \"                                  \n[151] \"\\n                            \\n                            Mauritania\\n                        \"                                  \n[152] \"\\n                            \\n                            Montserrat\\n                        \"                                  \n[153] \"\\n                            \\n                            Malta\\n                        \"                                       \n[154] \"\\n                            \\n                            Mauritius\\n                        \"                                   \n[155] \"\\n                            \\n                            Maldives\\n                        \"                                    \n[156] \"\\n                            \\n                            Malawi\\n                        \"                                      \n[157] \"\\n                            \\n                            Mexico\\n                        \"                                      \n[158] \"\\n                            \\n                            Malaysia\\n                        \"                                    \n[159] \"\\n                            \\n                            Mozambique\\n                        \"                                  \n[160] \"\\n                            \\n                            Namibia\\n                        \"                                     \n[161] \"\\n                            \\n                            New Caledonia\\n                        \"                               \n[162] \"\\n                            \\n                            Niger\\n                        \"                                       \n[163] \"\\n                            \\n                            Norfolk Island\\n                        \"                              \n[164] \"\\n                            \\n                            Nigeria\\n                        \"                                     \n[165] \"\\n                            \\n                            Nicaragua\\n                        \"                                   \n[166] \"\\n                            \\n                            Netherlands\\n                        \"                                 \n[167] \"\\n                            \\n                            Norway\\n                        \"                                      \n[168] \"\\n                            \\n                            Nepal\\n                        \"                                       \n[169] \"\\n                            \\n                            Nauru\\n                        \"                                       \n[170] \"\\n                            \\n                            Niue\\n                        \"                                        \n[171] \"\\n                            \\n                            New Zealand\\n                        \"                                 \n[172] \"\\n                            \\n                            Oman\\n                        \"                                        \n[173] \"\\n                            \\n                            Panama\\n                        \"                                      \n[174] \"\\n                            \\n                            Peru\\n                        \"                                        \n[175] \"\\n                            \\n                            French Polynesia\\n                        \"                            \n[176] \"\\n                            \\n                            Papua New Guinea\\n                        \"                            \n[177] \"\\n                            \\n                            Philippines\\n                        \"                                 \n[178] \"\\n                            \\n                            Pakistan\\n                        \"                                    \n[179] \"\\n                            \\n                            Poland\\n                        \"                                      \n[180] \"\\n                            \\n                            Saint Pierre and Miquelon\\n                        \"                   \n[181] \"\\n                            \\n                            Pitcairn Islands\\n                        \"                            \n[182] \"\\n                            \\n                            Puerto Rico\\n                        \"                                 \n[183] \"\\n                            \\n                            Palestine\\n                        \"                                   \n[184] \"\\n                            \\n                            Portugal\\n                        \"                                    \n[185] \"\\n                            \\n                            Palau\\n                        \"                                       \n[186] \"\\n                            \\n                            Paraguay\\n                        \"                                    \n[187] \"\\n                            \\n                            Qatar\\n                        \"                                       \n[188] \"\\n                            \\n                            Réunion\\n                        \"                                     \n[189] \"\\n                            \\n                            Romania\\n                        \"                                     \n[190] \"\\n                            \\n                            Serbia\\n                        \"                                      \n[191] \"\\n                            \\n                            Russia\\n                        \"                                      \n[192] \"\\n                            \\n                            Rwanda\\n                        \"                                      \n[193] \"\\n                            \\n                            Saudi Arabia\\n                        \"                                \n[194] \"\\n                            \\n                            Solomon Islands\\n                        \"                             \n[195] \"\\n                            \\n                            Seychelles\\n                        \"                                  \n[196] \"\\n                            \\n                            Sudan\\n                        \"                                       \n[197] \"\\n                            \\n                            Sweden\\n                        \"                                      \n[198] \"\\n                            \\n                            Singapore\\n                        \"                                   \n[199] \"\\n                            \\n                            Saint Helena\\n                        \"                                \n[200] \"\\n                            \\n                            Slovenia\\n                        \"                                    \n[201] \"\\n                            \\n                            Svalbard and Jan Mayen\\n                        \"                      \n[202] \"\\n                            \\n                            Slovakia\\n                        \"                                    \n[203] \"\\n                            \\n                            Sierra Leone\\n                        \"                                \n[204] \"\\n                            \\n                            San Marino\\n                        \"                                  \n[205] \"\\n                            \\n                            Senegal\\n                        \"                                     \n[206] \"\\n                            \\n                            Somalia\\n                        \"                                     \n[207] \"\\n                            \\n                            Suriname\\n                        \"                                    \n[208] \"\\n                            \\n                            South Sudan\\n                        \"                                 \n[209] \"\\n                            \\n                            São Tomé and Príncipe\\n                        \"                       \n[210] \"\\n                            \\n                            El Salvador\\n                        \"                                 \n[211] \"\\n                            \\n                            Sint Maarten\\n                        \"                                \n[212] \"\\n                            \\n                            Syria\\n                        \"                                       \n[213] \"\\n                            \\n                            Swaziland\\n                        \"                                   \n[214] \"\\n                            \\n                            Turks and Caicos Islands\\n                        \"                    \n[215] \"\\n                            \\n                            Chad\\n                        \"                                        \n[216] \"\\n                            \\n                            French Southern Territories\\n                        \"                 \n[217] \"\\n                            \\n                            Togo\\n                        \"                                        \n[218] \"\\n                            \\n                            Thailand\\n                        \"                                    \n[219] \"\\n                            \\n                            Tajikistan\\n                        \"                                  \n[220] \"\\n                            \\n                            Tokelau\\n                        \"                                     \n[221] \"\\n                            \\n                            East Timor\\n                        \"                                  \n[222] \"\\n                            \\n                            Turkmenistan\\n                        \"                                \n[223] \"\\n                            \\n                            Tunisia\\n                        \"                                     \n[224] \"\\n                            \\n                            Tonga\\n                        \"                                       \n[225] \"\\n                            \\n                            Turkey\\n                        \"                                      \n[226] \"\\n                            \\n                            Trinidad and Tobago\\n                        \"                         \n[227] \"\\n                            \\n                            Tuvalu\\n                        \"                                      \n[228] \"\\n                            \\n                            Taiwan\\n                        \"                                      \n[229] \"\\n                            \\n                            Tanzania\\n                        \"                                    \n[230] \"\\n                            \\n                            Ukraine\\n                        \"                                     \n[231] \"\\n                            \\n                            Uganda\\n                        \"                                      \n[232] \"\\n                            \\n                            U.S. Minor Outlying Islands\\n                        \"                 \n[233] \"\\n                            \\n                            United States\\n                        \"                               \n[234] \"\\n                            \\n                            Uruguay\\n                        \"                                     \n[235] \"\\n                            \\n                            Uzbekistan\\n                        \"                                  \n[236] \"\\n                            \\n                            Vatican City\\n                        \"                                \n[237] \"\\n                            \\n                            Saint Vincent and the Grenadines\\n                        \"            \n[238] \"\\n                            \\n                            Venezuela\\n                        \"                                   \n[239] \"\\n                            \\n                            British Virgin Islands\\n                        \"                      \n[240] \"\\n                            \\n                            U.S. Virgin Islands\\n                        \"                         \n[241] \"\\n                            \\n                            Vietnam\\n                        \"                                     \n[242] \"\\n                            \\n                            Vanuatu\\n                        \"                                     \n[243] \"\\n                            \\n                            Wallis and Futuna\\n                        \"                           \n[244] \"\\n                            \\n                            Samoa\\n                        \"                                       \n[245] \"\\n                            \\n                            Kosovo\\n                        \"                                      \n[246] \"\\n                            \\n                            Yemen\\n                        \"                                       \n[247] \"\\n                            \\n                            Mayotte\\n                        \"                                     \n[248] \"\\n                            \\n                            South Africa\\n                        \"                                \n[249] \"\\n                            \\n                            Zambia\\n                        \"                                      \n[250] \"\\n                            \\n                            Zimbabwe\\n                        \"                                    \n\n# remove the spaces and newline characters from countries\ncountries= gsub(\"\\\\n\", \"\", countries)\ncountries= gsub(\"(^ *)|( *$)\", \"\" , countries)\ncountries\n\n  [1] \"Andorra\"                                     \n  [2] \"United Arab Emirates\"                        \n  [3] \"Afghanistan\"                                 \n  [4] \"Antigua and Barbuda\"                         \n  [5] \"Anguilla\"                                    \n  [6] \"Albania\"                                     \n  [7] \"Armenia\"                                     \n  [8] \"Angola\"                                      \n  [9] \"Antarctica\"                                  \n [10] \"Argentina\"                                   \n [11] \"American Samoa\"                              \n [12] \"Austria\"                                     \n [13] \"Australia\"                                   \n [14] \"Aruba\"                                       \n [15] \"Åland\"                                       \n [16] \"Azerbaijan\"                                  \n [17] \"Bosnia and Herzegovina\"                      \n [18] \"Barbados\"                                    \n [19] \"Bangladesh\"                                  \n [20] \"Belgium\"                                     \n [21] \"Burkina Faso\"                                \n [22] \"Bulgaria\"                                    \n [23] \"Bahrain\"                                     \n [24] \"Burundi\"                                     \n [25] \"Benin\"                                       \n [26] \"Saint Barthélemy\"                            \n [27] \"Bermuda\"                                     \n [28] \"Brunei\"                                      \n [29] \"Bolivia\"                                     \n [30] \"Bonaire\"                                     \n [31] \"Brazil\"                                      \n [32] \"Bahamas\"                                     \n [33] \"Bhutan\"                                      \n [34] \"Bouvet Island\"                               \n [35] \"Botswana\"                                    \n [36] \"Belarus\"                                     \n [37] \"Belize\"                                      \n [38] \"Canada\"                                      \n [39] \"Cocos [Keeling] Islands\"                     \n [40] \"Democratic Republic of the Congo\"            \n [41] \"Central African Republic\"                    \n [42] \"Republic of the Congo\"                       \n [43] \"Switzerland\"                                 \n [44] \"Ivory Coast\"                                 \n [45] \"Cook Islands\"                                \n [46] \"Chile\"                                       \n [47] \"Cameroon\"                                    \n [48] \"China\"                                       \n [49] \"Colombia\"                                    \n [50] \"Costa Rica\"                                  \n [51] \"Cuba\"                                        \n [52] \"Cape Verde\"                                  \n [53] \"Curacao\"                                     \n [54] \"Christmas Island\"                            \n [55] \"Cyprus\"                                      \n [56] \"Czech Republic\"                              \n [57] \"Germany\"                                     \n [58] \"Djibouti\"                                    \n [59] \"Denmark\"                                     \n [60] \"Dominica\"                                    \n [61] \"Dominican Republic\"                          \n [62] \"Algeria\"                                     \n [63] \"Ecuador\"                                     \n [64] \"Estonia\"                                     \n [65] \"Egypt\"                                       \n [66] \"Western Sahara\"                              \n [67] \"Eritrea\"                                     \n [68] \"Spain\"                                       \n [69] \"Ethiopia\"                                    \n [70] \"Finland\"                                     \n [71] \"Fiji\"                                        \n [72] \"Falkland Islands\"                            \n [73] \"Micronesia\"                                  \n [74] \"Faroe Islands\"                               \n [75] \"France\"                                      \n [76] \"Gabon\"                                       \n [77] \"United Kingdom\"                              \n [78] \"Grenada\"                                     \n [79] \"Georgia\"                                     \n [80] \"French Guiana\"                               \n [81] \"Guernsey\"                                    \n [82] \"Ghana\"                                       \n [83] \"Gibraltar\"                                   \n [84] \"Greenland\"                                   \n [85] \"Gambia\"                                      \n [86] \"Guinea\"                                      \n [87] \"Guadeloupe\"                                  \n [88] \"Equatorial Guinea\"                           \n [89] \"Greece\"                                      \n [90] \"South Georgia and the South Sandwich Islands\"\n [91] \"Guatemala\"                                   \n [92] \"Guam\"                                        \n [93] \"Guinea-Bissau\"                               \n [94] \"Guyana\"                                      \n [95] \"Hong Kong\"                                   \n [96] \"Heard Island and McDonald Islands\"           \n [97] \"Honduras\"                                    \n [98] \"Croatia\"                                     \n [99] \"Haiti\"                                       \n[100] \"Hungary\"                                     \n[101] \"Indonesia\"                                   \n[102] \"Ireland\"                                     \n[103] \"Israel\"                                      \n[104] \"Isle of Man\"                                 \n[105] \"India\"                                       \n[106] \"British Indian Ocean Territory\"              \n[107] \"Iraq\"                                        \n[108] \"Iran\"                                        \n[109] \"Iceland\"                                     \n[110] \"Italy\"                                       \n[111] \"Jersey\"                                      \n[112] \"Jamaica\"                                     \n[113] \"Jordan\"                                      \n[114] \"Japan\"                                       \n[115] \"Kenya\"                                       \n[116] \"Kyrgyzstan\"                                  \n[117] \"Cambodia\"                                    \n[118] \"Kiribati\"                                    \n[119] \"Comoros\"                                     \n[120] \"Saint Kitts and Nevis\"                       \n[121] \"North Korea\"                                 \n[122] \"South Korea\"                                 \n[123] \"Kuwait\"                                      \n[124] \"Cayman Islands\"                              \n[125] \"Kazakhstan\"                                  \n[126] \"Laos\"                                        \n[127] \"Lebanon\"                                     \n[128] \"Saint Lucia\"                                 \n[129] \"Liechtenstein\"                               \n[130] \"Sri Lanka\"                                   \n[131] \"Liberia\"                                     \n[132] \"Lesotho\"                                     \n[133] \"Lithuania\"                                   \n[134] \"Luxembourg\"                                  \n[135] \"Latvia\"                                      \n[136] \"Libya\"                                       \n[137] \"Morocco\"                                     \n[138] \"Monaco\"                                      \n[139] \"Moldova\"                                     \n[140] \"Montenegro\"                                  \n[141] \"Saint Martin\"                                \n[142] \"Madagascar\"                                  \n[143] \"Marshall Islands\"                            \n[144] \"Macedonia\"                                   \n[145] \"Mali\"                                        \n[146] \"Myanmar [Burma]\"                             \n[147] \"Mongolia\"                                    \n[148] \"Macao\"                                       \n[149] \"Northern Mariana Islands\"                    \n[150] \"Martinique\"                                  \n[151] \"Mauritania\"                                  \n[152] \"Montserrat\"                                  \n[153] \"Malta\"                                       \n[154] \"Mauritius\"                                   \n[155] \"Maldives\"                                    \n[156] \"Malawi\"                                      \n[157] \"Mexico\"                                      \n[158] \"Malaysia\"                                    \n[159] \"Mozambique\"                                  \n[160] \"Namibia\"                                     \n[161] \"New Caledonia\"                               \n[162] \"Niger\"                                       \n[163] \"Norfolk Island\"                              \n[164] \"Nigeria\"                                     \n[165] \"Nicaragua\"                                   \n[166] \"Netherlands\"                                 \n[167] \"Norway\"                                      \n[168] \"Nepal\"                                       \n[169] \"Nauru\"                                       \n[170] \"Niue\"                                        \n[171] \"New Zealand\"                                 \n[172] \"Oman\"                                        \n[173] \"Panama\"                                      \n[174] \"Peru\"                                        \n[175] \"French Polynesia\"                            \n[176] \"Papua New Guinea\"                            \n[177] \"Philippines\"                                 \n[178] \"Pakistan\"                                    \n[179] \"Poland\"                                      \n[180] \"Saint Pierre and Miquelon\"                   \n[181] \"Pitcairn Islands\"                            \n[182] \"Puerto Rico\"                                 \n[183] \"Palestine\"                                   \n[184] \"Portugal\"                                    \n[185] \"Palau\"                                       \n[186] \"Paraguay\"                                    \n[187] \"Qatar\"                                       \n[188] \"Réunion\"                                     \n[189] \"Romania\"                                     \n[190] \"Serbia\"                                      \n[191] \"Russia\"                                      \n[192] \"Rwanda\"                                      \n[193] \"Saudi Arabia\"                                \n[194] \"Solomon Islands\"                             \n[195] \"Seychelles\"                                  \n[196] \"Sudan\"                                       \n[197] \"Sweden\"                                      \n[198] \"Singapore\"                                   \n[199] \"Saint Helena\"                                \n[200] \"Slovenia\"                                    \n[201] \"Svalbard and Jan Mayen\"                      \n[202] \"Slovakia\"                                    \n[203] \"Sierra Leone\"                                \n[204] \"San Marino\"                                  \n[205] \"Senegal\"                                     \n[206] \"Somalia\"                                     \n[207] \"Suriname\"                                    \n[208] \"South Sudan\"                                 \n[209] \"São Tomé and Príncipe\"                       \n[210] \"El Salvador\"                                 \n[211] \"Sint Maarten\"                                \n[212] \"Syria\"                                       \n[213] \"Swaziland\"                                   \n[214] \"Turks and Caicos Islands\"                    \n[215] \"Chad\"                                        \n[216] \"French Southern Territories\"                 \n[217] \"Togo\"                                        \n[218] \"Thailand\"                                    \n[219] \"Tajikistan\"                                  \n[220] \"Tokelau\"                                     \n[221] \"East Timor\"                                  \n[222] \"Turkmenistan\"                                \n[223] \"Tunisia\"                                     \n[224] \"Tonga\"                                       \n[225] \"Turkey\"                                      \n[226] \"Trinidad and Tobago\"                         \n[227] \"Tuvalu\"                                      \n[228] \"Taiwan\"                                      \n[229] \"Tanzania\"                                    \n[230] \"Ukraine\"                                     \n[231] \"Uganda\"                                      \n[232] \"U.S. Minor Outlying Islands\"                 \n[233] \"United States\"                               \n[234] \"Uruguay\"                                     \n[235] \"Uzbekistan\"                                  \n[236] \"Vatican City\"                                \n[237] \"Saint Vincent and the Grenadines\"            \n[238] \"Venezuela\"                                   \n[239] \"British Virgin Islands\"                      \n[240] \"U.S. Virgin Islands\"                         \n[241] \"Vietnam\"                                     \n[242] \"Vanuatu\"                                     \n[243] \"Wallis and Futuna\"                           \n[244] \"Samoa\"                                       \n[245] \"Kosovo\"                                      \n[246] \"Yemen\"                                       \n[247] \"Mayotte\"                                     \n[248] \"South Africa\"                                \n[249] \"Zambia\"                                      \n[250] \"Zimbabwe\"                                    \n\nhead(countries,5)  # the United Arab Emirates has no spaces! Let's fix that ...\n\n[1] \"Andorra\"              \"United Arab Emirates\" \"Afghanistan\"         \n[4] \"Antigua and Barbuda\"  \"Anguilla\"            \n\ncountries = the_full_html %&gt;%\n  html_elements( \".country-name\" ) %&gt;%\n  html_text()\n\n# remove the spaces and newline characters from countries\n# Do not remove spaces between words\ncountries= gsub(\"\\\\n\", \"\", countries)\ncountries= gsub(\"^ *\", \"\" , countries)  # get rid of spaces before the text\ncountries= gsub(\" *$\", \"\" , countries)  # get rid of spaces after the text\ncountries\n\n  [1] \"Andorra\"                                     \n  [2] \"United Arab Emirates\"                        \n  [3] \"Afghanistan\"                                 \n  [4] \"Antigua and Barbuda\"                         \n  [5] \"Anguilla\"                                    \n  [6] \"Albania\"                                     \n  [7] \"Armenia\"                                     \n  [8] \"Angola\"                                      \n  [9] \"Antarctica\"                                  \n [10] \"Argentina\"                                   \n [11] \"American Samoa\"                              \n [12] \"Austria\"                                     \n [13] \"Australia\"                                   \n [14] \"Aruba\"                                       \n [15] \"Åland\"                                       \n [16] \"Azerbaijan\"                                  \n [17] \"Bosnia and Herzegovina\"                      \n [18] \"Barbados\"                                    \n [19] \"Bangladesh\"                                  \n [20] \"Belgium\"                                     \n [21] \"Burkina Faso\"                                \n [22] \"Bulgaria\"                                    \n [23] \"Bahrain\"                                     \n [24] \"Burundi\"                                     \n [25] \"Benin\"                                       \n [26] \"Saint Barthélemy\"                            \n [27] \"Bermuda\"                                     \n [28] \"Brunei\"                                      \n [29] \"Bolivia\"                                     \n [30] \"Bonaire\"                                     \n [31] \"Brazil\"                                      \n [32] \"Bahamas\"                                     \n [33] \"Bhutan\"                                      \n [34] \"Bouvet Island\"                               \n [35] \"Botswana\"                                    \n [36] \"Belarus\"                                     \n [37] \"Belize\"                                      \n [38] \"Canada\"                                      \n [39] \"Cocos [Keeling] Islands\"                     \n [40] \"Democratic Republic of the Congo\"            \n [41] \"Central African Republic\"                    \n [42] \"Republic of the Congo\"                       \n [43] \"Switzerland\"                                 \n [44] \"Ivory Coast\"                                 \n [45] \"Cook Islands\"                                \n [46] \"Chile\"                                       \n [47] \"Cameroon\"                                    \n [48] \"China\"                                       \n [49] \"Colombia\"                                    \n [50] \"Costa Rica\"                                  \n [51] \"Cuba\"                                        \n [52] \"Cape Verde\"                                  \n [53] \"Curacao\"                                     \n [54] \"Christmas Island\"                            \n [55] \"Cyprus\"                                      \n [56] \"Czech Republic\"                              \n [57] \"Germany\"                                     \n [58] \"Djibouti\"                                    \n [59] \"Denmark\"                                     \n [60] \"Dominica\"                                    \n [61] \"Dominican Republic\"                          \n [62] \"Algeria\"                                     \n [63] \"Ecuador\"                                     \n [64] \"Estonia\"                                     \n [65] \"Egypt\"                                       \n [66] \"Western Sahara\"                              \n [67] \"Eritrea\"                                     \n [68] \"Spain\"                                       \n [69] \"Ethiopia\"                                    \n [70] \"Finland\"                                     \n [71] \"Fiji\"                                        \n [72] \"Falkland Islands\"                            \n [73] \"Micronesia\"                                  \n [74] \"Faroe Islands\"                               \n [75] \"France\"                                      \n [76] \"Gabon\"                                       \n [77] \"United Kingdom\"                              \n [78] \"Grenada\"                                     \n [79] \"Georgia\"                                     \n [80] \"French Guiana\"                               \n [81] \"Guernsey\"                                    \n [82] \"Ghana\"                                       \n [83] \"Gibraltar\"                                   \n [84] \"Greenland\"                                   \n [85] \"Gambia\"                                      \n [86] \"Guinea\"                                      \n [87] \"Guadeloupe\"                                  \n [88] \"Equatorial Guinea\"                           \n [89] \"Greece\"                                      \n [90] \"South Georgia and the South Sandwich Islands\"\n [91] \"Guatemala\"                                   \n [92] \"Guam\"                                        \n [93] \"Guinea-Bissau\"                               \n [94] \"Guyana\"                                      \n [95] \"Hong Kong\"                                   \n [96] \"Heard Island and McDonald Islands\"           \n [97] \"Honduras\"                                    \n [98] \"Croatia\"                                     \n [99] \"Haiti\"                                       \n[100] \"Hungary\"                                     \n[101] \"Indonesia\"                                   \n[102] \"Ireland\"                                     \n[103] \"Israel\"                                      \n[104] \"Isle of Man\"                                 \n[105] \"India\"                                       \n[106] \"British Indian Ocean Territory\"              \n[107] \"Iraq\"                                        \n[108] \"Iran\"                                        \n[109] \"Iceland\"                                     \n[110] \"Italy\"                                       \n[111] \"Jersey\"                                      \n[112] \"Jamaica\"                                     \n[113] \"Jordan\"                                      \n[114] \"Japan\"                                       \n[115] \"Kenya\"                                       \n[116] \"Kyrgyzstan\"                                  \n[117] \"Cambodia\"                                    \n[118] \"Kiribati\"                                    \n[119] \"Comoros\"                                     \n[120] \"Saint Kitts and Nevis\"                       \n[121] \"North Korea\"                                 \n[122] \"South Korea\"                                 \n[123] \"Kuwait\"                                      \n[124] \"Cayman Islands\"                              \n[125] \"Kazakhstan\"                                  \n[126] \"Laos\"                                        \n[127] \"Lebanon\"                                     \n[128] \"Saint Lucia\"                                 \n[129] \"Liechtenstein\"                               \n[130] \"Sri Lanka\"                                   \n[131] \"Liberia\"                                     \n[132] \"Lesotho\"                                     \n[133] \"Lithuania\"                                   \n[134] \"Luxembourg\"                                  \n[135] \"Latvia\"                                      \n[136] \"Libya\"                                       \n[137] \"Morocco\"                                     \n[138] \"Monaco\"                                      \n[139] \"Moldova\"                                     \n[140] \"Montenegro\"                                  \n[141] \"Saint Martin\"                                \n[142] \"Madagascar\"                                  \n[143] \"Marshall Islands\"                            \n[144] \"Macedonia\"                                   \n[145] \"Mali\"                                        \n[146] \"Myanmar [Burma]\"                             \n[147] \"Mongolia\"                                    \n[148] \"Macao\"                                       \n[149] \"Northern Mariana Islands\"                    \n[150] \"Martinique\"                                  \n[151] \"Mauritania\"                                  \n[152] \"Montserrat\"                                  \n[153] \"Malta\"                                       \n[154] \"Mauritius\"                                   \n[155] \"Maldives\"                                    \n[156] \"Malawi\"                                      \n[157] \"Mexico\"                                      \n[158] \"Malaysia\"                                    \n[159] \"Mozambique\"                                  \n[160] \"Namibia\"                                     \n[161] \"New Caledonia\"                               \n[162] \"Niger\"                                       \n[163] \"Norfolk Island\"                              \n[164] \"Nigeria\"                                     \n[165] \"Nicaragua\"                                   \n[166] \"Netherlands\"                                 \n[167] \"Norway\"                                      \n[168] \"Nepal\"                                       \n[169] \"Nauru\"                                       \n[170] \"Niue\"                                        \n[171] \"New Zealand\"                                 \n[172] \"Oman\"                                        \n[173] \"Panama\"                                      \n[174] \"Peru\"                                        \n[175] \"French Polynesia\"                            \n[176] \"Papua New Guinea\"                            \n[177] \"Philippines\"                                 \n[178] \"Pakistan\"                                    \n[179] \"Poland\"                                      \n[180] \"Saint Pierre and Miquelon\"                   \n[181] \"Pitcairn Islands\"                            \n[182] \"Puerto Rico\"                                 \n[183] \"Palestine\"                                   \n[184] \"Portugal\"                                    \n[185] \"Palau\"                                       \n[186] \"Paraguay\"                                    \n[187] \"Qatar\"                                       \n[188] \"Réunion\"                                     \n[189] \"Romania\"                                     \n[190] \"Serbia\"                                      \n[191] \"Russia\"                                      \n[192] \"Rwanda\"                                      \n[193] \"Saudi Arabia\"                                \n[194] \"Solomon Islands\"                             \n[195] \"Seychelles\"                                  \n[196] \"Sudan\"                                       \n[197] \"Sweden\"                                      \n[198] \"Singapore\"                                   \n[199] \"Saint Helena\"                                \n[200] \"Slovenia\"                                    \n[201] \"Svalbard and Jan Mayen\"                      \n[202] \"Slovakia\"                                    \n[203] \"Sierra Leone\"                                \n[204] \"San Marino\"                                  \n[205] \"Senegal\"                                     \n[206] \"Somalia\"                                     \n[207] \"Suriname\"                                    \n[208] \"South Sudan\"                                 \n[209] \"São Tomé and Príncipe\"                       \n[210] \"El Salvador\"                                 \n[211] \"Sint Maarten\"                                \n[212] \"Syria\"                                       \n[213] \"Swaziland\"                                   \n[214] \"Turks and Caicos Islands\"                    \n[215] \"Chad\"                                        \n[216] \"French Southern Territories\"                 \n[217] \"Togo\"                                        \n[218] \"Thailand\"                                    \n[219] \"Tajikistan\"                                  \n[220] \"Tokelau\"                                     \n[221] \"East Timor\"                                  \n[222] \"Turkmenistan\"                                \n[223] \"Tunisia\"                                     \n[224] \"Tonga\"                                       \n[225] \"Turkey\"                                      \n[226] \"Trinidad and Tobago\"                         \n[227] \"Tuvalu\"                                      \n[228] \"Taiwan\"                                      \n[229] \"Tanzania\"                                    \n[230] \"Ukraine\"                                     \n[231] \"Uganda\"                                      \n[232] \"U.S. Minor Outlying Islands\"                 \n[233] \"United States\"                               \n[234] \"Uruguay\"                                     \n[235] \"Uzbekistan\"                                  \n[236] \"Vatican City\"                                \n[237] \"Saint Vincent and the Grenadines\"            \n[238] \"Venezuela\"                                   \n[239] \"British Virgin Islands\"                      \n[240] \"U.S. Virgin Islands\"                         \n[241] \"Vietnam\"                                     \n[242] \"Vanuatu\"                                     \n[243] \"Wallis and Futuna\"                           \n[244] \"Samoa\"                                       \n[245] \"Kosovo\"                                      \n[246] \"Yemen\"                                       \n[247] \"Mayotte\"                                     \n[248] \"South Africa\"                                \n[249] \"Zambia\"                                      \n[250] \"Zimbabwe\"                                    \n\ncapitals\n\n  [1] \"Andorra la Vella\"    \"Abu Dhabi\"           \"Kabul\"              \n  [4] \"St. John's\"          \"The Valley\"          \"Tirana\"             \n  [7] \"Yerevan\"             \"Luanda\"              \"None\"               \n [10] \"Buenos Aires\"        \"Pago Pago\"           \"Vienna\"             \n [13] \"Canberra\"            \"Oranjestad\"          \"Mariehamn\"          \n [16] \"Baku\"                \"Sarajevo\"            \"Bridgetown\"         \n [19] \"Dhaka\"               \"Brussels\"            \"Ouagadougou\"        \n [22] \"Sofia\"               \"Manama\"              \"Bujumbura\"          \n [25] \"Porto-Novo\"          \"Gustavia\"            \"Hamilton\"           \n [28] \"Bandar Seri Begawan\" \"Sucre\"               \"Kralendijk\"         \n [31] \"Brasília\"            \"Nassau\"              \"Thimphu\"            \n [34] \"None\"                \"Gaborone\"            \"Minsk\"              \n [37] \"Belmopan\"            \"Ottawa\"              \"West Island\"        \n [40] \"Kinshasa\"            \"Bangui\"              \"Brazzaville\"        \n [43] \"Bern\"                \"Yamoussoukro\"        \"Avarua\"             \n [46] \"Santiago\"            \"Yaoundé\"             \"Beijing\"            \n [49] \"Bogotá\"              \"San José\"            \"Havana\"             \n [52] \"Praia\"               \"Willemstad\"          \"Flying Fish Cove\"   \n [55] \"Nicosia\"             \"Prague\"              \"Berlin\"             \n [58] \"Djibouti\"            \"Copenhagen\"          \"Roseau\"             \n [61] \"Santo Domingo\"       \"Algiers\"             \"Quito\"              \n [64] \"Tallinn\"             \"Cairo\"               \"Laâyoune / El Aaiún\"\n [67] \"Asmara\"              \"Madrid\"              \"Addis Ababa\"        \n [70] \"Helsinki\"            \"Suva\"                \"Stanley\"            \n [73] \"Palikir\"             \"Tórshavn\"            \"Paris\"              \n [76] \"Libreville\"          \"London\"              \"St. George's\"       \n [79] \"Tbilisi\"             \"Cayenne\"             \"St Peter Port\"      \n [82] \"Accra\"               \"Gibraltar\"           \"Nuuk\"               \n [85] \"Bathurst\"            \"Conakry\"             \"Basse-Terre\"        \n [88] \"Malabo\"              \"Athens\"              \"Grytviken\"          \n [91] \"Guatemala City\"      \"Hagåtña\"             \"Bissau\"             \n [94] \"Georgetown\"          \"Hong Kong\"           \"None\"               \n [97] \"Tegucigalpa\"         \"Zagreb\"              \"Port-au-Prince\"     \n[100] \"Budapest\"            \"Jakarta\"             \"Dublin\"             \n[103] \"None\"                \"Douglas\"             \"New Delhi\"          \n[106] \"None\"                \"Baghdad\"             \"Tehran\"             \n[109] \"Reykjavik\"           \"Rome\"                \"Saint Helier\"       \n[112] \"Kingston\"            \"Amman\"               \"Tokyo\"              \n[115] \"Nairobi\"             \"Bishkek\"             \"Phnom Penh\"         \n[118] \"Tarawa\"              \"Moroni\"              \"Basseterre\"         \n[121] \"Pyongyang\"           \"Seoul\"               \"Kuwait City\"        \n[124] \"George Town\"         \"Astana\"              \"Vientiane\"          \n[127] \"Beirut\"              \"Castries\"            \"Vaduz\"              \n[130] \"Colombo\"             \"Monrovia\"            \"Maseru\"             \n[133] \"Vilnius\"             \"Luxembourg\"          \"Riga\"               \n[136] \"Tripoli\"             \"Rabat\"               \"Monaco\"             \n[139] \"Chişinău\"            \"Podgorica\"           \"Marigot\"            \n[142] \"Antananarivo\"        \"Majuro\"              \"Skopje\"             \n[145] \"Bamako\"              \"Naypyitaw\"           \"Ulan Bator\"         \n[148] \"Macao\"               \"Saipan\"              \"Fort-de-France\"     \n[151] \"Nouakchott\"          \"Plymouth\"            \"Valletta\"           \n[154] \"Port Louis\"          \"Malé\"                \"Lilongwe\"           \n[157] \"Mexico City\"         \"Kuala Lumpur\"        \"Maputo\"             \n[160] \"Windhoek\"            \"Noumea\"              \"Niamey\"             \n[163] \"Kingston\"            \"Abuja\"               \"Managua\"            \n[166] \"Amsterdam\"           \"Oslo\"                \"Kathmandu\"          \n[169] \"Yaren\"               \"Alofi\"               \"Wellington\"         \n[172] \"Muscat\"              \"Panama City\"         \"Lima\"               \n[175] \"Papeete\"             \"Port Moresby\"        \"Manila\"             \n[178] \"Islamabad\"           \"Warsaw\"              \"Saint-Pierre\"       \n[181] \"Adamstown\"           \"San Juan\"            \"None\"               \n[184] \"Lisbon\"              \"Melekeok\"            \"Asunción\"           \n[187] \"Doha\"                \"Saint-Denis\"         \"Bucharest\"          \n[190] \"Belgrade\"            \"Moscow\"              \"Kigali\"             \n[193] \"Riyadh\"              \"Honiara\"             \"Victoria\"           \n[196] \"Khartoum\"            \"Stockholm\"           \"Singapore\"          \n[199] \"Jamestown\"           \"Ljubljana\"           \"Longyearbyen\"       \n[202] \"Bratislava\"          \"Freetown\"            \"San Marino\"         \n[205] \"Dakar\"               \"Mogadishu\"           \"Paramaribo\"         \n[208] \"Juba\"                \"São Tomé\"            \"San Salvador\"       \n[211] \"Philipsburg\"         \"Damascus\"            \"Mbabane\"            \n[214] \"Cockburn Town\"       \"N'Djamena\"           \"Port-aux-Français\"  \n[217] \"Lomé\"                \"Bangkok\"             \"Dushanbe\"           \n[220] \"None\"                \"Dili\"                \"Ashgabat\"           \n[223] \"Tunis\"               \"Nuku'alofa\"          \"Ankara\"             \n[226] \"Port of Spain\"       \"Funafuti\"            \"Taipei\"             \n[229] \"Dodoma\"              \"Kiev\"                \"Kampala\"            \n[232] \"None\"                \"Washington\"          \"Montevideo\"         \n[235] \"Tashkent\"            \"Vatican City\"        \"Kingstown\"          \n[238] \"Caracas\"             \"Road Town\"           \"Charlotte Amalie\"   \n[241] \"Hanoi\"               \"Port Vila\"           \"Mata-Utu\"           \n[244] \"Apia\"                \"Pristina\"            \"Sanaa\"              \n[247] \"Mamoudzou\"           \"Pretoria\"            \"Lusaka\"             \n[250] \"Harare\"             \n\npopulation\n\n  [1] \"84000\"      \"4975593\"    \"29121286\"   \"86754\"      \"13254\"     \n  [6] \"2986952\"    \"2968000\"    \"13068161\"   \"0\"          \"41343201\"  \n [11] \"57881\"      \"8205000\"    \"21515754\"   \"71566\"      \"26711\"     \n [16] \"8303512\"    \"4590000\"    \"285653\"     \"156118464\"  \"10403000\"  \n [21] \"16241811\"   \"7148785\"    \"738004\"     \"9863117\"    \"9056010\"   \n [26] \"8450\"       \"65365\"      \"395027\"     \"9947418\"    \"18012\"     \n [31] \"201103330\"  \"301790\"     \"699847\"     \"0\"          \"2029307\"   \n [36] \"9685000\"    \"314522\"     \"33679000\"   \"628\"        \"70916439\"  \n [41] \"4844927\"    \"3039126\"    \"7581000\"    \"21058798\"   \"21388\"     \n [46] \"16746491\"   \"19294149\"   \"1330044000\" \"47790000\"   \"4516220\"   \n [51] \"11423000\"   \"508659\"     \"141766\"     \"1500\"       \"1102677\"   \n [56] \"10476000\"   \"81802257\"   \"740528\"     \"5484000\"    \"72813\"     \n [61] \"9823821\"    \"34586184\"   \"14790608\"   \"1291170\"    \"80471869\"  \n [66] \"273008\"     \"5792984\"    \"46505963\"   \"88013491\"   \"5244000\"   \n [71] \"875983\"     \"2638\"       \"107708\"     \"48228\"      \"64768389\"  \n [76] \"1545255\"    \"62348447\"   \"107818\"     \"4630000\"    \"195506\"    \n [81] \"65228\"      \"24339838\"   \"27884\"      \"56375\"      \"1593256\"   \n [86] \"10324025\"   \"443000\"     \"1014999\"    \"11000000\"   \"30\"        \n [91] \"13550440\"   \"159358\"     \"1565126\"    \"748486\"     \"6898686\"   \n [96] \"0\"          \"7989415\"    \"4491000\"    \"9648924\"    \"9982000\"   \n[101] \"242968342\"  \"4622917\"    \"7353985\"    \"75049\"      \"1173108018\"\n[106] \"4000\"       \"29671605\"   \"76923300\"   \"308910\"     \"60340328\"  \n[111] \"90812\"      \"2847232\"    \"6407085\"    \"127288000\"  \"40046566\"  \n[116] \"5776500\"    \"14453680\"   \"92533\"      \"773407\"     \"51134\"     \n[121] \"22912177\"   \"48422644\"   \"2789132\"    \"44270\"      \"15340000\"  \n[126] \"6368162\"    \"4125247\"    \"160922\"     \"35000\"      \"21513990\"  \n[131] \"3685076\"    \"1919552\"    \"2944459\"    \"497538\"     \"2217969\"   \n[136] \"6461454\"    \"31627428\"   \"32965\"      \"4324000\"    \"666730\"    \n[141] \"35925\"      \"21281844\"   \"65859\"      \"2062294\"    \"13796354\"  \n[146] \"53414374\"   \"3086918\"    \"449198\"     \"53883\"      \"432900\"    \n[151] \"3205060\"    \"9341\"       \"403000\"     \"1294104\"    \"395650\"    \n[156] \"15447500\"   \"112468855\"  \"28274729\"   \"22061451\"   \"2128471\"   \n[161] \"216494\"     \"15878271\"   \"1828\"       \"154000000\"  \"5995928\"   \n[166] \"16645000\"   \"5009150\"    \"28951852\"   \"10065\"      \"2166\"      \n[171] \"4252277\"    \"2967717\"    \"3410676\"    \"29907003\"   \"270485\"    \n[176] \"6064515\"    \"99900177\"   \"184404791\"  \"38500000\"   \"7012\"      \n[181] \"46\"         \"3916632\"    \"3800000\"    \"10676000\"   \"19907\"     \n[186] \"6375830\"    \"840926\"     \"776948\"     \"21959278\"   \"7344847\"   \n[191] \"140702000\"  \"11055976\"   \"25731776\"   \"559198\"     \"88340\"     \n[196] \"35000000\"   \"9828655\"    \"4701069\"    \"7460\"       \"2007000\"   \n[201] \"2550\"       \"5455000\"    \"5245695\"    \"31477\"      \"12323252\"  \n[206] \"10112453\"   \"492829\"     \"8260490\"    \"175808\"     \"6052064\"   \n[211] \"37429\"      \"22198110\"   \"1354051\"    \"20556\"      \"10543464\"  \n[216] \"140\"        \"6587239\"    \"67089500\"   \"7487489\"    \"1466\"      \n[221] \"1154625\"    \"4940916\"    \"10589025\"   \"122580\"     \"77804122\"  \n[226] \"1228691\"    \"10472\"      \"22894384\"   \"41892895\"   \"45415596\"  \n[231] \"33398682\"   \"0\"          \"310232863\"  \"3477000\"    \"27865738\"  \n[236] \"921\"        \"104217\"     \"27223228\"   \"21730\"      \"108708\"    \n[241] \"89571130\"   \"221552\"     \"16025\"      \"192001\"     \"1800000\"   \n[246] \"23495361\"   \"159042\"     \"49000000\"   \"13460305\"   \"11651858\"  \n\narea\n\n  [1] \"468.0\"     \"82880.0\"   \"647500.0\"  \"443.0\"     \"102.0\"     \"28748.0\"  \n  [7] \"29800.0\"   \"1246700.0\" \"1.4E7\"     \"2766890.0\" \"199.0\"     \"83858.0\"  \n [13] \"7686850.0\" \"193.0\"     \"1580.0\"    \"86600.0\"   \"51129.0\"   \"431.0\"    \n [19] \"144000.0\"  \"30510.0\"   \"274200.0\"  \"110910.0\"  \"665.0\"     \"27830.0\"  \n [25] \"112620.0\"  \"21.0\"      \"53.0\"      \"5770.0\"    \"1098580.0\" \"328.0\"    \n [31] \"8511965.0\" \"13940.0\"   \"47000.0\"   \"49.0\"      \"600370.0\"  \"207600.0\" \n [37] \"22966.0\"   \"9984670.0\" \"14.0\"      \"2345410.0\" \"622984.0\"  \"342000.0\" \n [43] \"41290.0\"   \"322460.0\"  \"240.0\"     \"756950.0\"  \"475440.0\"  \"9596960.0\"\n [49] \"1138910.0\" \"51100.0\"   \"110860.0\"  \"4033.0\"    \"444.0\"     \"135.0\"    \n [55] \"9250.0\"    \"78866.0\"   \"357021.0\"  \"23000.0\"   \"43094.0\"   \"754.0\"    \n [61] \"48730.0\"   \"2381740.0\" \"283560.0\"  \"45226.0\"   \"1001450.0\" \"266000.0\" \n [67] \"121320.0\"  \"504782.0\"  \"1127127.0\" \"337030.0\"  \"18270.0\"   \"12173.0\"  \n [73] \"702.0\"     \"1399.0\"    \"547030.0\"  \"267667.0\"  \"244820.0\"  \"344.0\"    \n [79] \"69700.0\"   \"91000.0\"   \"78.0\"      \"239460.0\"  \"6.5\"       \"2166086.0\"\n [85] \"11300.0\"   \"245857.0\"  \"1780.0\"    \"28051.0\"   \"131940.0\"  \"3903.0\"   \n [91] \"108890.0\"  \"549.0\"     \"36120.0\"   \"214970.0\"  \"1092.0\"    \"412.0\"    \n [97] \"112090.0\"  \"56542.0\"   \"27750.0\"   \"93030.0\"   \"1919440.0\" \"70280.0\"  \n[103] \"20770.0\"   \"572.0\"     \"3287590.0\" \"60.0\"      \"437072.0\"  \"1648000.0\"\n[109] \"103000.0\"  \"301230.0\"  \"116.0\"     \"10991.0\"   \"92300.0\"   \"377835.0\" \n[115] \"582650.0\"  \"198500.0\"  \"181040.0\"  \"811.0\"     \"2170.0\"    \"261.0\"    \n[121] \"120540.0\"  \"98480.0\"   \"17820.0\"   \"262.0\"     \"2717300.0\" \"236800.0\" \n[127] \"10400.0\"   \"616.0\"     \"160.0\"     \"65610.0\"   \"111370.0\"  \"30355.0\"  \n[133] \"65200.0\"   \"2586.0\"    \"64589.0\"   \"1759540.0\" \"446550.0\"  \"1.95\"     \n[139] \"33843.0\"   \"14026.0\"   \"53.0\"      \"587040.0\"  \"181.3\"     \"25333.0\"  \n[145] \"1240000.0\" \"678500.0\"  \"1565000.0\" \"254.0\"     \"477.0\"     \"1100.0\"   \n[151] \"1030700.0\" \"102.0\"     \"316.0\"     \"2040.0\"    \"300.0\"     \"118480.0\" \n[157] \"1972550.0\" \"329750.0\"  \"801590.0\"  \"825418.0\"  \"19060.0\"   \"1267000.0\"\n[163] \"34.6\"      \"923768.0\"  \"129494.0\"  \"41526.0\"   \"324220.0\"  \"140800.0\" \n[169] \"21.0\"      \"260.0\"     \"268680.0\"  \"212460.0\"  \"78200.0\"   \"1285220.0\"\n[175] \"4167.0\"    \"462840.0\"  \"300000.0\"  \"803940.0\"  \"312685.0\"  \"242.0\"    \n[181] \"47.0\"      \"9104.0\"    \"5970.0\"    \"92391.0\"   \"458.0\"     \"406750.0\" \n[187] \"11437.0\"   \"2517.0\"    \"237500.0\"  \"88361.0\"   \"1.71E7\"    \"26338.0\"  \n[193] \"1960582.0\" \"28450.0\"   \"455.0\"     \"1861484.0\" \"449964.0\"  \"692.7\"    \n[199] \"410.0\"     \"20273.0\"   \"62049.0\"   \"48845.0\"   \"71740.0\"   \"61.2\"     \n[205] \"196190.0\"  \"637657.0\"  \"163270.0\"  \"644329.0\"  \"1001.0\"    \"21040.0\"  \n[211] \"21.0\"      \"185180.0\"  \"17363.0\"   \"430.0\"     \"1284000.0\" \"7829.0\"   \n[217] \"56785.0\"   \"514000.0\"  \"143100.0\"  \"10.0\"      \"15007.0\"   \"488100.0\" \n[223] \"163610.0\"  \"748.0\"     \"780580.0\"  \"5128.0\"    \"26.0\"      \"35980.0\"  \n[229] \"945087.0\"  \"603700.0\"  \"236040.0\"  \"0.0\"       \"9629091.0\" \"176220.0\" \n[235] \"447400.0\"  \"0.44\"      \"389.0\"     \"912050.0\"  \"153.0\"     \"352.0\"    \n[241] \"329560.0\"  \"12200.0\"   \"274.0\"     \"2944.0\"    \"10908.0\"   \"527970.0\" \n[247] \"374.0\"     \"1219912.0\" \"752614.0\"  \"390580.0\" \n\ndf = data.frame ( country=countries,\n                  capital = capitals,\n                  pop = population,\n                  area = area,\n                  stringsAsFactors = FALSE\n                  )\n\n\n\n\nhead(df, 5)\n\n               country          capital      pop     area\n1              Andorra Andorra la Vella    84000    468.0\n2 United Arab Emirates        Abu Dhabi  4975593  82880.0\n3          Afghanistan            Kabul 29121286 647500.0\n4  Antigua and Barbuda       St. John's    86754    443.0\n5             Anguilla       The Valley    13254    102.0\n\nnrow(df)\n\n[1] 250",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#html_text2-removes-leadingtrailing-whitespace",
    "href": "web-000400-webscrapingContinued-015.html#html_text2-removes-leadingtrailing-whitespace",
    "title": "31  Web Scraping with R",
    "section": "31.10 html_text2() removes leading/trailing whitespace",
    "text": "31.10 html_text2() removes leading/trailing whitespace\n\n#####################################################\n# UPDATE:\n#\n# The latest release of the rvest package includes\n# a function named html_text2. This function automatically\n# removes leading and trailing whitespace.\n# It's still important to understand how to modify the \n# data with gsub for situations for which you want to modify\n# the data other than leading and trailing whitespace.\n#####################################################\n\n\nurl = \"https://scrapethissite.com/pages/simple/\"\ncssSelector = \".country-name\"\n\nwhole_html_page = read_html(url)\ncountry_name_html =  html_elements( whole_html_page, cssSelector )\n\n# Using html_text2 instead of html_text.\n# html_text2 automatically removes leading and trailing whitespace\n# from the text.\njust_the_text =   html_text2(country_name_html)\n\njust_the_text  \n\n  [1] \"Andorra\"                                     \n  [2] \"United Arab Emirates\"                        \n  [3] \"Afghanistan\"                                 \n  [4] \"Antigua and Barbuda\"                         \n  [5] \"Anguilla\"                                    \n  [6] \"Albania\"                                     \n  [7] \"Armenia\"                                     \n  [8] \"Angola\"                                      \n  [9] \"Antarctica\"                                  \n [10] \"Argentina\"                                   \n [11] \"American Samoa\"                              \n [12] \"Austria\"                                     \n [13] \"Australia\"                                   \n [14] \"Aruba\"                                       \n [15] \"Åland\"                                       \n [16] \"Azerbaijan\"                                  \n [17] \"Bosnia and Herzegovina\"                      \n [18] \"Barbados\"                                    \n [19] \"Bangladesh\"                                  \n [20] \"Belgium\"                                     \n [21] \"Burkina Faso\"                                \n [22] \"Bulgaria\"                                    \n [23] \"Bahrain\"                                     \n [24] \"Burundi\"                                     \n [25] \"Benin\"                                       \n [26] \"Saint Barthélemy\"                            \n [27] \"Bermuda\"                                     \n [28] \"Brunei\"                                      \n [29] \"Bolivia\"                                     \n [30] \"Bonaire\"                                     \n [31] \"Brazil\"                                      \n [32] \"Bahamas\"                                     \n [33] \"Bhutan\"                                      \n [34] \"Bouvet Island\"                               \n [35] \"Botswana\"                                    \n [36] \"Belarus\"                                     \n [37] \"Belize\"                                      \n [38] \"Canada\"                                      \n [39] \"Cocos [Keeling] Islands\"                     \n [40] \"Democratic Republic of the Congo\"            \n [41] \"Central African Republic\"                    \n [42] \"Republic of the Congo\"                       \n [43] \"Switzerland\"                                 \n [44] \"Ivory Coast\"                                 \n [45] \"Cook Islands\"                                \n [46] \"Chile\"                                       \n [47] \"Cameroon\"                                    \n [48] \"China\"                                       \n [49] \"Colombia\"                                    \n [50] \"Costa Rica\"                                  \n [51] \"Cuba\"                                        \n [52] \"Cape Verde\"                                  \n [53] \"Curacao\"                                     \n [54] \"Christmas Island\"                            \n [55] \"Cyprus\"                                      \n [56] \"Czech Republic\"                              \n [57] \"Germany\"                                     \n [58] \"Djibouti\"                                    \n [59] \"Denmark\"                                     \n [60] \"Dominica\"                                    \n [61] \"Dominican Republic\"                          \n [62] \"Algeria\"                                     \n [63] \"Ecuador\"                                     \n [64] \"Estonia\"                                     \n [65] \"Egypt\"                                       \n [66] \"Western Sahara\"                              \n [67] \"Eritrea\"                                     \n [68] \"Spain\"                                       \n [69] \"Ethiopia\"                                    \n [70] \"Finland\"                                     \n [71] \"Fiji\"                                        \n [72] \"Falkland Islands\"                            \n [73] \"Micronesia\"                                  \n [74] \"Faroe Islands\"                               \n [75] \"France\"                                      \n [76] \"Gabon\"                                       \n [77] \"United Kingdom\"                              \n [78] \"Grenada\"                                     \n [79] \"Georgia\"                                     \n [80] \"French Guiana\"                               \n [81] \"Guernsey\"                                    \n [82] \"Ghana\"                                       \n [83] \"Gibraltar\"                                   \n [84] \"Greenland\"                                   \n [85] \"Gambia\"                                      \n [86] \"Guinea\"                                      \n [87] \"Guadeloupe\"                                  \n [88] \"Equatorial Guinea\"                           \n [89] \"Greece\"                                      \n [90] \"South Georgia and the South Sandwich Islands\"\n [91] \"Guatemala\"                                   \n [92] \"Guam\"                                        \n [93] \"Guinea-Bissau\"                               \n [94] \"Guyana\"                                      \n [95] \"Hong Kong\"                                   \n [96] \"Heard Island and McDonald Islands\"           \n [97] \"Honduras\"                                    \n [98] \"Croatia\"                                     \n [99] \"Haiti\"                                       \n[100] \"Hungary\"                                     \n[101] \"Indonesia\"                                   \n[102] \"Ireland\"                                     \n[103] \"Israel\"                                      \n[104] \"Isle of Man\"                                 \n[105] \"India\"                                       \n[106] \"British Indian Ocean Territory\"              \n[107] \"Iraq\"                                        \n[108] \"Iran\"                                        \n[109] \"Iceland\"                                     \n[110] \"Italy\"                                       \n[111] \"Jersey\"                                      \n[112] \"Jamaica\"                                     \n[113] \"Jordan\"                                      \n[114] \"Japan\"                                       \n[115] \"Kenya\"                                       \n[116] \"Kyrgyzstan\"                                  \n[117] \"Cambodia\"                                    \n[118] \"Kiribati\"                                    \n[119] \"Comoros\"                                     \n[120] \"Saint Kitts and Nevis\"                       \n[121] \"North Korea\"                                 \n[122] \"South Korea\"                                 \n[123] \"Kuwait\"                                      \n[124] \"Cayman Islands\"                              \n[125] \"Kazakhstan\"                                  \n[126] \"Laos\"                                        \n[127] \"Lebanon\"                                     \n[128] \"Saint Lucia\"                                 \n[129] \"Liechtenstein\"                               \n[130] \"Sri Lanka\"                                   \n[131] \"Liberia\"                                     \n[132] \"Lesotho\"                                     \n[133] \"Lithuania\"                                   \n[134] \"Luxembourg\"                                  \n[135] \"Latvia\"                                      \n[136] \"Libya\"                                       \n[137] \"Morocco\"                                     \n[138] \"Monaco\"                                      \n[139] \"Moldova\"                                     \n[140] \"Montenegro\"                                  \n[141] \"Saint Martin\"                                \n[142] \"Madagascar\"                                  \n[143] \"Marshall Islands\"                            \n[144] \"Macedonia\"                                   \n[145] \"Mali\"                                        \n[146] \"Myanmar [Burma]\"                             \n[147] \"Mongolia\"                                    \n[148] \"Macao\"                                       \n[149] \"Northern Mariana Islands\"                    \n[150] \"Martinique\"                                  \n[151] \"Mauritania\"                                  \n[152] \"Montserrat\"                                  \n[153] \"Malta\"                                       \n[154] \"Mauritius\"                                   \n[155] \"Maldives\"                                    \n[156] \"Malawi\"                                      \n[157] \"Mexico\"                                      \n[158] \"Malaysia\"                                    \n[159] \"Mozambique\"                                  \n[160] \"Namibia\"                                     \n[161] \"New Caledonia\"                               \n[162] \"Niger\"                                       \n[163] \"Norfolk Island\"                              \n[164] \"Nigeria\"                                     \n[165] \"Nicaragua\"                                   \n[166] \"Netherlands\"                                 \n[167] \"Norway\"                                      \n[168] \"Nepal\"                                       \n[169] \"Nauru\"                                       \n[170] \"Niue\"                                        \n[171] \"New Zealand\"                                 \n[172] \"Oman\"                                        \n[173] \"Panama\"                                      \n[174] \"Peru\"                                        \n[175] \"French Polynesia\"                            \n[176] \"Papua New Guinea\"                            \n[177] \"Philippines\"                                 \n[178] \"Pakistan\"                                    \n[179] \"Poland\"                                      \n[180] \"Saint Pierre and Miquelon\"                   \n[181] \"Pitcairn Islands\"                            \n[182] \"Puerto Rico\"                                 \n[183] \"Palestine\"                                   \n[184] \"Portugal\"                                    \n[185] \"Palau\"                                       \n[186] \"Paraguay\"                                    \n[187] \"Qatar\"                                       \n[188] \"Réunion\"                                     \n[189] \"Romania\"                                     \n[190] \"Serbia\"                                      \n[191] \"Russia\"                                      \n[192] \"Rwanda\"                                      \n[193] \"Saudi Arabia\"                                \n[194] \"Solomon Islands\"                             \n[195] \"Seychelles\"                                  \n[196] \"Sudan\"                                       \n[197] \"Sweden\"                                      \n[198] \"Singapore\"                                   \n[199] \"Saint Helena\"                                \n[200] \"Slovenia\"                                    \n[201] \"Svalbard and Jan Mayen\"                      \n[202] \"Slovakia\"                                    \n[203] \"Sierra Leone\"                                \n[204] \"San Marino\"                                  \n[205] \"Senegal\"                                     \n[206] \"Somalia\"                                     \n[207] \"Suriname\"                                    \n[208] \"South Sudan\"                                 \n[209] \"São Tomé and Príncipe\"                       \n[210] \"El Salvador\"                                 \n[211] \"Sint Maarten\"                                \n[212] \"Syria\"                                       \n[213] \"Swaziland\"                                   \n[214] \"Turks and Caicos Islands\"                    \n[215] \"Chad\"                                        \n[216] \"French Southern Territories\"                 \n[217] \"Togo\"                                        \n[218] \"Thailand\"                                    \n[219] \"Tajikistan\"                                  \n[220] \"Tokelau\"                                     \n[221] \"East Timor\"                                  \n[222] \"Turkmenistan\"                                \n[223] \"Tunisia\"                                     \n[224] \"Tonga\"                                       \n[225] \"Turkey\"                                      \n[226] \"Trinidad and Tobago\"                         \n[227] \"Tuvalu\"                                      \n[228] \"Taiwan\"                                      \n[229] \"Tanzania\"                                    \n[230] \"Ukraine\"                                     \n[231] \"Uganda\"                                      \n[232] \"U.S. Minor Outlying Islands\"                 \n[233] \"United States\"                               \n[234] \"Uruguay\"                                     \n[235] \"Uzbekistan\"                                  \n[236] \"Vatican City\"                                \n[237] \"Saint Vincent and the Grenadines\"            \n[238] \"Venezuela\"                                   \n[239] \"British Virgin Islands\"                      \n[240] \"U.S. Virgin Islands\"                         \n[241] \"Vietnam\"                                     \n[242] \"Vanuatu\"                                     \n[243] \"Wallis and Futuna\"                           \n[244] \"Samoa\"                                       \n[245] \"Kosovo\"                                      \n[246] \"Yemen\"                                       \n[247] \"Mayotte\"                                     \n[248] \"South Africa\"                                \n[249] \"Zambia\"                                      \n[250] \"Zimbabwe\"",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#create-a-function-to-do-the-scraping",
    "href": "web-000400-webscrapingContinued-015.html#create-a-function-to-do-the-scraping",
    "title": "31  Web Scraping with R",
    "section": "31.11 Create a function to do the scraping",
    "text": "31.11 Create a function to do the scraping\n\n#####################################################\n#\n# Package up the technique into a function\n#\n#####################################################\n\ngetCountryData &lt;- function() {\n \n  \n  # Get all of the country data and put it in a dataframe\n  \n  url = \"https://scrapethissite.com/pages/simple/\"\n  \n  the_full_html = read_html(url)\n  \n  countries = the_full_html %&gt;%\n    html_elements( \".country-name\" ) %&gt;%\n    html_text()\n  \n  capitals = the_full_html %&gt;%\n    html_elements( \".country-capital\" ) %&gt;%\n    html_text()\n  \n  population = the_full_html %&gt;%\n    html_elements( \".country-population\" ) %&gt;%\n    html_text()\n  \n  area = the_full_html %&gt;%\n    html_elements( \".country-area\" ) %&gt;%\n    html_text()\n\n  # remove the spaces and newline characters from countries\n  countries= gsub(\"\\\\n\", \"\", countries)\n  countries= gsub(\" \", \"\" , countries)\n\n  df = data.frame ( country=countries,\n                    capital = capitals,\n                    pop = population,\n                    area = area,\n                    stringsAsFactors = FALSE\n  )\n  \n  return (df)\n}\n\n\n# Data on websites can change. We can now call this function whenever\n# we want to get the latest versions of the data from the website.\n\nmydata = getCountryData()\nhead(mydata)\n\n             country          capital      pop     area\n1            Andorra Andorra la Vella    84000    468.0\n2 UnitedArabEmirates        Abu Dhabi  4975593  82880.0\n3        Afghanistan            Kabul 29121286 647500.0\n4  AntiguaandBarbuda       St. John's    86754    443.0\n5           Anguilla       The Valley    13254    102.0\n6            Albania           Tirana  2986952  28748.0",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#scraping-multiple-webpages-in-a-loop",
    "href": "web-000400-webscrapingContinued-015.html#scraping-multiple-webpages-in-a-loop",
    "title": "31  Web Scraping with R",
    "section": "31.12 Scraping multiple webpages in a loop",
    "text": "31.12 Scraping multiple webpages in a loop\n\n31.12.1 Figure out the code\n\n######################################################\n#\n# Getting data from multiple web pages in a loop.\n#\n######################################################\n\n\n# The data on the following page is only one page of multiple pages of similar\n# data. \n#\n#   https://scrapethissite.com/pages/forms/?page_num=1\n#\n# The links to the other pages appear on the bottom of the page. Clicking on \n# the the link for the 2nd page, reveals that the 2nd page of data is at \n# the following URL:\n#\n#   https://scrapethissite.com/pages/forms/?page_num=2\n#\n# These URLs differ ONLY in the page number. This allows us to scrape\n# ALL of the pages by reconstructing the URL for the page we want by\n# inserting the correct page number. \n\n\n# CSS FROM INSPECT\ncss = \"#hockey &gt; div &gt; table &gt; tbody &gt; tr:nth-child(2) &gt; td.name\"\n\n# After looking at the full HTML code, we could see the the tbody\n# in the selector should not have been there? There could be several \n# reasons (beyond the scope of today's class) as to why the tbody was \n# in the css selector that we got back. By looking at the full HTML\n# and understanding a little about how HTML and css selectors work, we were\n# able to realize that \"tbody\" didn't belong and take it out.\ncss = \"#hockey &gt; div &gt; table &gt; tr:nth-child(2) &gt; td.name\"\n\n# When we tried the above css selector we ONLY got back the \"Colorado Avalance\"\n# but no other team name. We quickly realized that was because of \n# :nth-child(2) that was limiting the results. We we took off :nth-child(2)\n# that got us all of the team names. \ncss = \"#hockey &gt; div &gt; table &gt; tr &gt; td.name\"\n\n# The following is what we got from selector gadget\ncss = \".name\"\n\n# according to selector gadget this will match all data in the table\n# and it does. However, the data comes back in a single vector \n# instead of a dataframe.\ncss = \"td\"\n\n# Instead of getting all the data in a single vector it's probably better to\n# get the Name column in one vector and the Year column in another vector\ncssName = \".name\"\ncssYear = \".year\"\n\nurl= \"https://www.scrapethissite.com/pages/forms/?page_num=7\"\n\nfullPage = read_html(url)\n\nfullPage %&gt;%\n  html_elements(css) %&gt;%\n  html_text2()\n\n  [1] \"Colorado Avalanche\"      \"1996\"                   \n  [3] \"49\"                      \"24\"                     \n  [5] \"\"                        \"0.598\"                  \n  [7] \"277\"                     \"205\"                    \n  [9] \"72\"                      \"Dallas Stars\"           \n [11] \"1996\"                    \"48\"                     \n [13] \"26\"                      \"\"                       \n [15] \"0.585\"                   \"252\"                    \n [17] \"198\"                     \"54\"                     \n [19] \"Detroit Red Wings\"       \"1996\"                   \n [21] \"38\"                      \"26\"                     \n [23] \"\"                        \"0.463\"                  \n [25] \"253\"                     \"197\"                    \n [27] \"56\"                      \"Edmonton Oilers\"        \n [29] \"1996\"                    \"36\"                     \n [31] \"37\"                      \"\"                       \n [33] \"0.439\"                   \"252\"                    \n [35] \"247\"                     \"5\"                      \n [37] \"Florida Panthers\"        \"1996\"                   \n [39] \"35\"                      \"28\"                     \n [41] \"\"                        \"0.427\"                  \n [43] \"221\"                     \"201\"                    \n [45] \"20\"                      \"Hartford Whalers\"       \n [47] \"1996\"                    \"32\"                     \n [49] \"39\"                      \"\"                       \n [51] \"0.39\"                    \"226\"                    \n [53] \"256\"                     \"-30\"                    \n [55] \"Los Angeles Kings\"       \"1996\"                   \n [57] \"28\"                      \"43\"                     \n [59] \"\"                        \"0.341\"                  \n [61] \"214\"                     \"268\"                    \n [63] \"-54\"                     \"Montreal Canadiens\"     \n [65] \"1996\"                    \"31\"                     \n [67] \"36\"                      \"\"                       \n [69] \"0.378\"                   \"249\"                    \n [71] \"276\"                     \"-27\"                    \n [73] \"New Jersey Devils\"       \"1996\"                   \n [75] \"45\"                      \"23\"                     \n [77] \"\"                        \"0.549\"                  \n [79] \"231\"                     \"182\"                    \n [81] \"49\"                      \"New York Islanders\"     \n [83] \"1996\"                    \"29\"                     \n [85] \"41\"                      \"\"                       \n [87] \"0.354\"                   \"240\"                    \n [89] \"250\"                     \"-10\"                    \n [91] \"New York Rangers\"        \"1996\"                   \n [93] \"38\"                      \"34\"                     \n [95] \"\"                        \"0.463\"                  \n [97] \"258\"                     \"231\"                    \n [99] \"27\"                      \"Ottawa Senators\"        \n[101] \"1996\"                    \"31\"                     \n[103] \"36\"                      \"\"                       \n[105] \"0.378\"                   \"226\"                    \n[107] \"234\"                     \"-8\"                     \n[109] \"Philadelphia Flyers\"     \"1996\"                   \n[111] \"45\"                      \"24\"                     \n[113] \"\"                        \"0.549\"                  \n[115] \"274\"                     \"217\"                    \n[117] \"57\"                      \"Phoenix Coyotes\"        \n[119] \"1996\"                    \"38\"                     \n[121] \"37\"                      \"\"                       \n[123] \"0.463\"                   \"240\"                    \n[125] \"243\"                     \"-3\"                     \n[127] \"Pittsburgh Penguins\"     \"1996\"                   \n[129] \"38\"                      \"36\"                     \n[131] \"\"                        \"0.463\"                  \n[133] \"285\"                     \"280\"                    \n[135] \"5\"                       \"San Jose Sharks\"        \n[137] \"1996\"                    \"27\"                     \n[139] \"47\"                      \"\"                       \n[141] \"0.329\"                   \"211\"                    \n[143] \"278\"                     \"-67\"                    \n[145] \"St. Louis Blues\"         \"1996\"                   \n[147] \"36\"                      \"35\"                     \n[149] \"\"                        \"0.439\"                  \n[151] \"236\"                     \"239\"                    \n[153] \"-3\"                      \"Tampa Bay Lightning\"    \n[155] \"1996\"                    \"32\"                     \n[157] \"40\"                      \"\"                       \n[159] \"0.39\"                    \"217\"                    \n[161] \"247\"                     \"-30\"                    \n[163] \"Toronto Maple Leafs\"     \"1996\"                   \n[165] \"30\"                      \"44\"                     \n[167] \"\"                        \"0.366\"                  \n[169] \"230\"                     \"273\"                    \n[171] \"-43\"                     \"Vancouver Canucks\"      \n[173] \"1996\"                    \"35\"                     \n[175] \"40\"                      \"\"                       \n[177] \"0.427\"                   \"257\"                    \n[179] \"273\"                     \"-16\"                    \n[181] \"Washington Capitals\"     \"1996\"                   \n[183] \"33\"                      \"40\"                     \n[185] \"\"                        \"0.402\"                  \n[187] \"214\"                     \"231\"                    \n[189] \"-17\"                     \"Mighty Ducks of Anaheim\"\n[191] \"1997\"                    \"26\"                     \n[193] \"43\"                      \"\"                       \n[195] \"0.317\"                   \"205\"                    \n[197] \"261\"                     \"-56\"                    \n[199] \"Boston Bruins\"           \"1997\"                   \n[201] \"39\"                      \"30\"                     \n[203] \"\"                        \"0.476\"                  \n[205] \"221\"                     \"194\"                    \n[207] \"27\"                      \"Buffalo Sabres\"         \n[209] \"1997\"                    \"36\"                     \n[211] \"29\"                      \"\"                       \n[213] \"0.439\"                   \"211\"                    \n[215] \"187\"                     \"24\"                     \n[217] \"Calgary Flames\"          \"1997\"                   \n[219] \"26\"                      \"41\"                     \n[221] \"\"                        \"0.317\"                  \n[223] \"217\"                     \"252\"                    \n[225] \"-35\"                    \n\n# Get the name data\nteamNames = fullPage %&gt;%\n  html_elements(cssName) %&gt;%\n  html_text2()\n\n# Reminder about the %&gt;% pipe symbold\n# Same as above without using the %&gt;% pipe symbol\nhtml_text2(html_elements(fullPage, cssName))\n\n [1] \"Colorado Avalanche\"      \"Dallas Stars\"           \n [3] \"Detroit Red Wings\"       \"Edmonton Oilers\"        \n [5] \"Florida Panthers\"        \"Hartford Whalers\"       \n [7] \"Los Angeles Kings\"       \"Montreal Canadiens\"     \n [9] \"New Jersey Devils\"       \"New York Islanders\"     \n[11] \"New York Rangers\"        \"Ottawa Senators\"        \n[13] \"Philadelphia Flyers\"     \"Phoenix Coyotes\"        \n[15] \"Pittsburgh Penguins\"     \"San Jose Sharks\"        \n[17] \"St. Louis Blues\"         \"Tampa Bay Lightning\"    \n[19] \"Toronto Maple Leafs\"     \"Vancouver Canucks\"      \n[21] \"Washington Capitals\"     \"Mighty Ducks of Anaheim\"\n[23] \"Boston Bruins\"           \"Buffalo Sabres\"         \n[25] \"Calgary Flames\"         \n\n# The %&gt;% symbol takes the ootput of the command on the left and \n# sends it into the first argument of the command on the right.\nrep(c(100,200), 3)\n\n[1] 100 200 100 200 100 200\n\nc(100,200) %&gt;%\n  rep(3)\n\n[1] 100 200 100 200 100 200\n\nteamNames\n\n [1] \"Colorado Avalanche\"      \"Dallas Stars\"           \n [3] \"Detroit Red Wings\"       \"Edmonton Oilers\"        \n [5] \"Florida Panthers\"        \"Hartford Whalers\"       \n [7] \"Los Angeles Kings\"       \"Montreal Canadiens\"     \n [9] \"New Jersey Devils\"       \"New York Islanders\"     \n[11] \"New York Rangers\"        \"Ottawa Senators\"        \n[13] \"Philadelphia Flyers\"     \"Phoenix Coyotes\"        \n[15] \"Pittsburgh Penguins\"     \"San Jose Sharks\"        \n[17] \"St. Louis Blues\"         \"Tampa Bay Lightning\"    \n[19] \"Toronto Maple Leafs\"     \"Vancouver Canucks\"      \n[21] \"Washington Capitals\"     \"Mighty Ducks of Anaheim\"\n[23] \"Boston Bruins\"           \"Buffalo Sabres\"         \n[25] \"Calgary Flames\"         \n\n# Get the year data\nteamYears = fullPage %&gt;%\n  html_elements(cssYear) %&gt;%\n  html_text2()\n\nteamYears\n\n [1] \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\"\n[11] \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\" \"1996\"\n[21] \"1996\" \"1997\" \"1997\" \"1997\" \"1997\"\n\n# now combine the values in a dataframe\ndfTeamInfo = data.frame (name=teamNames, year=teamYears)\ndfTeamInfo\n\n                      name year\n1       Colorado Avalanche 1996\n2             Dallas Stars 1996\n3        Detroit Red Wings 1996\n4          Edmonton Oilers 1996\n5         Florida Panthers 1996\n6         Hartford Whalers 1996\n7        Los Angeles Kings 1996\n8       Montreal Canadiens 1996\n9        New Jersey Devils 1996\n10      New York Islanders 1996\n11        New York Rangers 1996\n12         Ottawa Senators 1996\n13     Philadelphia Flyers 1996\n14         Phoenix Coyotes 1996\n15     Pittsburgh Penguins 1996\n16         San Jose Sharks 1996\n17         St. Louis Blues 1996\n18     Tampa Bay Lightning 1996\n19     Toronto Maple Leafs 1996\n20       Vancouver Canucks 1996\n21     Washington Capitals 1996\n22 Mighty Ducks of Anaheim 1997\n23           Boston Bruins 1997\n24          Buffalo Sabres 1997\n25          Calgary Flames 1997",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#put-it-into-a-function",
    "href": "web-000400-webscrapingContinued-015.html#put-it-into-a-function",
    "title": "31  Web Scraping with R",
    "section": "31.13 Put it into a function",
    "text": "31.13 Put it into a function\n\n#-----------------------------------------------\n# Let's see if we can get the first page of data\n#-----------------------------------------------\n\n# The following function will be useful to get rid of extra \"whitespace\"\n# if necessary.\n\nremoveWhitespace = function(text){\n  text = gsub(\"\\\\n\",\"\", text)\n  text = gsub(\"\\\\t\",\"\", text )\n  \n  return ( gsub(\" \", \"\", text))\n}\n  \nx = \"    this is some info \\n\\nanother line\\nanother line\\tafter a tab\"\ncat(x)\n\n    this is some info \n\nanother line\nanother line    after a tab\n\nremoveWhitespace(x)\n\n[1] \"thisissomeinfoanotherlineanotherlineafteratab\"\n\n# Create a function to scrape the hocky data from one of the \n# pages as specified in the url argument.\ngetHockeyData &lt;- function(url) {\n\n  the_full_html = read_html(url)\n  \n  teamNames = the_full_html %&gt;%\n    # Analyze the HTML from one of the pages to figure out which CSS selector\n    # is best to use. We did so and figured out that the hockey team names\n    # were surrounded with an HTML that had class=\"name\". Therefore the\n    # best css slector to use was \".name\"\n    html_elements( \".name\" ) %&gt;%     \n    html_text()\n  \n  teamNames = removeWhitespace(teamNames)   # the team names seem to be surrounded by whitespace\n\n  wins = the_full_html %&gt;%\n    # Analyze the HTML from one of the pages to figure out which CSS selector\n    # is best to use. We did so and figured out that the number of wins\n    # were surrounded with an HTML that had class=\"wins\". Therefore the\n    # best css slector to use was \".wins\"\n    html_elements( \".wins\" ) %&gt;%   # analyze the HTML to find the appropriate css selector\n    html_text()\n  \n  wins = removeWhitespace(wins)\n\n  # ... we can keep doing this to get all the other data on the page \n  # for each team ... We didn't do that here but feel free to fill in \n  # the missing code to scrape the rest of the data from the webpages.\n  \n  return(data.frame(team=teamNames, wins=wins, stringsAsFactors=FALSE))  \n}",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#some-urls-includes-info-about-the-page-number",
    "href": "web-000400-webscrapingContinued-015.html#some-urls-includes-info-about-the-page-number",
    "title": "31  Web Scraping with R",
    "section": "31.14 Some URLs includes info about the page number",
    "text": "31.14 Some URLs includes info about the page number\n\npage1Url = \"https://scrapethissite.com/pages/forms/?page_num=20\"\ngetHockeyData(page1Url)\n\n                  team wins\n1      LosAngelesKings   34\n2        MinnesotaWild   40\n3    MontrealCanadiens   41\n4   NashvillePredators   40\n5      NewJerseyDevils   51\n6     NewYorkIslanders   26\n7       NewYorkRangers   43\n8       OttawaSenators   36\n9   PhiladelphiaFlyers   44\n10      PhoenixCoyotes   36\n11  PittsburghPenguins   45\n12       SanJoseSharks   53\n13       St.LouisBlues   41\n14   TampaBayLightning   24\n15   TorontoMapleLeafs   34\n16    VancouverCanucks   45\n17  WashingtonCapitals   50\n18        AnaheimDucks   39\n19    AtlantaThrashers   35\n20        BostonBruins   39\n21       BuffaloSabres   45\n22       CalgaryFlames   40\n23  CarolinaHurricanes   35\n24 ColumbusBlueJackets   32\n25   ChicagoBlackhawks   52\n\n#--------------------------------------------------------------------\n# Let's figure out how to write a loop to get multiple pages of data\n#--------------------------------------------------------------------\n\n# The following is the url without the page number\nbaseurl = \"https://scrapethissite.com/pages/forms/?page_num=\"\n\n# get data for the first page\npageNum = \"1\"\nurl = paste0(baseurl, pageNum)\ngetHockeyData (url)\n\n                  team wins\n1         BostonBruins   44\n2        BuffaloSabres   31\n3        CalgaryFlames   46\n4    ChicagoBlackhawks   49\n5      DetroitRedWings   34\n6       EdmontonOilers   37\n7      HartfordWhalers   31\n8      LosAngelesKings   46\n9  MinnesotaNorthStars   27\n10   MontrealCanadiens   39\n11     NewJerseyDevils   32\n12    NewYorkIslanders   25\n13      NewYorkRangers   36\n14  PhiladelphiaFlyers   33\n15  PittsburghPenguins   41\n16     QuebecNordiques   16\n17       St.LouisBlues   47\n18   TorontoMapleLeafs   23\n19    VancouverCanucks   28\n20  WashingtonCapitals   37\n21        WinnipegJets   26\n22        BostonBruins   36\n23       BuffaloSabres   31\n24       CalgaryFlames   31\n25   ChicagoBlackhawks   36\n\n# get data for the 2nd page\nurl=paste0(baseurl, \"2\")\ngetHockeyData(url)\n\n                  team wins\n1      DetroitRedWings   43\n2       EdmontonOilers   36\n3      HartfordWhalers   26\n4      LosAngelesKings   35\n5  MinnesotaNorthStars   32\n6    MontrealCanadiens   41\n7      NewJerseyDevils   38\n8     NewYorkIslanders   34\n9       NewYorkRangers   50\n10  PhiladelphiaFlyers   32\n11  PittsburghPenguins   39\n12     QuebecNordiques   20\n13       SanJoseSharks   17\n14       St.LouisBlues   36\n15   TorontoMapleLeafs   30\n16    VancouverCanucks   42\n17  WashingtonCapitals   45\n18        WinnipegJets   33\n19        BostonBruins   51\n20       BuffaloSabres   38\n21       CalgaryFlames   43\n22   ChicagoBlackhawks   47\n23     DetroitRedWings   47\n24      EdmontonOilers   26\n25     HartfordWhalers   26",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#function-to-get-multiple-pages",
    "href": "web-000400-webscrapingContinued-015.html#function-to-get-multiple-pages",
    "title": "31  Web Scraping with R",
    "section": "31.15 Function to get multiple pages",
    "text": "31.15 Function to get multiple pages\n\n# We can now write a function to get the data from multiple pages of the hockey data.\n# The pages argument is expected to be a vector with the numbers of \n# the pages you want to retrieve.\n\ngetMultiplePages &lt;- function(pages = 1:10){\n  # This is the URL without the page number\n  baseurl = \"https://scrapethissite.com/pages/forms/?page_num=\"\n\n  #   baseurl = \"https://scrapethissite.com/pages/forms/?page_num=THE_PAGE_NUMBER&league=american\n  \n  \n  # baseurl = \"https://finance.yahoo.com/quote/&lt;&lt;&lt;TICKER&gt;&gt;&gt;?p=&lt;&lt;&lt;TICKER&gt;&gt;&gt;&.tsrc=fin-srch\"\n  \n  allData = NA\n  \n  # Loop through all the pages\n  for ( page in pages ){\n    # Create the URL for the current page\n    url = paste0(baseurl, page)\n    \n    # Get the data for the current page\n    hd = getHockeyData(url)\n    \n    # Combine the data for the current page with all of the data\n    # from the pages we have already retreived.\n    \n    if (!is.data.frame(allData)){\n      # This will only happen for the first page of retrieved data.\n      allData = hd\n    } else {\n      # This will happen for all pages other than the first page retrieved.\n      # rbind will only work if allData is already a dataframe. Therefore\n      # we cannot use rbind for the first page of retrieved data. \n      allData = rbind(allData, hd)\n    }\n    # We don't want to overwhelm the web server with too many requests\n    # so we will pause (i.e. sleep) for 1 second after every time we\n    # retrieve a page before getting the next page of data.\n    Sys.sleep(1)\n  }\n  return(allData)\n}\n\ngetMultiplePages(4:6)\n\n                   team wins\n1       FloridaPanthers   33\n2       HartfordWhalers   27\n3       LosAngelesKings   27\n4     MontrealCanadiens   41\n5       NewJerseyDevils   47\n6      NewYorkIslanders   36\n7        NewYorkRangers   52\n8        OttawaSenators   14\n9    PhiladelphiaFlyers   35\n10   PittsburghPenguins   44\n11      QuebecNordiques   34\n12        SanJoseSharks   33\n13        St.LouisBlues   40\n14    TampaBayLightning   30\n15    TorontoMapleLeafs   43\n16     VancouverCanucks   41\n17   WashingtonCapitals   39\n18         WinnipegJets   24\n19 MightyDucksofAnaheim   16\n20         BostonBruins   27\n21        BuffaloSabres   22\n22        CalgaryFlames   24\n23    ChicagoBlackhawks   24\n24          DallasStars   17\n25      DetroitRedWings   33\n26       EdmontonOilers   17\n27      FloridaPanthers   20\n28      HartfordWhalers   19\n29      LosAngelesKings   16\n30    MontrealCanadiens   18\n31      NewJerseyDevils   22\n32     NewYorkIslanders   15\n33       NewYorkRangers   22\n34       OttawaSenators    9\n35   PhiladelphiaFlyers   28\n36   PittsburghPenguins   29\n37      QuebecNordiques   30\n38        SanJoseSharks   19\n39        St.LouisBlues   28\n40    TampaBayLightning   17\n41    TorontoMapleLeafs   21\n42     VancouverCanucks   18\n43   WashingtonCapitals   22\n44         WinnipegJets   16\n45 MightyDucksofAnaheim   35\n46         BostonBruins   40\n47        BuffaloSabres   33\n48        CalgaryFlames   34\n49    ChicagoBlackhawks   40\n50    ColoradoAvalanche   47\n51          DallasStars   26\n52      DetroitRedWings   62\n53       EdmontonOilers   30\n54      FloridaPanthers   41\n55      HartfordWhalers   34\n56      LosAngelesKings   24\n57    MontrealCanadiens   40\n58      NewJerseyDevils   37\n59     NewYorkIslanders   22\n60       NewYorkRangers   41\n61       OttawaSenators   18\n62   PhiladelphiaFlyers   45\n63   PittsburghPenguins   49\n64        SanJoseSharks   20\n65        St.LouisBlues   32\n66    TampaBayLightning   38\n67    TorontoMapleLeafs   34\n68     VancouverCanucks   32\n69   WashingtonCapitals   39\n70         WinnipegJets   36\n71 MightyDucksofAnaheim   36\n72         BostonBruins   26\n73        BuffaloSabres   40\n74        CalgaryFlames   32\n75    ChicagoBlackhawks   34\n\n# BE CAREFUL - the next line may take a little time to run\n# allPages = getMultiplePages(1:24)\n#\n# Let's try it with just 2 pages for now ...\nallPages = getMultiplePages(1:2)",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#scrape-the-number-of-pages-to-get",
    "href": "web-000400-webscrapingContinued-015.html#scrape-the-number-of-pages-to-get",
    "title": "31  Web Scraping with R",
    "section": "31.16 Scrape the number of pages to get",
    "text": "31.16 Scrape the number of pages to get\n\n# Figure out automatically how many pages of data there are on the website\n\nurl= \"https://www.scrapethissite.com/pages/forms/?page_num=1\"\nfullPage = read_html(url)\n\n# css that targets the 24 that represents the 24th page of data\ncss = \"li:nth-child(24) a\"\ncss = \"li:last-child a\"\ncss = \".pagination-area li:nth-last-child(2) a\"\n\nfullPage %&gt;%\n  html_elements(css) %&gt;%\n  html_text2()\n\n[1] \"24\"",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#robots.txt-file",
    "href": "web-000400-webscrapingContinued-015.html#robots.txt-file",
    "title": "31  Web Scraping with R",
    "section": "31.17 robots.txt file",
    "text": "31.17 robots.txt file\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# DEFINITION: root directory (or root folder) ####\n# \n# The \"root\" folder is the top level folder\n# on a computer harddrive or on a website.\n# It is named \"/\" on Mac and \"\\\" on Windows.\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n# EXAMPLE\ndir(\"/\")   # show the files and folders in the root of the harddrive\n\n [1] \"$Recycle.Bin\"              \"$SysReset\"                \n [3] \"BGInfo\"                    \"Brother\"                  \n [5] \"Config.Msi\"                \"Documents and Settings\"   \n [7] \"DumpStack.log.tmp\"         \"hiberfil.sys\"             \n [9] \"Intel\"                     \"OneDriveTemp\"             \n[11] \"pagefile.sys\"              \"PerfLogs\"                 \n[13] \"Program Files\"             \"Program Files (x86)\"      \n[15] \"ProgramData\"               \"Recovery\"                 \n[17] \"swapfile.sys\"              \"System Volume Information\"\n[19] \"Users\"                     \"Windows\"                  \n[21] \"Windows.old\"              \n\n# robots.txt ####\n# \n# Websites may place a file named robots.txt\n# at the very top of their website.\n#\n# Examples\n#   https://finance.yahoo.com/robots.txt    # pretty simple\n#   https://www.amazon.com/robots.txt       # very complex\n#   https://www.gutenberg.org/robots.txt    # pretty typical\n#\n#\n# Example entries in robots.txt\n#     Disallow all robots to scrape the entire site\n#     Since Disallow specifies the \"root\" or top level folder\n#\n#        User-agent: *\n#        Disallow: /\n#\n#     Allow all robots to scrape the entire site\n#     since \"Disallow: \" specifies no path\n#\n#        User-agent: *\n#        Disallow: \n#\n#     Sleep 10 seconds between each page request\n#\n#        crawl-delay: 10\n#\n# More info about robots.txt\n#\n#    Quick overview and a \"test tool\"\n#      https://en.ryte.com/free-tools/robots-txt/\n#\n#    Ultimate robots.txt guide\n#      https://yoast.com/ultimate-guide-robots-txt/\n#\n#    Another test tool\n#      https://technicalseo.com/tools/robots-txt/\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#techniques-for-finding-css-selectors",
    "href": "web-000400-webscrapingContinued-015.html#techniques-for-finding-css-selectors",
    "title": "31  Web Scraping with R",
    "section": "31.18 Techniques for finding CSS selectors",
    "text": "31.18 Techniques for finding CSS selectors\n\n############################################################################.\n# Techniques for finding CSS selectors\n#\n# 1. Analyze the entire HTML code.\n#    Right-click on blank area of page and choose \"view page source\"\n#    (or something similar)\n#\n# 2. Use the built in developer tools in most browsers.\n#    Right click on the data you want to scrape and choose \"inspect\".\n#    That brings you to the browser's developers tools. \n#    Right click on the HTML Tag you want to get a CSS selector for\n#    and choose \"Copy selector\". Then paste the selector into \n#    a text editor (e.g. VSCode or RStudio's editor).\n#    \n#    Warning that these selectors will be too overly specific and\n#    do not generalize well to scrape the same type of data from\n#    the entire webpage.\n#\n#    For example the following css selector was retrieved in this way.\n#    It gets a very specific position on the page. However, if the page\n#    code changes in the future, this selector may stop to work. \n#    This selector is very \"fragile\":\n#\n#        css selector to find the last page \n#        #hockey &gt; div &gt; div.row.pagination-area &gt; div.col-md-10.text-center &gt; ul &gt; li:nth-child(24) &gt; a\n#\n# 3. Use the \"selector gadget\" Chrome extension. \n#    This is very helpful but is also not 100% guaranteed to work \n#    correctly.\n############################################################################.",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#scrape-the-total-number-of-pages.",
    "href": "web-000400-webscrapingContinued-015.html#scrape-the-total-number-of-pages.",
    "title": "31  Web Scraping with R",
    "section": "31.19 “scrape” the total number of pages.",
    "text": "31.19 “scrape” the total number of pages.\n\n############################################################################\n#\n# Write code to \"scrape\" the total number of pages.\n#\n# Find out how many pages there are (since the website may change, \n# we can't assume that there will always be the same number of pages)\n#\n###########################################################################\n\n\n#..................................................................\n# Find the CSS selector that pinpoints the number of the last page\n#..................................................................\n\n# Modern browsers have \"web developer tools\" built into them.\n# These tools can help you to find the css selector that you need.\n# Different browsers have slightly different tools. \n# For the following we will be using Chrome.\n#\n# Navigate to the first page ( https://scrapethissite.com/pages/forms/?page_num=1 )\n#\n# Right click on the last page number and choose \"inspect\". This will\n# reveal a new window that shows the HTML for the page. The part of the HTML\n# that corresponds to the page number is revealed. Make sure the page number\n# is there ...\n#\n# Right click on the highlighted HTML and choose the menu choices :\n# \"Copy | copy selector\". This will copy into the computer's clipboard \n# a CSS selector that will pinpoint that piece of info.\n# \n# Paste the CSS selector into your R code. The following is the \n# css selector that I got when I did this:\n#\n#   #hockey &gt; div &gt; div.row.pagination-area &gt; div.col-md-10.text-center &gt; ul &gt; li:nth-child(24) &gt; a\n#\n# Note that this css selector is \"fragile\" - i.e. it is likely not to work\n# in the future if more data is added to the stie. Therefore it is NOT a very \n# good CSS selector to use. We will examine this issue below. For now, let's \n# just use this selector and revisit this issue later.\n\nurl = \"https://scrapethissite.com/pages/forms/?page_num=1\"\ncssSelector = \"#hockey &gt; div &gt; div.row.pagination-area &gt; div.col-md-10.text-center &gt; ul &gt; li:nth-child(24) &gt; a\"\n\n# save the html for the page in a variable so we can use it \n# again later without needing to pull it down again from the website.\nfull_page = read_html(url)          \n\n# Get last page number by searching the full_page html for the tags\n# identified by the cssSelector and stripping out the tags\nlast_page_number &lt;- full_page %&gt;%\n  html_elements( cssSelector ) %&gt;%\n  html_text()\n\nlast_page_number\n\n[1] \"\\n                                    \\n                                    24\\n                                    \\n                                \"\n\n# Strip out the whitespace \nlast_page_number = removeWhitespace(last_page_number)\nlast_page_number\n\n[1] \"24\"\n\n# Convert the page nubmer to a numeric value\nlast_page_number = as.numeric(last_page_number)\nlast_page_number\n\n[1] 24\n\n# Now that it works, let's create a function that packages up this functionality.\n# It's always a good idea to create a function that neatly packages up your\n# working functionality.\n#\n# The function will take the \"parsed\" html code as an argument.\n\ngetLastPageNumber &lt;- function(theFullHtml) {\n  cssSelector = \n    \"#hockey &gt; div &gt; div.row.pagination-area &gt; div.col-md-10.text-center &gt; ul &gt; li:nth-child(24) &gt; a\"\n  \n  # remember that a function that does not have a return statement\n  # will return the last value that is calculated.\n  theFullHtml %&gt;%\n    html_elements( cssSelector ) %&gt;%\n    html_text() %&gt;%\n    removeWhitespace() %&gt;%\n    as.numeric()\n}\n\nlast_page_number = getLastPageNumber(full_page)\nlast_page_number\n\n[1] 24",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000400-webscrapingContinued-015.html#timing-r-code-with-sys.time",
    "href": "web-000400-webscrapingContinued-015.html#timing-r-code-with-sys.time",
    "title": "31  Web Scraping with R",
    "section": "31.20 Timing R code with Sys.time()",
    "text": "31.20 Timing R code with Sys.time()\n\n# Now that we have the total nubmer of pages, we can get ALL of the data\n# for all the pages as follows.\n#\n# NOTE that this may take a while to run.\n# We can figure out how much time by running all of the following commands\n# together. \n\nSys.time()    # shows the time on your computer\n\n[1] \"2025-01-20 14:36:43 EST\"\n\nstart = Sys.time()\n# put some r code here\nend = Sys.time()\nend - start\n\nTime difference of 0.0005187988 secs\n\nstart_time = Sys.time() # get the time before we start\n\ndataFromAllPages = getMultiplePages(1:last_page_number)   # get all the pages\n\nend_time = Sys.time()   # get the time when it ended\n\nend_time - start_time   # show how long it took\n\nTime difference of 30.79565 secs\n\n# Let's examine the results ...\nnrow(dataFromAllPages)  # how many rows?\n\n[1] 582\n\nhead(dataFromAllPages, 4)  # first few rows ...\n\n               team wins\n1      BostonBruins   44\n2     BuffaloSabres   31\n3     CalgaryFlames   46\n4 ChicagoBlackhawks   49\n\ntail(dataFromAllPages, 4)  # last few rows ...\n\n                  team wins\n579  TorontoMapleLeafs   35\n580   VancouverCanucks   51\n581 WashingtonCapitals   42\n582       WinnipegJets   37\n\n\n\n31.20.1 Finding a css selector that isn’t “fragile”\n\n#######################################################################\n#\n# Finding css selectors that aren't \"fragile\"\n#\n#######################################################################\n\n#--------------------------------------------\n# Quick review of CSS selector rules. \n#--------------------------------------------\n\n# To review the CSS selector rules see the website \n#   https://flukeout.github.io/ \n#\n# Read the tutorial information as well as try to solve the different \n# levels of the game. \n# The answers to the \"game\" on the above website can be found here:\n#   https://gist.github.com/humbertodias/b878772e823fd9863a1e4c2415a3f7b6\n#\n\n\n#-----------------------------------------------\n# Analyzing the CSS Selector we got from Chrome\n# (There is an issue with it. \n#  We will address the issue and fix it.) \n#------------------------------------------------\n\n# The following was the selector that we got from Chrome \n# to find the last page number:\n#\n#   #hockey &gt; div &gt; div.row.pagination-area &gt; div.col-md-10.text-center &gt; ul &gt; li:nth-child(24) &gt; a\n#\n# This selector is \"fragile\". It will work for now but might not work in the future. \n# This website has data for several years up until the present time. We \n# anticipate that in the future there will be additional pages of data.\n# The CSS selector that we found will work to find the 24th page number\n# (which is currently the last page). However, in the future if there are \n# more pages, the selector will continue to return the number 24. \n# To understand exactly why, let's analyze this selector:\n# For a review of the rules for how selectors are built see the following \n# page: https://flukeout.github.io/\n#\n\n# &lt;div&gt;                # div is the parent of h1 and ul\n#   &lt;h1&gt;My stuff&lt;/h1&gt;  # h1 is the child of div and the sibling of ul\n#   &lt;ul&gt;               # ul is the parent of 3 &lt;li&gt;s, the 2nd child of div and a sibling of h1\n#     &lt;li&gt;             # \n#       &lt;strong&gt;       \n#         Table\n#       &lt;/strong&gt;&lt;/li&gt;\n#     &lt;li&gt;Chairs&lt;/li&gt;\n#     &lt;li&gt;Fork&lt;/li&gt;\n#   &lt;/ul&gt;\n# &lt;/div&gt;\n\n\n# The following breaks down the selector that Chrome figured out into its \n# different parts:\n#\n#   #hockey                   # find the HTML start tag whose id has a value id=\"hockey\" \n#   &gt;                         # directly inside of that element\n#   div                       # there is a &lt;div&gt; tag\n#   &gt;                         # directly inside of that div tag\n#   div.row.pagination-area   # there is a &lt;div&gt; tag that has row and pagination-area classes, i.e. &lt;div class=\"row pagination-area\"&gt;\n#   &gt;                         # directly inside of that\n#   div.col-md-10.text-center # there is div tag with classes \"col-md-10\" and \"text-center\", i.e. &lt;div class=\"col-md-10 text-center\"&gt;\n#   &gt;                         # directly inside of that \n#   ul                        # there is a ul tag\n#   &gt;                         # directly inside that there is\n#   li:nth-child(24)          # an &lt;li&gt; tag that is the 24th tag inside of the enclosing &lt;ul&gt; tag\n#   &gt;                         # directly inside that there is \n#   a                         # an \"a\" tag\n#\n# You should take the time to convince yourself that the css selector is \n# accurate today by looking carefully at the HTML code and noting exactly where the \n# last page number is in the context of the other tags and attributes on the page. \n\n\n#................................................\n# Using VSCode (or another text ediotr) to analyze the HTML\n#................................................\n\n# It's much easier to navigate around the HTML code by analyzing the HTML in an HTML editor. \n# VSCode works well for this. To get the full HTML, right click on the page\n# and choose \"View page source\" (in Chrome or a similar link in other browsers).\n# Then copy all the code (ctrl-a on windows or cmd-a on Mac) and paste\n# it into a new VSCode file. Then save the file with a .html extension\n# to ensure that VSCode knows how to navigate around the file. \n# In VSCode you can now point to the left margin and press the arrows that appear\n# to \"collapse\" or \"expand\" the HTML tags. Doing so helps a lot in trying to \n# understand how the HTML file is organized.\n#\n# Other useful features in VSCode to help with editing HTML:\n#\n# - alt-shift-F   \n#    \n#     Remember that HTML does not require proper indentation to work in the webpage.\n#     However, without proper indentation, it is hard to read the HTML. Pressing\n#     shift-alt-F will automatically \"format\" the entire HTML file so that it \n#     is indented properly and is easier to read.\n#\n# - As noted above - point to left margin to see arrows to \n#   collapse or expand HTML elements.\n#\n# - ctrl-shift-P\n#\n#     VSCode has many features that are not directly available through the\n#     menus. ctrl-shift-P (Windows) or cmd-shift-P (mac) reveals the\n#     \"command palette\". This is a quick way to search for commands\n#     in VSCode which you might not otherwise know about. Try it. \n#     For example,\n#\n#     * press ctrl-shift-P and type \"comment\" (without the quotes). Then choose\n#       \"Add line comment\" to automatically insert &lt;!--   --&gt; into your HTML file.\n#       You can add comments to the HTML file as you are examining it. This may\n#       help you when you are trying to figure out the structure of a \n#       complex HTML file and how to \n#    \n#\n#     * Highlight some text, press ctrl-shift-P. \n#       Then type \"case\" (without the quotes). You will see options to transform \n#       the selected text upper or lowercase. \n#\n# - For more tips on how to use VSCode to edit HTML files: \n#   https://code.visualstudio.com/docs/languages/html\n#\n# - For more tips on how to use VSCode in general:\n#   https://code.visualstudio.com/docs/getstarted/tips-and-tricks\n\n\n#................................................\n# ... back to analyzing the CSS selector\n#................................................\n\n# From analyzing this HTML, we determine that each page number is in an &lt;li&gt;\n# element. Since there are 24 pages of data there are 24 &lt;li&gt; tags (each contains\n# a link to one of the page numbers). There is also one more &lt;li&gt; tag that\n# contains the \"next page\" button.     \n#\n# In the CSS Selector tha we got from Chrome \"li:nth-child(24)\" is specifically\n# targeting the 24th &lt;li&gt; tag. That is the last tag today. However, \n# if in the future more pages of data are added to the website, this selector\n# will still retrieve the 24th &lt;li&gt; tag and not the 2nd to last &lt;li&gt; tag\n# (remember, the last &lt;li&gt; tag is for the \"next page\" button).\n#\n# (NOTE: the \"next page\" link appears in the HTML code\n# as \"next page\" but is rendered in the browser as \"&gt;&gt;\". Replacing the\n# words \"next page\" in the HTML with \"&gt;&gt;\" on the rendered page\n# is accomplished through CSS rules - but this has no effect on  \n# what we're trying to accomplish. When scraping a page, you work with what's \n# in the HTML file, not what is rendered in the browser.)\n#\n# Therefore it is important to analyze the HTML and try \n# to find a \"less fragile\" css selector the LAST page number the same information.\n# After looking at the HTML code carefully, it seems like the &lt;ul&gt; tag\n# referenced in the CSS selector that we found has a class=\"pagination\" attribute, \n# ie. &lt;ul class=\"pagination\"&gt;. We can target that directly with \".pagination\".\n#\n# The li that points to the last page happens to be the 2nd to last \n# &lt;li&gt; tag that is directly inside this ul tag, i.e. \n#\n#    &lt;ul class=\"pagination\"&gt;\n#       &lt;li&gt; info about page 1 &lt;/li&gt;\n#       &lt;li&gt; info about page 2 &lt;/li&gt;\n#         etc ...\n#       &lt;li&gt; info about the last page &lt;/li&gt;         # THIS IS THE &lt;li&gt; WE WANT\n#       &lt;li&gt; info about the \"next\" button &lt;/li&gt;\n#    &lt;/ul&gt;\n#\n# Our css selector therefore becomes :    \".pagination &gt; li:nth-last-child(2)\"\n# Let's see if our code works with the new CSS selector\n\ngetLastPageNumber &lt;- function(theFullHtml) {\n  \n  # Selector specfies the \n  # 2nd to last li inside the a tag that contains class=\"pagination\"\n  selector = \".pagination &gt; li:nth-last-child(2)\"    \n  \n  # remember that a function that does not have a return statement\n  # will return the last value that is calculated.\n  theFullHtml %&gt;%\n    html_elements( selector ) %&gt;%\n    html_text() %&gt;%\n    removeWhitespace() %&gt;%\n    as.numeric()\n}\n\nfull_page = read_html(\"https://scrapethissite.com/pages/forms/?page_num=1\")\n\ngetLastPageNumber(full_page)  # test the new version\n\n[1] 24",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Web Scraping with R</span>"
    ]
  },
  {
    "objectID": "web-000130-WebscrapingJavascriptSites-v003.html",
    "href": "web-000130-WebscrapingJavascriptSites-v003.html",
    "title": "32  Scraping Dynamic (JavaScript) Websites",
    "section": "",
    "text": "32.1 Files for the rest of this presentation\nClick here to download a zip file that contains several files we will use in this presentation:\nhtmlExamples-v001.zip",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Scraping Dynamic (JavaScript) Websites</span>"
    ]
  },
  {
    "objectID": "web-000130-WebscrapingJavascriptSites-v003.html#intro-to-rselenium",
    "href": "web-000130-WebscrapingJavascriptSites-v003.html#intro-to-rselenium",
    "title": "32  Scraping Dynamic (JavaScript) Websites",
    "section": "32.2 Intro to RSelenium",
    "text": "32.2 Intro to RSelenium\n\nThis is an example of a JavaScript enabled webpage.\njavascriptExample-v002.html\nClick here for a Word document that discusses scraping JavaScript enabled websites with RSelenium.\n000130-WebscrapingJavascriptSitesWithRselenium-v002.docx",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Scraping Dynamic (JavaScript) Websites</span>"
    ]
  },
  {
    "objectID": "web-000420-practiceWithWebScraping-v001-ANSWERS-v002.html",
    "href": "web-000420-practiceWithWebScraping-v001-ANSWERS-v002.html",
    "title": "33  CSS Selector questions and answers",
    "section": "",
    "text": "library(rvest)\n\n#########################################################.\n#########################################################.\n# For information about CSS selectors, see the explanations on the \n# various levels of the CSS selector Game found here:\n#\n#    https://flukeout.github.io/\n#\n# Here are some other websites for learning and practicing\n# CSS Selectors\n#\n#    https://css-speedrun.netlify.app/  \n#    # answers are here: https://github.com/Vincenius/css-speedrun\n#\n#    https://css-selector.netlify.app/\n#    # on this page write the selector that correctly selects the one\n#    # line that contains the words \"Select me\"\n#\n#########################################################.\n\n#########################################################################.\n# The following code is how we typically worked with local HTML files\n# in class:\n#\n#\n# This is the folder that contains the HTML file\n#    folder = \"/Users/yrose/Dropbox (Personal)/website/yu/ids2460-dataMgmtForAnal/83spr23-ids2460-dataManagement/000600-WebScraping\"\n#    setwd(folder)\n#\n# This is the html file name\n#    fullPage = read_html(\"000420-practiceWithWebScraping-v001.html\")\n#\n# This command reads the HTML file into R\n#    fullPage = read_html(\"000420-practiceWithWebScraping-v001.html\")\n#\n#########################################################################.\n#\n# Instead of reading from an HTML file, I put the text of the HTML directly\n# into the R file by using an R r\"(raw string)\".  You can enclose anything\n# between r\"(   and   )\"   without using backslashes on the contents. \n# This allows us to very simply create a single R variable that contains\n# the entire text of the HTML file directly in this R file. That makes \n# understanding the answers to the questions below easier since you can\n# see the HTML directly in this file.\n#\n#########################################################################.\n\ntextOfHtmlFile = r\"(\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;this is the title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;one&lt;/h1&gt;\n\n    &lt;div class=\"a\"&gt;\n      &lt;h2&gt;three&lt;/h2&gt;\n      &lt;p class=\"c\"&gt;four&lt;/p&gt;\n      &lt;p class=\"d\"&gt;five&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"b\"&gt;\n      &lt;h2&gt;six&lt;/h2&gt;\n      &lt;p class=\"d\"&gt;seven&lt;/p&gt;\n      &lt;p class=\"c\"&gt;eight&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;h3&gt;nine&lt;/h3&gt;\n    &lt;div class=\"c\"&gt;\n      &lt;p&gt;ten&lt;/p&gt;\n      &lt;p&gt;eleven&lt;/p&gt;\n      &lt;p&gt;twelve&lt;/p&gt;\n      &lt;p&gt;thirteen&lt;/p&gt;\n      &lt;p&gt;fourteen&lt;/p&gt;\n      &lt;p&gt;fifteen&lt;/p&gt;\n      &lt;p&gt;sixteen&lt;/p&gt;\n      &lt;p&gt;seventeen&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;p id=\"x\"&gt;eighteen&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n)\"\n\nfullPage = read_html(textOfHtmlFile)\n\n#########################################################################.\n#\n# For your convenience you can use this function to view the HTML\n# directly in the RStudio \"Viewer\" tab \n# (by default Viewer is in the lower right corner of the RStudio window)\n#\n#########################################################################.\n\nviewHtmlInRStudio = function(htmlText){\n  filename = tempfile()   # create a temporary filename\n  filename = paste0(filename, \".html\")  # add an html extension to the filename\n  cat(\"Html is in \", filename , \"\\n\", sep=\"\") # show where the file is (you can ignore this)\n  writeLines(htmlText, filename) # write the html text to the file\n  rstudioapi::viewer(filename)  # display the html page in the RStudio viewer\n  \n  # Wait 2 seconds before removing the file to make sure it has already\n  # been displayed in the RStudio \"viewer\" tab\n  Sys.sleep(2)\n  unlink(filename)  # remove the temporary file\n}\n\n\n#viewHtmlInRStudio (textOfHtmlFile)\n\n\n\n\n\n########################################################################.\n# Question 1a.\n#\n# What CSS selector targets just the following words: \n#  eighteen\n########################################################################.\n\n\n# This is ONE POSSIBLE answer\n# Use the #id selector\n# See \"level 3\" and the explanation in the CSS selector game here:\n# https://flukeout.github.io/\ncss = \"#x\"\n  \n# test the answer to make sure it works\nfullPage %&gt;% \n  html_nodes(css) %&gt;%\n  html_text2()\n\n[1] \"eighteen\"\n\n########################################################################.\n# Question 1b.\n#\n# What CSS selector targets just the following words: \n#  three\n#  six\n#  ten\n########################################################################.\n\n# This is ONE POSSIBLE answer\n# Use the following selector rules:\n#\n#   Descendant Selector (i.e. Selector1  Selctor2)  # see level 4 of CSS Game\n#   :first-child                                    # see level 15 of CSS Game\n\ncss = \"div  :first-child\"\n\n# test the answer to make sure it works\nfullPage %&gt;% \n  html_nodes(css) %&gt;%\n  html_text2()\n\n[1] \"three\" \"six\"   \"ten\"  \n\n########################################################################.\n# Question 1c.\n#\n# What CSS selector targets just the following words: \n#  four\n#  seven\n########################################################################.\n\n# This is ONE POSSIBLE answer\n# Use the following selector rules:\n#\n#   Adjacent Sibling Selector  # see level 12 of CSS Game\n\ncss = \"h2 + p\"\n\n# test the answer to make sure it works\nfullPage %&gt;% \n  html_nodes(css) %&gt;%\n  html_text2()\n\n[1] \"four\"  \"seven\"\n\n########################################################################.\n# Question 1d.\n#\n# What CSS selector targets just the following words:\n#  thirteen\n#  fifteen\n#  seventeen\n########################################################################.\n\n# This is ONE POSSIBLE answer\n# Use the following selector rules:\n#\n#   nth-of-type   # see level 22 of CSS Game\n\ncss = \"p:nth-of-type(2n+4)\"\n\n# test the answer to make sure it works\nfullPage %&gt;% \n  html_nodes(css) %&gt;%\n  html_text2()\n\n[1] \"thirteen\"  \"fifteen\"   \"seventeen\"\n\n########################################################################.\n# Question 1e.\n#\n# What CSS selector targets just the following words: \n#  six\n#  seven\n#  eight\n########################################################################.\n\n\n# This is ONE POSSIBLE answer\n# Use the following selector rules:\n#\n#   Class Selector (i.e. .classname)                # see level 6 of CSS Game\n#   Descendant Selector (i.e. Selector1  Selctor2)  # see level 4 of CSS Game\n#   The Universal Selector (i.e. *)                 # see level 10 of CSS Game\ncss = \".b *\"\n\n# test the answer to make sure it works\nfullPage %&gt;% \n  html_nodes(css) %&gt;%\n  html_text2()\n\n[1] \"six\"   \"seven\" \"eight\"\n\n########################################################################.\n# Question 2.\n#\n# Save the HTML code in a file and display it in your browser. Modify the code \n# so that the oddNumber numbered words appear in green text and the evenNumber numbered \n# words appear in red text. You may add any HTML or css code that you think is\n# appropriate. However, do not modify the overall layout of the page (e.g. all\n# headings should remain headings, all paragraphs should remain paragraphs,\n# etc.)\n########################################################################.\n\n# NOTE - instead of modifying the HTML in a file I will show how to \n# modify the HTML code directly in this R file.\n#\n# The following is the original HTML code from above with some modifications.\n#\n# Step1 :   add class=\"evenNumber\" to the tags that contain evenNumber numbers\n#           add class=\"oddNumber\" to the tags that contain evenNumber numbers\n#\n#    The words \"evenNumber\" and \"oddNumber\" are NOT part of CSS or HTML. \n#    They are just class names that I \"made up\".\n#\n#    If a tag already has a class=\"something\" just add the new class name\n#    by putting a space between the new name and the original name. \n#    For example  &lt;p class=\"oddNumber d\"&gt;seven&lt;/p&gt;\n#    means that the p tag has both a class named \"oddNumber\" and a class\n#    named \"d\".\n#\n# Step 2: Add the following &lt;style&gt; element with these CSS rules into\n#         the &lt;head&gt;...&lt;/head&gt; element of the page.\n#\n#             &lt;style&gt;\n#               .oddNumber { color: green; }\n#               .evenNumber { color: red; }\n#             &lt;/style&gt;\n  \nmodifiedHtml = r\"(\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;this is the title&lt;/title&gt;\n\n    &lt;!-- add the following css rules --&gt;\n    &lt;style&gt;\n      .oddNumber { color: green; }\n      .evenNumber { color: red; }\n    &lt;/style&gt;\n\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1 class=\"oddNumber\"&gt;one&lt;/h1&gt;\n\n    &lt;div class=\"a\"&gt;\n      &lt;h2 class=\"oddNumber\"&gt;three&lt;/h2&gt;\n      &lt;p class=\"evenNumber c\"&gt;four&lt;/p&gt;\n      &lt;p class=\"oddNumber d\"&gt;five&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"b\"&gt;\n      &lt;h2 class=\"evenNumber\"&gt;six&lt;/h2&gt;\n      &lt;p class=\"oddNumber d\"&gt;seven&lt;/p&gt;\n      &lt;p class=\"evenNumber c\"&gt;eight&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;h3 class=\"oddNumber\"&gt;nine&lt;/h3&gt;\n    &lt;div class=\"c\"&gt;\n      &lt;p class=\"evenNumber\"&gt;ten&lt;/p&gt;\n      &lt;p class=\"oddNumber\"&gt;eleven&lt;/p&gt;\n      &lt;p class=\"evenNumber\"&gt;twelve&lt;/p&gt;\n      &lt;p class=\"oddNumber\"&gt;thirteen&lt;/p&gt;\n      &lt;p class=\"evenNumber\"&gt;fourteen&lt;/p&gt;\n      &lt;p class=\"oddNumber\"&gt;fifteen&lt;/p&gt;\n      &lt;p class=\"evenNumber\"&gt;sixteen&lt;/p&gt;\n      &lt;p class=\"oddNumber\"&gt;seventeen&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;p class=\"evenNumber\" id=\"x\"&gt;eighteen&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n)\"\n\n# Show the results\n#\n#viewHtmlInRStudio(modifiedHtml)",
    "crumbs": [
      "Web Scraping",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>CSS Selector questions and answers</span>"
    ]
  },
  {
    "objectID": "0990100-cleaningData-v001.html",
    "href": "0990100-cleaningData-v001.html",
    "title": "34  “Cleaning” data",
    "section": "",
    "text": "Often data comes to us in a “messy” format. One of the “less glamorous” but very important jobs of anyone working with data is to know how to “clean up” “messy” data. In other words to put the data into a common format.\nFor example, suppose that employees in a company submit expense reports every month for travel and other business expenses. It would be best if the data entry system (e.g. a website) enforced a standard format for the data. However, this doesn’t always happen. Sometimes the system tries to enforce a specific format but people “misuse” the system leading to inconsistencies between different entries. Sometimes data from different data entry systems are combined into a single data set.\nThe data below represents expenses from various employees. There are many inconsistencies between different entries. For example, some names are in “first last” format and some names are in “last, first” format. There are many other formatting inconsistencies that are listed below.\n\nlibrary(tibble)\nexpenses = tribble(\n  ~employee,           ~date,          ~amount,          ~category,         ~comments,\n  \"Sue Smith\",         \"1/19/2023\",    \"59.99\",         \"food\",            \"lunch with client\",\n  \"Schwartz, Joe\",     \"01/19/2023\",   \"$27.00\",        \"office supplies\", \"paper for printer\",\n  \"mike david harris\", \"2023-01-19\",   \"25\",            \"Office Stuff\",    NA,\n  \"Dr. A. Davis\",      \"19/1/2023\",    \"five hundred\",  \"FOOD\",            \"NA\",\n  \"Dr Jones\",          \"1/19/23\",      \"1,234.56\",      \"office suppl.\",   \"chairs\",\n  \"S. Jones Jr\",       \"19/1/23\",      \"1000\",          \"Office supplies\", \"desk\",\n  \"Conway, Ella Sr.\",  \"Jan 19, 2023\", \"$35.23\",        \"LUNCH\",           \"---\",\n)\n\nas.data.frame(expenses)\n\n           employee         date       amount        category          comments\n1         Sue Smith    1/19/2023        59.99            food lunch with client\n2     Schwartz, Joe   01/19/2023       $27.00 office supplies paper for printer\n3 mike david harris   2023-01-19           25    Office Stuff              &lt;NA&gt;\n4      Dr. A. Davis    19/1/2023 five hundred            FOOD                NA\n5          Dr Jones      1/19/23     1,234.56   office suppl.            chairs\n6       S. Jones Jr      19/1/23         1000 Office supplies              desk\n7  Conway, Ella Sr. Jan 19, 2023       $35.23           LUNCH               ---\n\n\nThe following are many of the inconsistencies\n\nInconsistencies with the name entries\n\nsome names are in “first last” format and some names are in “last, first” format.\nsome names are capitalized, some aren’t\nsome names have middle include middle names, some don’t\nsome names include titles, some don’t\nsome names include a title, e.g. Dr. , while some don’t\nsome of the titles contain a period after the title, some don’t\nsome names include a suffix (e.g. Jr), some don’t\n\nInconsistencies with dates\n\nsome dates are in mm/dd/yyyy format (USA style)\nsome dates are in dd/mm/yyyy format (European style)\nsome dates are in yyyy-mm-dd format (standard for many computer systems)\nsome dates use 4 digit years, some use 2 digit years\nsome dates have a leading zero for single digit days or months\n\nThere are additional inconsistencies with the amount, category and comments columns\n\n\n35 What you need to do\nWrite the following function named cleanUp that takes the dataframe as an argument and returns a cleaned dataframe where all of the values in each column follow a consistent structure.",
    "crumbs": [
      "Questions",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>\"Cleaning\" data</span>"
    ]
  },
  {
    "objectID": "0000100-topics-v001.html",
    "href": "0000100-topics-v001.html",
    "title": "35  Topics",
    "section": "",
    "text": "35.1 Quarto (newer version of RMarkdown)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Topics</span>"
    ]
  },
  {
    "objectID": "0000100-topics-v001.html#more-practice-with-base-r",
    "href": "0000100-topics-v001.html#more-practice-with-base-r",
    "title": "35  Topics",
    "section": "35.2 More practice with “base” R",
    "text": "35.2 More practice with “base” R\nThroughout the course you will be working with R. You must understand all of the basics that were covered in the R programming course. This includes but is no limited to lists,dataframes,user defined functions, if/else/else if, while loop, for loop, etc. etc. etc.\nResources\n\nhttp://yrosenthal.com/rnotes",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Topics</span>"
    ]
  },
  {
    "objectID": "0000100-topics-v001.html#r-packages",
    "href": "0000100-topics-v001.html#r-packages",
    "title": "35  Topics",
    "section": "35.3 R Packages",
    "text": "35.3 R Packages\n\ninstall.packages\nlibrary vs require\nCRAN\ntidyverse packages - https://www.tidyverse.org/packages/\n\nggplot2\ndplyr\n\nhttps://dplyr.tidyverse.org/\nhttps://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html\n\ntidyr https://tidyr.tidyverse.org/\nreadr https://readr.tidyverse.org/\n\nread_csv(): comma-separated values (CSV)\nread_tsv(): tab-separated values (TSV)\nread_csv2(): semicolon-separated values with , as the decimal mark\nread_delim(): delimited files (CSV and TSV are important special cases)\nread_fwf(): fixed-width files\nread_table(): whitespace-separated files\nread_log(): web log files\n\npurr\ntibble https://tibble.tidyverse.org/\nstringr\nforcats\nOther tidyverse packages\n\nmagrittr\nglue\nlubridate\nhms\nblob\ndtplyr",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Topics</span>"
    ]
  },
  {
    "objectID": "0000100-topics-v001.html#command-line-interfaces",
    "href": "0000100-topics-v001.html#command-line-interfaces",
    "title": "35  Topics",
    "section": "36.1 Command Line Interfaces",
    "text": "36.1 Command Line Interfaces\n\nwhat is a command line interface (CLI)\nWindows (CMD, Powershell)\nUnix, Linux and Mac Terminal (Bash and others)\nBash\n\nTerminal tab in RStudio\nworking with the file system\n\npwd\nls -a -l -r -t\nwildcards: * [abc] [!abc] [a-cw-z] [!0-9] \\\nhttps://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm\ncd\n.. and .\n.hiddenFiles\n$HOME\necho\n$HOME\nmkdir\nrm\nrmdir\ntree\n\nediting files\n\nnano\nvim https://www.openvim.com/\ntouch\n\nworking with text\n\ncut\ngrep\n\nredirection\n\ncommand &gt; filename\ncommand &lt; filename\ncommand | command2 | command3\n\nscript files\n\nchmod command\n$PATH\nbasic script files\n$env\nvariable=value # no spaces\n37 comments",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Topics</span>"
    ]
  },
  {
    "objectID": "0000100-topics-v001.html#regular-expressions",
    "href": "0000100-topics-v001.html#regular-expressions",
    "title": "35  Topics",
    "section": "37.1 Regular Expressions",
    "text": "37.1 Regular Expressions\n\nhttp://regextutorials.com/ Good examples with practice questions. Need to explain about /g and other forward slash options.\nhttps://regexcrossword.com/",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Topics</span>"
    ]
  },
  {
    "objectID": "0000100-topics-v001.html#web-scraping",
    "href": "0000100-topics-v001.html#web-scraping",
    "title": "35  Topics",
    "section": "37.2 Web scraping",
    "text": "37.2 Web scraping\n\nhttps://www.zenrows.com/blog/web-scraping-r#prerequisites",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Topics</span>"
    ]
  },
  {
    "objectID": "0000100-topics-v001.html#other-topics-beyond-the-scope-of-the-course",
    "href": "0000100-topics-v001.html#other-topics-beyond-the-scope-of-the-course",
    "title": "35  Topics",
    "section": "37.3 Other topics (beyond the scope of the course)",
    "text": "37.3 Other topics (beyond the scope of the course)\n\nWorking with large data\n\ndata.table package - https://rdatatable.gitlab.io/data.table/",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Topics</span>"
    ]
  },
  {
    "objectID": "0000200-bibliography-v001.html",
    "href": "0000200-bibliography-v001.html",
    "title": "36  Bibliography",
    "section": "",
    "text": "36.1 SQL (Structured Query Language)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "0000200-bibliography-v001.html#sql-structured-query-language",
    "href": "0000200-bibliography-v001.html#sql-structured-query-language",
    "title": "36  Bibliography",
    "section": "",
    "text": "online resources:\n\nhttps://www.w3schools.com/sql/default.asp\nhttps://www.sqlzoo.net/wiki/SQL_Tutorial\n\nBooks - don’t buy these (yet):\n\nMurach’s MySQL (4th Edition)\nby Joel Murach\n20 chapters, 648 pages, 266 figures\nPublished November 2023\nISBN 978-1-943873-10-4\npublisher: https://www.murach.com/shop/murach-s-mysql-4th-edition-detail amazon.com: https://www.amazon.com/Murachs-MySQL-Reference-Joel-Murach/dp/B0CHMPQ3FC\nSQL QuickStart Guide: The Simplified Beginner’s Guide\nto Managing, Analyzing, and Manipulating Data With SQL\n(QuickStart Guides™ - Technology)\nby Walter Shields (Author) Paperback\nNovember 18, 2019",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "0000200-bibliography-v001.html#r-and-tidyverse",
    "href": "0000200-bibliography-v001.html#r-and-tidyverse",
    "title": "36  Bibliography",
    "section": "36.2 R and tidyverse",
    "text": "36.2 R and tidyverse\n\nR 4 Data Science, 2nd edition (R4DS) by Hadly Wickham\n\nFree to read online: https://r4ds.hadley.nz/\nPurchase hardcopy: https://www.amazon.com/Data-Science-Transform-Visualize-Model/dp/1492097403/\n\nUnofficial r4ds solution manual - https://jrnold.github.io/r4ds-exercise-solutions/\ntidyverse packages - https://www.tidyverse.org/packages/\n\ntibble https://tibble.tidyverse.org/\nreadr https://readr.tidyverse.org/\n\nread_csv(): comma-separated values (CSV)\nread_tsv(): tab-separated values (TSV)\nread_csv2(): semicolon-separated values with , as the decimal mark\nread_delim(): delimited files (CSV and TSV are important special cases)\nread_fwf(): fixed-width files\nread_table(): whitespace-separated files\nread_log(): web log files\n\ndplyr\n\nhttps://dplyr.tidyverse.org/\nhttps://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html\n\nstringr\ntidyr https://tidyr.tidyverse.org/\nOther tidyverse packages\n\nggplot https://ggplot2.tidyverse.org/",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "0000200-bibliography-v001.html#various-topics---bash-command-line-html-css-regular-expressions-regex",
    "href": "0000200-bibliography-v001.html#various-topics---bash-command-line-html-css-regular-expressions-regex",
    "title": "36  Bibliography",
    "section": "36.3 Various topics - bash command line, html, css, regular expressions (regex)",
    "text": "36.3 Various topics - bash command line, html, css, regular expressions (regex)\n\nhttps://ryanstutorials.net/\n\nhttps://ryanstutorials.net/html-tutorial/\nhttps://ryanstutorials.net/css-tutorial/\nhttps://ryanstutorials.net/regular-expressions-tutorial/",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "0000200-bibliography-v001.html#bash-command-line",
    "href": "0000200-bibliography-v001.html#bash-command-line",
    "title": "36  Bibliography",
    "section": "36.4 Bash command line",
    "text": "36.4 Bash command line\n\nA Comprehensive Introduction to Command Line for R Users\n\nhttps://blog.rsquaredacademy.com/command-line-basics-for-r-users/\n\nUsing the RStudio Terminal\n\nhttps://support.posit.co/hc/en-us/articles/115010737148-Using-the-RStudio-Terminal\nhttps://support.posit.co/hc/en-us/articles/115010737148-Using-the-RStudio-Terminal-in-the-RStudio-IDE\n\nhttps://ryanstutorials.net/\n\nhttps://ryanstutorials.net/linuxtutorial/\nhttps://ryanstutorials.net/bash-scripting-tutorial/\n\nlinux man pages - describes commands you can use in Bash\n\nhttps://man7.org/linux/man-pages/dir_section_1.html\n\nvim text editor\n\nhttps://www.openvim.com/\nhttps://linuxconfig.org/vim-tutorial",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "0000300-whereToFindDatasets-v001.html",
    "href": "0000300-whereToFindDatasets-v001.html",
    "title": "37  Where to find datasets",
    "section": "",
    "text": "37.1 Datasets in R packages\nThere are many R packages that come with datasets. By “dataset” I mean any data that is referenced in an R variable. This can be a dataframe, a vector, a list, etc. etc. etc. Below are just a few example R packages that contain datasets. There are many, many others. Also make sure to see the section below about R pacakges that offer access to APIs.\nTo use the data in a package you should first install the package. As an example we’ll use the “nycflights13” package which contains data about all airline flights that came into or out of New York City in 2013.\nif(!require(\"nycflights13\")){install.packages(\"nycflights13\");require(\"nycflights13\");}\n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\nWe can now view which datasets are in the package with the following command:\ndata(package=\"nycflights13\")\n\nError in find.package(package, lib.loc, verbose = verbose): there is no package called 'nycflights13'\nTo see the list of datasets in ALL packages that you have installed, you can use the following command\ndata(package=rownames(installed.packages()))\nTo access the data you can use the syntax PACKAGE_NAME::VARIABLE_NAME. Alternatively you can load the package by using the library or require functions and then access the data by just using the variable name.\n# This will work after you've installed the nycflights13 package\n# even before you've loaded it.\n\nhead(nycflights13::flights)   # show the first few rows\n\nError in loadNamespace(x): there is no package called 'nycflights13'\n\n# Alternatively if you have already loaded the package with the \n# library or require functions (which we did above) you can access\n# the flights variable without specifying nycflights::\n\nhead(flights)   # show the first few rows\n\nError: object 'flights' not found",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Where to find datasets</span>"
    ]
  },
  {
    "objectID": "0000300-whereToFindDatasets-v001.html#datasets-in-r-packages",
    "href": "0000300-whereToFindDatasets-v001.html#datasets-in-r-packages",
    "title": "37  Where to find datasets",
    "section": "",
    "text": "Package name\nDescription\n\n\n\n\nnycflights13\ndata about all flights coming into or out of NYC in 2013.\n\n\nLahman\nExtensive data about baseball teams, players, etc.\n\n\nbabynames\ndata provided by USA Social Security administration about births from 1880 through 2017\n\n\nstringr\nContains vectors fruits,sentences,words that the help uses in examples.\n\n\netc …\n…\n\n\n\n\n\n\n\n\n\n\n\n\nnycflights13 package\n\ninstall.packages(“nycflights13”) # install the package library(nycflights13) # load the package\nhelp(package=“nycflights13”) # see what is included in the package",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Where to find datasets</span>"
    ]
  },
  {
    "objectID": "0000300-whereToFindDatasets-v001.html#project-gutenberg",
    "href": "0000300-whereToFindDatasets-v001.html#project-gutenberg",
    "title": "37  Where to find datasets",
    "section": "37.2 Project Gutenberg",
    "text": "37.2 Project Gutenberg\nhttps://www.gutenberg.org/\nThis website hosts complete text of many many books whose copyright has expired. If you are planning to work with “text” files, then you should search for the “UTF-8” or “ASCII” or “Plain Text” versions.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Where to find datasets</span>"
    ]
  },
  {
    "objectID": "0000300-whereToFindDatasets-v001.html#search-for-open-data",
    "href": "0000300-whereToFindDatasets-v001.html#search-for-open-data",
    "title": "37  Where to find datasets",
    "section": "37.3 Search for “Open Data”",
    "text": "37.3 Search for “Open Data”\nhttps://www.google.com/search?q=open+data\nSearch for “open data” and MANY websites, especially government based websites will come up. For example:\n\nhttps://data.gov/ - US Government Open Data\nhttps://data.ny.gov/ - New York State\nhttps://opendata.cityofnewyork.us/ - New York City\nhttps://data.nasa.gov/\nmany, many others …",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Where to find datasets</span>"
    ]
  },
  {
    "objectID": "0000300-whereToFindDatasets-v001.html#google-dataset-search",
    "href": "0000300-whereToFindDatasets-v001.html#google-dataset-search",
    "title": "37  Where to find datasets",
    "section": "37.4 Google dataset search",
    "text": "37.4 Google dataset search\nGoogle search engine for datasets: https://datasetsearch.research.google.com/",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Where to find datasets</span>"
    ]
  },
  {
    "objectID": "0000300-whereToFindDatasets-v001.html#kaggle",
    "href": "0000300-whereToFindDatasets-v001.html#kaggle",
    "title": "37  Where to find datasets",
    "section": "37.5 Kaggle",
    "text": "37.5 Kaggle\nhttps://www.kaggle.com/datasets\nThis is a popular website for machine learning and data science competitions, projects and tutorials. There are many datasets hosted on this platform",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Where to find datasets</span>"
    ]
  },
  {
    "objectID": "0000310-whereToFindApis-v001.html",
    "href": "0000310-whereToFindApis-v001.html",
    "title": "38  Where to find APIs",
    "section": "",
    "text": "39 How to use APIs\nSee this video https://www.youtube.com/watch?v=8tilyqp4bZY\nYou can use the curl command line tool to get info from the APIs too.\nNote that the following was compiled circa January 2025.\nThere is a incredible amount of data that can be accessed online by using an API. Some APIs are free to use but many will require some form of payment. Unfortunately, every API has its own set of rules and regulations. You must read the documentation for each API to understand what type of data is available through the API, how to use the API and how much it may cost.\nIn the past it was possible to go to “API Directory” website and “API Hubs” to find APIs. For example, see the following.\nHowever, the API landscape has changed a lot in recent years. There are so many APIs, it has become almost impossible to maintain a list of available APIs. Many companies have an API that make their services available programatically via APIs. However, these services are hard to find if you don’t know what to look for. Many companies maintain a “developers” portion of their websites. You can also look for “API” in the fineprint of the website info.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Where to find APIs</span>"
    ]
  },
  {
    "objectID": "0000310-whereToFindApis-v001.html#packages-in-r-for-specific-apis",
    "href": "0000310-whereToFindApis-v001.html#packages-in-r-for-specific-apis",
    "title": "38  Where to find APIs",
    "section": "39.1 Packages in R for specific APIs",
    "text": "39.1 Packages in R for specific APIs\nUsually, accessing data from an API requires a technical understanding about how to use APIs in general. However, there are many R packages that make the process of accessing data from specific APIs much easier. These R packages “wrap” the technical details of how to access the API in R functions.\nTo get an idea of what APIs have R packages, you can search the list packages on CRAN (https://cran.r-project.org/web/packages/available_packages_by_name.html) for the word API.\n\n# Find the number of packages that have the letters API in \n# the package name or in the description.\nif(!require(rvest)){install.packages(\"rvest\");require(rvest);}\n\nLoading required package: rvest\n\nurl = \"https://cran.r-project.org/web/packages/available_packages_by_name.html\"\npage = read_html(url)\ntables = html_elements(page, \"table\")\npkgs = as.data.frame(html_table(tables[[1]]))\n\nnames(pkgs) = c(\"package\", \"description\")\nrows = grepl(\"API\", pkgs[,\"package\"], ignore.case = TRUE) | \n       grepl(\"API\", pkgs[,\"description\"], ignore.case = TRUE)\n\nnumberOfApiPackages = sum(rows)\n\nAs of the date this document was compiled there were 603 packages on CRAN that have the letters API in either the name of the package or the description.\nHowever, be aware that the API ecosystem can change rapidly and the R packages don’t always keep up. For example, twitter used to allow searching for tweets for free using their API. However, they started charging for those services. There are many youtube videos explaining how to search twitter for free using the twitter api via the “twittR” packager. These videos are no longer applicable.\n\n39.1.1 R for finance\nBelow are some R resources for working with financial data Feb 2, 2024\nR package for financial data - getting, charting, modeling\n\ngithub: (this seems to be the most up to date info)\nhttps://github.com/joshuaulrich/quantmod\nwebsite: (this seems VERY out of date - but it’s much easier to get a quick idea of what is possible circa 2009. For more up to date info look at the github page or the official documentation accessible from the CRAN website) https://www.quantmod.com/\nhttps://www.quantmod.com/examples/intro/\n“official” documentation from the “Comprehensive R Archive Network (CRAN)” website\nhttps://cran.r-project.org/web/packages/quantmod/index.html\n\nRelated R package for doing technical analysis\n\nhttps://github.com/joshuaulrich/TTR",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Where to find APIs</span>"
    ]
  },
  {
    "objectID": "0000310-whereToFindApis-v001.html#apis",
    "href": "0000310-whereToFindApis-v001.html#apis",
    "title": "38  Where to find APIs",
    "section": "39.2 APIs",
    "text": "39.2 APIs\nYou learn about many different APIs via this website https://rapidapi.com/collection/amazon-products",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Where to find APIs</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html",
    "href": "0999000-toDo-v001.html",
    "title": "39  Additional topics",
    "section": "",
    "text": "39.1 Importing Data\nhttps://rafalab.dfci.harvard.edu/dsbook-part-1/R/importing-data.html",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#importing-data",
    "href": "0999000-toDo-v001.html#importing-data",
    "title": "39  Additional topics",
    "section": "",
    "text": "39.1.1 Excel\nRead excel file with formulas in cells into R\nhttps://stackoverflow.com/questions/32014692/read-excel-file-with-formulas-in-cells-into-r\nXLConnect\nhttps://www.rdocumentation.org/packages/XLConnect/versions/1.0.8/topics/getCellFormula-methods https://cran.r-project.org/web/packages/XLConnect/vignettes/XLConnect.pdf https://financetrain.com/using-xlconnect-in-r-programming",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#using-ai-to-code",
    "href": "0999000-toDo-v001.html#using-ai-to-code",
    "title": "39  Additional topics",
    "section": "39.2 Using AI to code",
    "text": "39.2 Using AI to code\nUsing Gihub Copilot with RStudio\nhttps://www.youtube.com/watch?v=t7NrkAeosog&list=PLSjaBj3ul8GpuMUaSGME2_NomnIsYWIDj",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#apis",
    "href": "0999000-toDo-v001.html#apis",
    "title": "39  Additional topics",
    "section": "39.3 APIs",
    "text": "39.3 APIs\nHow to work with APIs uing R (httr2 package tutorial) https://www.youtube.com/watch?v=8tilyqp4bZY\nTrends in API world https://www.forbes.com/sites/forbestechcouncil/2024/02/07/four-trends-shaping-apis-in-2024/?sh=14a432ea3369",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#online-books",
    "href": "0999000-toDo-v001.html#online-books",
    "title": "39  Additional topics",
    "section": "39.4 Online books",
    "text": "39.4 Online books\nIntroduction to Data Science Data Wrangling and Visualization with R\nhttps://rafalab.dfci.harvard.edu/dsbook-part-1/\nAdvanced Data Science Statistics and Prediction Algorithms Through Case Studies\nhttps://rafalab.dfci.harvard.edu/dsbook-part-2/",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#online-exercises-and-other-resources",
    "href": "0999000-toDo-v001.html#online-exercises-and-other-resources",
    "title": "39  Additional topics",
    "section": "39.5 Online exercises and other resources",
    "text": "39.5 Online exercises and other resources\nhttps://docs.dodona.be/en/ https://dodona.be/en/activities/?tab=all&programming_language=R\nhttps://financetrain.com/using-xlconnect-in-r-programming",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  }
]