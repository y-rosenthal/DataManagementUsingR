[
  {
    "objectID": "0000310-whereToFindApis-v001.html",
    "href": "0000310-whereToFindApis-v001.html",
    "title": "43  Where to find APIs",
    "section": "",
    "text": "44 How to use APIs\nSee this video https://www.youtube.com/watch?v=8tilyqp4bZY\nYou can use the curl command line tool to get info from the APIs too.\nNote that the following was compiled circa January 2025.\nThere is a incredible amount of data that can be accessed online by using an API. Some APIs are free to use but many will require some form of payment. Unfortunately, every API has its own set of rules and regulations. You must read the documentation for each API to understand what type of data is available through the API, how to use the API and how much it may cost.\nIn the past it was possible to go to “API Directory” website and “API Hubs” to find APIs. For example, see the following.\nHowever, the API landscape has changed a lot in recent years. There are so many APIs, it has become almost impossible to maintain a list of available APIs. Many companies have an API that make their services available programatically via APIs. However, these services are hard to find if you don’t know what to look for. Many companies maintain a “developers” portion of their websites. You can also look for “API” in the fineprint of the website info.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Where to find APIs</span>"
    ]
  },
  {
    "objectID": "0000310-whereToFindApis-v001.html#packages-in-r-for-specific-apis",
    "href": "0000310-whereToFindApis-v001.html#packages-in-r-for-specific-apis",
    "title": "43  Where to find APIs",
    "section": "44.1 Packages in R for specific APIs",
    "text": "44.1 Packages in R for specific APIs\nUsually, accessing data from an API requires a technical understanding about how to use APIs in general. However, there are many R packages that make the process of accessing data from specific APIs much easier. These R packages “wrap” the technical details of how to access the API in R functions.\nTo get an idea of what APIs have R packages, you can search the list packages on CRAN (https://cran.r-project.org/web/packages/available_packages_by_name.html) for the word API.\n\n# Find the number of packages that have the letters API in \n# the package name or in the description.\nif(!require(rvest)){install.packages(\"rvest\");require(rvest);}\n\nLoading required package: rvest\n\nurl = \"https://cran.r-project.org/web/packages/available_packages_by_name.html\"\npage = read_html(url)\ntables = html_elements(page, \"table\")\npkgs = as.data.frame(html_table(tables[[1]]))\n\nnames(pkgs) = c(\"package\", \"description\")\nrows = grepl(\"API\", pkgs[,\"package\"], ignore.case = TRUE) | \n       grepl(\"API\", pkgs[,\"description\"], ignore.case = TRUE)\n\nnumberOfApiPackages = sum(rows)\n\nAs of the date this document was compiled there were\n\n\n[1] 602\n\n\npackages on CRAN that have the letters API in either the name of the package or the description.\nHowever, be aware that the API ecosystem can change rapidly and the R packages don’t always keep up. For example, twitter used to allow searching for tweets for free using their API. However, they started charging for those services. There are many youtube videos explaining how to search twitter for free using the twitter api via the “twittR” packager. These videos are no longer applicable.\n\n44.1.1 R for finance\nBelow are some R resources for working with financial data Feb 2, 2024\nR package for financial data - getting, charting, modeling\n\ngithub: (this seems to be the most up to date info)\nhttps://github.com/joshuaulrich/quantmod\nwebsite: (this seems VERY out of date - but it’s much easier to get a quick idea of what is possible circa 2009. For more up to date info look at the github page or the official documentation accessible from the CRAN website) https://www.quantmod.com/\nhttps://www.quantmod.com/examples/intro/\n“official” documentation from the “Comprehensive R Archive Network (CRAN)” website\nhttps://cran.r-project.org/web/packages/quantmod/index.html\n\nRelated R package for doing technical analysis\n\nhttps://github.com/joshuaulrich/TTR",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Where to find APIs</span>"
    ]
  },
  {
    "objectID": "0000310-whereToFindApis-v001.html#apis",
    "href": "0000310-whereToFindApis-v001.html#apis",
    "title": "43  Where to find APIs",
    "section": "44.2 APIs",
    "text": "44.2 APIs\nYou learn about many different APIs via this website https://rapidapi.com/collection/amazon-products",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Where to find APIs</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html",
    "href": "0999000-toDo-v001.html",
    "title": "44  Additional topics",
    "section": "",
    "text": "44.1 Importing Data\nhttps://rafalab.dfci.harvard.edu/dsbook-part-1/R/importing-data.html",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#importing-data",
    "href": "0999000-toDo-v001.html#importing-data",
    "title": "44  Additional topics",
    "section": "",
    "text": "44.1.1 Excel\nRead excel file with formulas in cells into R\nhttps://stackoverflow.com/questions/32014692/read-excel-file-with-formulas-in-cells-into-r\nXLConnect\nhttps://www.rdocumentation.org/packages/XLConnect/versions/1.0.8/topics/getCellFormula-methods https://cran.r-project.org/web/packages/XLConnect/vignettes/XLConnect.pdf https://financetrain.com/using-xlconnect-in-r-programming",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#using-ai-to-code",
    "href": "0999000-toDo-v001.html#using-ai-to-code",
    "title": "44  Additional topics",
    "section": "44.2 Using AI to code",
    "text": "44.2 Using AI to code\nUsing Gihub Copilot with RStudio\nhttps://www.youtube.com/watch?v=t7NrkAeosog&list=PLSjaBj3ul8GpuMUaSGME2_NomnIsYWIDj",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#apis",
    "href": "0999000-toDo-v001.html#apis",
    "title": "44  Additional topics",
    "section": "44.3 APIs",
    "text": "44.3 APIs\nHow to work with APIs uing R (httr2 package tutorial) https://www.youtube.com/watch?v=8tilyqp4bZY\nTrends in API world https://www.forbes.com/sites/forbestechcouncil/2024/02/07/four-trends-shaping-apis-in-2024/?sh=14a432ea3369",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#online-books",
    "href": "0999000-toDo-v001.html#online-books",
    "title": "44  Additional topics",
    "section": "44.4 Online books",
    "text": "44.4 Online books\nIntroduction to Data Science Data Wrangling and Visualization with R\nhttps://rafalab.dfci.harvard.edu/dsbook-part-1/\nAdvanced Data Science Statistics and Prediction Algorithms Through Case Studies\nhttps://rafalab.dfci.harvard.edu/dsbook-part-2/",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0999000-toDo-v001.html#online-exercises-and-other-resources",
    "href": "0999000-toDo-v001.html#online-exercises-and-other-resources",
    "title": "44  Additional topics",
    "section": "44.5 Online exercises and other resources",
    "text": "44.5 Online exercises and other resources\nhttps://docs.dodona.be/en/ https://dodona.be/en/activities/?tab=all&programming_language=R\nhttps://financetrain.com/using-xlconnect-in-r-programming",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Additional topics</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html",
    "href": "0000055-workingWithFiles.html",
    "title": "7  Working with files",
    "section": "",
    "text": "7.1 Download files to work with.\nUse this link to download a set of files in a ZIP file for use with these lessons.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#a-directory-means-the-same-thing-as-a-folder",
    "href": "0000055-workingWithFiles.html#a-directory-means-the-same-thing-as-a-folder",
    "title": "7  Working with files",
    "section": "7.2 A “directory” means the same thing as a “folder”",
    "text": "7.2 A “directory” means the same thing as a “folder”\nThe terms “directory” and “folder” mean exactly the same thing - they’re just two different words for places where we store files on a computer. The word “directory” came first, used in early computer systems in the 1960s. It comes from the word’s original meaning of an organized listing or index, like a phone directory. In the 1980s, when computers started using visual interfaces with icons, Apple introduced the word “folder” because it was more intuitive for regular users - it referenced something familiar that people used to organize paper documents. Today, both terms are used interchangeably, with “folder” being more common in everyday use and “directory” often preferred in technical contexts.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#what-is-a-full-path",
    "href": "0000055-workingWithFiles.html#what-is-a-full-path",
    "title": "7  Working with files",
    "section": "7.3 What is a full path?",
    "text": "7.3 What is a full path?\nA full path is the complete “address” of a file on your computer. Just like two people named Sarah Johnson can live at different addresses (one in Chicago, one in New York), you can have two files with the same name in different directories (i.e. folders).\nFor example, the following are the “full paths” for two different files with the same name, “budget.xlsx”. The full path helps you tell the two files apart by showing exactly where each file is located. Each name between the forward slashes is a folder.\n\nFull path 1: /home/Joe/work/budget.xlsx\nThis file is named “budget.xlsx”. It is in the “work” folder, which is in the folder named “Joe” which is in the “home” folder.\nFull path 2: /home/Sue/personal/budget.xlsx\nThis file is also named “budget.xlsx”. It is in the “personal” folder, which is in the folder named “Sue” which is in the “home” folder, which is in the folder at the very top of the folder hierarchy on the computer.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#relative-paths-vs-full-paths",
    "href": "0000055-workingWithFiles.html#relative-paths-vs-full-paths",
    "title": "7  Working with files",
    "section": "7.4 “relative paths” vs “full paths”",
    "text": "7.4 “relative paths” vs “full paths”\nAnother way to describe which folder a file is in is to use what’s known as a “relative path”. We will describe “relative paths” in detail later. For now, we will stick to use “full paths” as described above. However, one thing should be made absolutely clear now:\nDifference between a “full path” and a “relative path”\nA “full path” always starts with a “/”. A “full path” always starts with a “/”.\nIMPORTANT: MAKE SURE THAT YOU KNOW THIS …\nLater, we will study another type of file path called a relative path. A realtive path is simiilar to a “full path” but a relative path does NOT start with a “/”. We’ll learn more about relative paths later and how they differ from full paths.\n\n7.4.1 Mac and Linux style paths VS Windows style paths\nMac and Linux systems use forward slashes (/) as path separators - i.e.  see the paths above, eg. /home/Joe/work/budget.xlsx\nWindows traditionally uses backslashes (\\) as separators, like this:\n\\\\Users\\\\Joe\\\\work\\\\budget.xlsx\nNote that R understands the Linux/Mac style paths (with forward slashes) even on Windows. It is recommended therefore to always use Linux/Mac style paths in R code so that the code will work on both Linux/Mac and on Windows.\nHowever, since backslashes have a special meaning in R if you need to use Windows-style paths in R, you must use double backslashes (\\), e.g.\ndir_tree(\"\\\\Users\\\\Joe\\\\work\")\n\n\n7.4.2 Windows drive letters\nWindows systems use letters (like C:, D:) at the start of paths to represent different drives or storage devices. The C: drive is typically your main hard drive where Windows is installed. Other letters might be additional hard drives, USB drives, or network drives.\nFor example:\nC:\\Users\\username\\Documents\\file.txt (your main hard drive)\nD:\\Backups\\file.txt (maybe an external drive)\nE:\\Photos\\vacation.jpg (could be a USB drive)\nMac and Linux systems don’t use drive letters. Instead, all hard drives are “mounted” as folders within the single root directory (/). For example, a USB drive might appear at /media/username/USB_DRIVE/. When working in R on Windows, you still need to include the drive letter at the start of full paths, like: “C:/Users/username/Documents/file.txt” (using forward slashes) or \"C:\\Users\\username\\Documents\\file.txt\" (using double backslashes)",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#getwd-and-setwd",
    "href": "0000055-workingWithFiles.html#getwd-and-setwd",
    "title": "7  Working with files",
    "section": "7.5 getwd() and setwd()",
    "text": "7.5 getwd() and setwd()\ngetwd() shows you your current working directory (the folder R is currently working in). Think of it as asking R “where am I right now?” When you try to read or write files without specifying a full path, R will look in this directory. For example, if you run getwd(), it might show something like: “/home/username/projects” (on Mac/Linux) or “C:/Users/username/Documents” (on Windows)\nsetwd() changes your current working directory to a new location. Think of it as telling R “go to this folder.” You need to give it the path of the directory you want to switch to. For example:\nsetwd(\"/home/username/projects\")  # Mac/Linux style\nsetwd(\"C:/Users/username/Documents\")  # Windows style with forward slashes\nIf you give it an invalid path, it will give you an error message.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#list.files-and-dir",
    "href": "0000055-workingWithFiles.html#list.files-and-dir",
    "title": "7  Working with files",
    "section": "7.6 list.files() and dir()",
    "text": "7.6 list.files() and dir()\nThere are two main functions to list files and directories in R: list.files() shows you all files (and folders) in a directory. If you don’t specify a path, it shows the contents of your current working directory. dir() does exactly the same thing as list.files() - they’re just two names for the same function. Some people prefer dir() because it’s shorter to type. Basic usage:\nlist.files()  # list everything in current directory\nlist.files(\"/home/username/data\")  # list everything in a specific directory\nlist.files(pattern = \".csv\")  # list only files ending in .csv\nYou can also use these functions with additional options to get more information or filter the results.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#finding-a-full-path-to-a-specific-file",
    "href": "0000055-workingWithFiles.html#finding-a-full-path-to-a-specific-file",
    "title": "7  Working with files",
    "section": "7.7 Finding a full path to a specific file",
    "text": "7.7 Finding a full path to a specific file\nYou can do this with the built in Windows or Mac tools or by using R functions.\n\n7.7.1 Using “File Explorer” (win) or “Finder” (mac)\nTo find the full path for a file, navigate to it using the “Finder” app on Mac or the “File Explorer” app on Windows. Each of these tools have a way to show you the full path to the file. These features keep changing with different releases of each operating system. Therefore you should search online for how to find the full path of a file using your specific operating system version. The following are some videos that might work for your operating system. If they don’t please search online for specific instructions for your operating system.\n\nWindows 10 - https://www.youtube.com/watch?v=QZUpzuQ0X5I\nMac - https://www.youtube.com/watch?v=Z70-MqAd8oU\n\n\n\n7.7.2 Using the file.choose() or choose.files() R functions\nSee the R documentation for ?file.choose and ?choose.files.\nThese commands open up a window that allows you to choose a file (or files). When you finally select the file (or files) the full path is returned to R.\nIMPORTANT* - The window that opens in response to calling file.choose() or choose.files() can sometimes open up “in back of” RStudio or other programs. This seems to be a bug. If you don’t see the window for choosing the files try minimizing the RStudio window (and possibly other windows) and see if there is a file chooser window in back of RStudio (or other programs).\n\n\n7.7.3 Finding a full path to a “Special folder”\nTo find the full path for a file, navigate to it using the “Finder” app on Mac or the “File Explorer” app on Windows. Each of these tools have a way to show you the full path to the file.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#fs-package",
    "href": "0000055-workingWithFiles.html#fs-package",
    "title": "7  Working with files",
    "section": "7.8 fs package",
    "text": "7.8 fs package\nThe fs package provides modern file system operations in R. It makes working with files and folders more consistent across operating systems (Windows, Mac, Linux) and safer than base R functions. Think of it as a toolkit for handling files - copying, moving, creating directories, checking paths, and viewing directory structures. All functions start with clear prefixes like file_ or dir_ which makes them easy to remember and use. Install it with: install.packages(“fs”)\n\n7.8.1 dir_ls() function\n\n\n7.8.2 dir_tree\ndir_tree() from the fs package displays a directory structure in a visual tree format, similar to how you might see folders indented in a file explorer. It shows the hierarchy of files and folders using lines and indentation. For example, if you run:\nfs::dir_tree(\"my_project\")\nIt might show something like:\nmy_project\n├── data\n│   ├── raw.csv\n│   └── clean.csv\n├── scripts\n│   ├── analysis.R\n│   └── cleaning.R\n└── README.md\nThis makes it easy to visualize how your files and folders are organized. The vertical and horizontal lines show how everything connects, and each level of folders is indented further to the right.\n\n\n7.8.3 Other functions in the fs package\nThe fs package provides modern, user-friendly functions for working with files. Here are some commonly used ones:\nfs::dir_ls() - Lists directory contents (similar to list.files() but with better defaults)\nfs::dir_create() - Creates directories, can create multiple levels at once\nfs::file_copy() - Copies files from one location to another\nfs::file_move() - Moves files from one location to another\nfs::file_delete() - Deletes files\nfs::file_exists() - Checks if files exist\nfs::path() - Builds file paths in a safe, platform-independent way. For example:\nfs::path(“data”, “raw”, “myfile.csv”) # builds “data/raw/myfile.csv”\nNote: You need to install and load the fs package to use these (install.packages(“fs”) and library(fs)). The fs package makes working with files more consistent across operating systems and helps avoid common errors.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#read_csv-and-write_csv",
    "href": "0000055-workingWithFiles.html#read_csv-and-write_csv",
    "title": "7  Working with files",
    "section": "7.9 read_csv and write_csv",
    "text": "7.9 read_csv and write_csv\nread_csv() and write_csv() from the readr package are the standard functions for working with CSV files in modern R: read_csv() loads a CSV file into R as a data frame:\ndata &lt;- read_csv(\"myfile.csv\")\nwrite_csv() saves a data frame to a CSV file:\nwrite_csv(data, \"output.csv\")\nThese functions are faster and have better defaults than the older read.csv() and write.csv() functions from base R. They automatically handle common issues like string encoding and they don’t add row numbers to your output files.\nYou’ll need the readr package installed and loaded to use them: library(readr) (though readr is automatically loaded if you use the tidyverse).",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#readwrite-excel-files",
    "href": "0000055-workingWithFiles.html#readwrite-excel-files",
    "title": "7  Working with files",
    "section": "7.10 Read/Write Excel files",
    "text": "7.10 Read/Write Excel files\nTo work with Excel files in R, you’ll need either the readxl package (for reading) or the writexl package (for writing): Reading Excel files:\nlibrary(readxl)\ndata &lt;- read_excel(\"myfile.xlsx\")\n\n# For specific sheet: \ndata &lt;- read_excel(\"myfile.xlsx\", sheet = \"Sheet2\")\nWriting Excel files:\nlibrary(writexl)\nwrite_xlsx(data, \"output.xlsx\")\nNote that readxl comes with the tidyverse, but writexl needs to be installed separately. These functions work with both newer .xlsx and older .xls files.",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#reading-fixed-width-field-files",
    "href": "0000055-workingWithFiles.html#reading-fixed-width-field-files",
    "title": "7  Working with files",
    "section": "7.11 Reading fixed width field files",
    "text": "7.11 Reading fixed width field files\nUse read_fwf() from the readr package (part of tidyverse) to read fixed-width files where each column takes up a specific number of characters. You specify the width of each field:\nlibrary(readr)\n\n# Define the widths of each column\ndata &lt;- read_fwf(\"myfile.txt\", \n                 fwf_widths(c(5, 10, 15),  # each number is the width of a column\n                           col_names = c(\"id\", \"name\", \"address\")))\n\n# Or specify exact positions\ndata &lt;- read_fwf(\"myfile.txt\",\n                 fwf_positions(start = c(1, 6, 16),  # where each column starts\n                             end = c(5, 15, 30),     # where each column ends\n                             col_names = c(\"id\", \"name\", \"address\")))\nHere’s a simple example. Imagine you have a file named employees.txt that looks like this:\n12345John Smith           123 Main St          \n98765Mary Johnson         456 Oak Ave          \n54321Bob Wilson          789 Pine Rd\nEach line represents an employee record where:\n\nEmployee ID takes exactly 5 characters\nName takes exactly 20 characters (including spaces)\nAddress takes exactly 20 characters\n\nHere’s how to read it:\nrCopylibrary(readr)\n\nemployees &lt;- read_fwf(\"employees.txt\",\n                     fwf_widths(c(5, 20, 20),  # width of each column\n                               col_names = c(\"id\", \"name\", \"address\")))\nThe fwf_widths(c(5, 20, 20)) tells R:\nRead first 5 characters as ‘id’ Read next 20 characters as ‘name’ Read next 20 characters as ‘address’\nThe resulting data frame would look like this:\n# A tibble:\n#      id  name                address            \n#   &lt;chr&gt;  &lt;chr&gt;              &lt;chr&gt;              \n# 1 12345  John Smith         123 Main St        \n# 2 98765  Mary Johnson       456 Oak Ave        \n# 3 54321  Bob Wilson         789 Pine Rd",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#capture-output-of-r-commands",
    "href": "0000055-workingWithFiles.html#capture-output-of-r-commands",
    "title": "7  Working with files",
    "section": "7.12 Capture output of R commands",
    "text": "7.12 Capture output of R commands\n\n7.12.1 capture.output(someCommand, file=“someFile.txt”)\nTo save or “capture” the output from an R command, you can use the capture.output() function. It lets you store text output in a file or in a character vector:\n# Save to a file:\ncapture.output(summary(mydata), file = \"output.txt\")\n\n# Save to a variable:\nmy_output &lt;- capture.output(summary(mydata))",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "0000055-workingWithFiles.html#sinksomefile-sink",
    "href": "0000055-workingWithFiles.html#sinksomefile-sink",
    "title": "7  Working with files",
    "section": "7.13 sink(“someFile”), sink()",
    "text": "7.13 sink(“someFile”), sink()\nThe sink() function is another option - it redirects all output to a file until you turn it off:\nsink(\"output.txt\")\nprint(summary(mydata))\nsink()  # turns off the redirection",
    "crumbs": [
      "Working with files",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "intro00120-files.html",
    "href": "intro00120-files.html",
    "title": "2  Working with files",
    "section": "",
    "text": "2.1 Mac Finder and Windows File Explorer\nThe Finder app on Mac and the File Explorer app on Windows are used to navigate the files on your computer. You should become familiar with how to use those apps on your computer. For more info search online. Youtube videos are often a good way to learn about how to use these features.",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "intro00120-files.html#filename-extensions",
    "href": "intro00120-files.html#filename-extensions",
    "title": "2  Working with files",
    "section": "2.2 Filename extensions",
    "text": "2.2 Filename extensions\n\n2.2.1 What is a filename extension?\nA filename extension is the portion of the filename that appears after the final period. For example, in the file LetterToBob.docx, the filename extension is .docx. In a file named finances.xlsx, the filename extension is .xlsx.\n\n\n2.2.2 A filename extension indicates which program should be used to open a file\nModern Microsoft Word documents have a .docx filename extensions (older versions of Microsoft Word used a .doc extension).\nModern Microsoft Excel documents have a .xlsx filename extension (older versions of Excel used a .xls extension).\nWhen you double click on a file, that file is often opened inside a particular program. Most modern operating systems use the filename extension to determine which program to use with the file. For example files that end with .xlsx are typically automatically opened up in Excel and files that end with .docx are typically automatically opened up in Microsoft Word.\nOpening a file with the wrong program usually leads to problems. For example, if you try to open an Excel file with Microsoft Word or a Word file with Excel, the program that you opened will not be able to use the file correctly.\n\n\n2.2.3 Some files can be opened with different programs.\nYou typically would open a .docx file with Microsoft Windows. However, other programs exist that can also be used to open a .docx file. For example these other programs can also work with .docx files:\n\nLibreOffice Writer - Open-source software that can edit .docx files.\nWPS Office Writer - A lightweight alternative with .docx compatibility.\nApple Pages - Supports .docx on macOS and iOS.\nOnlyOffice - Free and online office suite for .docx editing.\nZoho Writer - Cloud-based editor with .docx support.\nSoftMaker FreeOffice - Free software supporting .docx files.\n\nIf you have more than one of these programs installed on your computer, one of them will be the “default” program to open when you double click on a .docx file. Both Mac and Windows computers have a way to configure which is the default program for each filename extension. The specifics of how to do so often change with different releases of an operating system. For info about how to do so on your computer, please search online with your favorite search engine or AI.\n\n\n2.2.4 How come I can’t see filename extensions\nChanging a filename extension can cause the computer to open up the wrong program when you double click on the filename. Many non-technical users are not aware of this and might inadvertantly change the filename extension without understanding the ramifications. For this reason, on new Windows and Mac computers, the filename extensions are usually hidden from view. The filename extensions exist, they are just hidden from view. There is always a way to show (or hide) the filename extensions. However, different versions of Windows and Mac OS provide different ways to do this.\nSearch online for instructions on how to either show or hide filename extensions on your computer.",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "intro00120-files.html#zip-files",
    "href": "intro00120-files.html#zip-files",
    "title": "2  Working with files",
    "section": "2.3 ZIP files",
    "text": "2.3 ZIP files\nA ZIP file is a single file that contains multiple files.\n\n2.3.1 How to create a ZIP file?\nSearch online for info for your operating system.\nFor example “how can I create a ZIP file from a specific folder on Windows 11”\n\n\n2.3.2 How to “unzip”, i.e. extract the files, from a ZIP file?\nSearch online for info for your operating system.\nFor example “how can I unzip a zip file on Mac Sequoia”.",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Working with files</span>"
    ]
  },
  {
    "objectID": "intro00100-operatingSystems.html",
    "href": "intro00100-operatingSystems.html",
    "title": "1  What is an “operating system”",
    "section": "",
    "text": "1.1 Operating Systems (Mac, Windows, Linux)\nBefore going into detail about how to work with files in R it is helpful to have some background regarding operating systmes (keep reading).",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What is an \"operating system\"</span>"
    ]
  },
  {
    "objectID": "intro00100-operatingSystems.html#operating-systems-mac-windows-linux",
    "href": "intro00100-operatingSystems.html#operating-systems-mac-windows-linux",
    "title": "1  What is an “operating system”",
    "section": "",
    "text": "1.1.1 An Operating System (OS) is the software that controls a computer\nAn operating system (OS for short) is the software that controls how a computer operates. Windows and Mac OS (i.e. Mac Operating System) are two very popular operating systems for personal computers.\nAnother operating system is Linux. This OS is often used to run backoffice computer systems, i.e. the computer systems that keep many critical business operations working - e.g. that keep websites working. Linux is also a popular option with many technical users for their own personal computers.\nWHile all operating systems allow you to control a computer, there are differences between operating systems when it comes to the exact ways to accomplish some tasks.\n\n\n1.1.2 Smartphones have operating systems too\nSmartphones are basically small computers. Therefore smartphones have operating systmes too. The very popular ones today are Android and Apple iOS (this is the operating system found on Apple iPhones).\n\n\n1.1.3 Mac and Linux are similar in a lot of ways\nBoth Mac and Linux were derived from an older operating system known as Unix. (Unix still exists but has largely been replaced by Linux). For this reason, Mac OS and Linux often do things the same way, while Microsoft Windows might be a little different from both of them. Keep this in mind as we go through this course. It is often the case that what will work on Mac also works on Linux and vice versa.\n\n\n1.1.4 Flavors of Linux\nLinux is “open source” software. That means that no one company owns Linux. The product is freely available for anyone to modify and release their own version. Therefore there are many different “flavors” of Linux. The different flavors of Linux share many similarities but are all different in one way or another. This is similar to how each car company has their own “flavor” of SUV. If you know how to drive one SUV, you can probably drive any SUV. However, the different car companies differentiate themselves with different slight details in the products.\nAs of today (Jan 2025) some of the popular flavors of Linux include:\n\nUbuntu\nDebian\nRed Hat Linux\nCentos\nthere are many, many, many other flavors of Linux with more coming out all the time.\n\n\n\n1.1.5 Know your OS version number\nOperating systems are constantly being updated and improved. When looking online for info about your computer or phone it often helps a lot to include the version number for your operating system. For example,\n\nIf you’re looking for info about how to start the “File Manager” program (see below) on Windows, don’t just search for “How do I start the file manager program”, rather search for “how do I start the file manager program on WINDOWS 11” (or Windows 10, etc.)\nSimilarly, if you’re looking for info about how to start the “Finder” program (see below) on Mac, don’t just search for “How do I start the finder program”, rather search for “how do I start the finder program on Mac OS Sequoia”\nIf you don’t know how to find your OS version number, I recommend that you search for that on your favorite search engine (e.g. google) or on your favorite AI tool (e.g. chatgpt). For example, “how do I find out exactly what version number of Mac OS I have”?\nNOTE: (as of today, to find the OS version on Mac, click the “apple button” at the top left of your menus and choose “About This Mac”.",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>What is an \"operating system\"</span>"
    ]
  },
  {
    "objectID": "intro00130-chromeExtensions.html",
    "href": "intro00130-chromeExtensions.html",
    "title": "3  Chrome Extensions",
    "section": "",
    "text": "3.1 Try it yourself",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Chrome Extensions</span>"
    ]
  },
  {
    "objectID": "intro00130-chromeExtensions.html#try-it-yourself",
    "href": "intro00130-chromeExtensions.html#try-it-yourself",
    "title": "3  Chrome Extensions",
    "section": "",
    "text": "Try installing an using the “google dictionary” chrome extention\nTry installing an using the “google translate” chrome extention",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Chrome Extensions</span>"
    ]
  },
  {
    "objectID": "intro00130-chromeExtensions.html#using-other-browsers",
    "href": "intro00130-chromeExtensions.html#using-other-browsers",
    "title": "3  Chrome Extensions",
    "section": "3.2 Using other browsers",
    "text": "3.2 Using other browsers\nChrome extensions may work in other browsers as well, but Chrome is the best option to make sure that the extension works as intended.\nThe following was generated by chatgpt on Jan 22, 2025 - As with all info generated by AI today, this may not be totally accurate. Proceed at your own risk :)\n\n Me: can i install a chrome extension in other browsers ?\nChatGPT said: Yes, many browsers support Chrome extensions, but compatibility depends on the browser:\n\nMicrosoft Edge: Directly supports Chrome extensions. Go to the Edge Add-ons Store, enable extensions from other stores, and install from the Chrome Web Store.\nOpera: Requires the “Install Chrome Extensions” add-on to enable Chrome extensions.\nBrave: Fully supports Chrome extensions without additional steps. Install them from the Chrome Web Store.\nVivaldi: Supports Chrome extensions. Install them directly from the Chrome Web Store.\nFirefox: Does not natively support Chrome extensions. Extensions must be specifically built or converted for Firefox.\nFor non-Chromium-based browsers, like Safari or Firefox, Chrome extensions won’t work directly without conversion or dedicated versions.",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Chrome Extensions</span>"
    ]
  },
  {
    "objectID": "intro00130-chromeExtensions.html#developing-your-own-chrome-extensions",
    "href": "intro00130-chromeExtensions.html#developing-your-own-chrome-extensions",
    "title": "3  Chrome Extensions",
    "section": "3.3 Developing your own Chrome Extensions",
    "text": "3.3 Developing your own Chrome Extensions\nUsing modern AI, it is often possible to develop your own custom Chrome extensions. We will not go into that here, but the adventurous are free to experiment on your own.\nWhile under development a Chrome extension consists of several files in a folder. Once the coding of the Chrome extension has been completed, the entire folder with all of the necessary files can be compressed into a single zip file. It is this zip file that can be upladed to the Chrome Extension store.\n\n3.3.1 “unpacked” Chrome extensions\nWhile under development, a Chrome extension can still be installed in Chrome without needing to ZIP up the folder. Follow the instructions here to use a chrome extension that is still under development. You will need to\n\nunzip the folder if it is zipped\nnavigate to the url chrome://extensions\nClick the “developer mode” switch\nClick “load unpacked”\n\nChrome extensions are created using standard web development languages (i.e. HTML, CSS, Javascript).\nYou can follow the instructions in this video:\nhttps://www.youtube.com/watch?v=yNFwFQrc27Q",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Chrome Extensions</span>"
    ]
  },
  {
    "objectID": "intro00130-chromeExtensions.html#using-the-yrwebsnip-chrome-extension",
    "href": "intro00130-chromeExtensions.html#using-the-yrwebsnip-chrome-extension",
    "title": "3  Chrome Extensions",
    "section": "3.4 Using the yrWebSnip chrome extension",
    "text": "3.4 Using the yrWebSnip chrome extension\n\n3.4.1 Download the code for the extension\n\nGo here https://github.com/y-rosenthal/yrWebSnap\nClick on the “&lt;&gt; Code” button and choose “Download ZIP”\nUnzip the file to a folder (search online if you don’t know how to do that)",
    "crumbs": [
      "Some computer basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Chrome Extensions</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html",
    "href": "0000022-InstallingRPackages-v003.html",
    "title": "4  Intro to R packages",
    "section": "",
    "text": "4.1 What is CRAN?\nCRAN stands for the “Comprehensive R Archive Network”.\nR is free software that is supported by many different organizations. The official website for “R” is https://cran.r-project.org/. From this website you can download the “base R” software. This is also the official source of many things related to R. (NOTE that information about RStudio is NOT found on this website. RStudio is a program created by a for-profit company, Posit. The RStudio software is built on top of “base R”. The official website for RStudio is https://posit.co/)\nThe list of “officially recognized” R packages can be found here: https://cran.r-project.org/web/packages/available_packages_by_name.html From this page, you can get a lot more information about each of the different packages. To learn more about packages in general, click on the “packages” link located on this page https://cran.r-project.org/.",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#what-is-a-cran-mirror",
    "href": "0000022-InstallingRPackages-v003.html#what-is-a-cran-mirror",
    "title": "4  Intro to R packages",
    "section": "4.2 What is a CRAN mirror?",
    "text": "4.2 What is a CRAN mirror?\nIt can cost a lot of money to maintain a popular website. Since R is a free program, the costs for hosting the offical website are divided among many of the organizations that have an interest in seeing R succeed. (Many of these organizations are educational institutions located around the world). Each of these organizations hosts a complete repository of the “base R” software as well as all of the R packages. All of the repositories together are known as CRAN, i.e. the “Comprehensive R Archive Network”. Because the repositories hosted by each organization have identical contents, the repositories are also known as “CRAN mirrors”. Whenever you install an R package (see install.packages below), the files for the package are downloaded from one of the CRAN mirror websites.",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#install.packages-some_package",
    "href": "0000022-InstallingRPackages-v003.html#install.packages-some_package",
    "title": "4  Intro to R packages",
    "section": "4.3 install.packages( “SOME_PACKAGE” )",
    "text": "4.3 install.packages( “SOME_PACKAGE” )\nTo use a package you must first “install” the package with the install.packages function. install.packages downloads the package files from one of the CRAN mirror websites and installs them on your computer.\nYou only need to use install.packages on your computer once. After you’ve installed a package it will continue to be installed until you until you “remove” it from your computer with the function remove.packages().\nSee an example of installing the stringr package below. Pay special attention the the #comments in the code.\n\n# When calling install.packages, you must use \"quotes\" around the package name.\ninstall.packages(\"stringr\")   \n\nError in contrib.url(repos, \"source\"): trying to use CRAN without setting a mirror\n\n# By default, install.packages will choose one of the CRAN mirror websites to \n# download the package from. The exact CRAN mirror website that it uses\n# is configured in your R software. However, if for some reason, it fails\n# to download from the default CRAN mirror website, you will need to \n# specify the exact CRAN mirror URLs in the repos argument as shown below.\n#\n# If you specify more than one website, install.packages will keep trying, \n# starting from the first one specified, until it is successful. The \n# following page contains the list of the CRAN mirror websites:\n#\n#    https://cran.r-project.org/mirrors.html\n#\n# It makes very little difference which mirror you choose. In order to \n# speed up the downloads it's recommended to choose a mirror that is \n# close to where you are located. The following command specifies the full\n# list of mirrors that are located in the USA.\n\ninstall.packages(\n  \"stringr\", \n  repos = c(\n    \"https://mirror.las.iastate.edu/CRAN/\",       # Iowa State University, Iowa\n    \"http://ftp.ussg.iu.edu/CRAN/\",               # Indiana University, Indiana\n    \"https://repo.miserver.it.umich.edu/cran/\", # University of Michigan\n    \"https://cran.wustl.edu/\",              # Washington University, Missouri\n    \"https://archive.linux.duke.edu/cran/\", # Duke University, NC\n    \"https://cran.case.edu/\",               # Case Western Reserve University, OH\n    \"https://ftp.osuosl.org/pub/cran/\",     # Oregon State University\n    \"http://lib.stat.cmu.edu/R/CRAN/\",    # Carnegie Mellon University, PA\n    \"https://cran.mirrors.hoobly.com/\",     # Hoobly Classifieds, PA\n    \"https://mirrors.nics.utk.edu/cran/\") # Nat. Inst. 4 Computational Sci, TN \n)\n\npackage 'stringr' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yrosenth\\AppData\\Local\\Temp\\Rtmp8mAZWN\\downloaded_packages",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#help-for-the-package.",
    "href": "0000022-InstallingRPackages-v003.html#help-for-the-package.",
    "title": "4  Intro to R packages",
    "section": "4.4 Help for the package.",
    "text": "4.4 Help for the package.\nOnce you’ve installed the package you can access the help pages for the package with the following command:\n\nhelp(package=“SOME_PACKAGE”)\n\n\n##############################################################################.\n# To see the functions in the package use the following command\n##############################################################################.\nhelp(package=\"stringr\")\n\nTo see examples of how to use a specific function. Click on the “Run examples” link that appears at the bottom of the help page. Try this for the following functions in the stringr package:\n\nstr_trunc\nstr_split",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#using-a-package-without-loading-it.",
    "href": "0000022-InstallingRPackages-v003.html#using-a-package-without-loading-it.",
    "title": "4  Intro to R packages",
    "section": "4.5 Using a package without “loading” it.",
    "text": "4.5 Using a package without “loading” it.\nBelow you will learn how to “load” a package using the library and require functions. This functions make it easier to use a package. However, even before you “load” a package, you can still use it by specifying\nPACKAGE_NAME::FUNCTION_NAME(ARGUMENTS,GO,HERE) when you call the function.\nSee the example below:\n\n# After installing a package you can use the functions by specifying \n# the name of the package and the function as shown in the \n# example below. This example uses the str_trunc and the str_split\n# functions. Both of these functions are included in the stringr package.\n#\n# The str_trunc function \"truncates\" or \"chops off the end\" of long strings. \n# The str_split function splits up strings .\n#\n# See the documentation for more info about these functions:\n# help(package=\"stringr\")\n\n# Create a vector.\nsayings = c(\"roses are red, violets are blue\", \n            \"a stitch in time saves nine\")\n\n# Chop off each of the strings after in the vector after the 25th character\nstringr::str_trunc(sayings, width=25)\n\n[1] \"roses are red, violets...\" \"a stitch in time saves...\"\n\n# Split the words in each of the strings. This function returns a list.\nstringr::str_split(sayings, pattern=\" \")\n\n[[1]]\n[1] \"roses\"   \"are\"     \"red,\"    \"violets\" \"are\"     \"blue\"   \n\n[[2]]\n[1] \"a\"      \"stitch\" \"in\"     \"time\"   \"saves\"  \"nine\"",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#loading-packages---library-or-require",
    "href": "0000022-InstallingRPackages-v003.html#loading-packages---library-or-require",
    "title": "4  Intro to R packages",
    "section": "4.6 loading packages - library() or require()",
    "text": "4.6 loading packages - library() or require()\n\n4.6.1 library(SOME_PACKAGE)\n\n# In the example above, to run the functions we used the syntax\n# PACKAGENAME::FUNCTIONNAME(), e.g. stringr::str_trunc( ARGUMENTS GO HERE )\n#\n# At this point, if you try to run the function without the package name you\n# will get an error, e.g. str_trun( ARGUMENTS GO HERE ) \n#\n# Compare the command below with the similar command above.\n\n# ERROR - function str_trunc not found.\nstr_trunc(sayings, width=25)\n\nError in str_trunc(sayings, width = 25): could not find function \"str_trunc\"\n\n# ERROR - function str_trunc not found.\nstr_split(sayings, pattern=\" \")\n\nError in str_split(sayings, pattern = \" \"): could not find function \"str_split\"\n\n\nThe reason why you get an error in the code above is because, while the package was “installed” on your computer, R doesn’t know to look in that package for functions.\nThe library function, e.g. library(stringr), tells R to add the package to the list of packages that R looks through to find functions. This allows you to call functions in a package without specifying the package name. For example, after calling library(stringr) you may call any of the functions in the stringr package without needing to specify the word stringr.\n\n# you don't need quotes\nlibrary(stringr)   \n\n# You can now call any functions in the stringr package without \n# specifying stringr::\n\n# Now it works without prefixing the function calls with stringr::\nstr_trunc(sayings, width=25)\n\n[1] \"roses are red, violets...\" \"a stitch in time saves...\"\n\nstr_split(sayings, pattern=\" \")\n\n[[1]]\n[1] \"roses\"   \"are\"     \"red,\"    \"violets\" \"are\"     \"blue\"   \n\n[[2]]\n[1] \"a\"      \"stitch\" \"in\"     \"time\"   \"saves\"  \"nine\"  \n\n\n\n\n4.6.2 install.packages vs library\nAs we said above, you only need to call install.packages(SOME_PACKAGE) once. Even if you reboot your computer, the package will still be installed.\nHowever, you need to call library(SOME_PACKAGE) every time you restart R if you want to be able to use the functions in the package without specifying the package name every time you call a function.\n\n\n4.6.3 require(SOME_PACKAGE)\nThere is another function, require(SOME_PACKAGE), that basically accomplishes the same thing as the library(SOME_PACKAGE) function (the differences between library and require are explained below). You may use either library or require. You never need to use both. For example, the commands below are an alternative to the commands shown above.\n\n#  Just like with library, after calling require(stringr) you no longer\n#  need to specify stringr:: before calling a function.\n\n#require(stringr)\n\n#str_trunc(c(\"roses are red, violets are blue\", \"a stitch in time saves nine\"),\n#              width = 25)\n\n# Now you can continue to call any functions from the stringr package \n# without specifying stringr::\n\n\n\n4.6.4 Calling library or require more than once is fine.\nIn case you were wondering, if you call library(SOME_PACKAGE) or require(SOME_PACKAGE) once and then call one of these functions again, nothing happens the 2nd time. No errors or warnings are generated.\n\n\n4.6.5 The difference between library and require\nThe difference between library(SOME_PACKAGE) vs require(SOME_PACKAGE) is regarding the return value of library vs require.\nBy default library and require do not display their return values - they have “invisible” return values. However, while the return values are not displayed, they do exist. To see an “invisible” return value you can either capture the return value in a variable. For example:\n\n# The return value of library is the vector of packages that have have \n# already been \"loaded\". Note that there are some packages that are \n# automatically loaded when you start R without you needing to \n# run the library/require command.\n\nreturnValue = library(stringr)\n\n# show the names of the loaded packages\nreturnValue\n\n[1] \"stringr\"   \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     \"datasets\" \n[7] \"methods\"   \"base\"     \n\n# The require function returns a very different value.\n# The require function returns TRUE if the packages was loaded\n# successfully and returns FALSE otherwise. \n\nreturnValue = require(stringr)\nreturnValue\n\n[1] TRUE\n\n# One common reason for a package NOT loading successfully\n# is if the package hadn't been installed yet (using install.packages).\n# For example, the \"glue\" package contains some useful functions but we\n# haven't installed the glue package yet. Therefore the following\n# call to require will return FALSE. \n\nreturnValue = require(glue)   # FALSE - we haven't installed glue yet\n\nLoading required package: glue\n\n\n\n\n4.6.6 See invisible return values by using (parentheses)\n\n# Note you can also see the \"invisible\" return values by simply\n# surrounding the function calls with (parentheses). For example\n\nlibrary(stringr)   # return value is invisible\nrequire(stringr)   # return value is invisible\n\n(library(stringr))   # use (parentheses) to see the return value\n\n[1] \"glue\"      \"stringr\"   \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n(require(stringr))   # use (parentheses) to see the return value\n\n[1] TRUE\n\n\n\n\n4.6.7 installing and loading the package in one line of code\nSome packages can take a while to install. Therefore you usually don’t want to install a package more than once. You can use the return value from require to write code that only installs the package if the call to require fails. For example\nNote that you can run several R commands in a single line by putting a semicolon between those commands. Similarly you can write a function on a single line. Therefore the following example shows how you can use a single line of code to install the package only if necessary and to then load the package. This type of code is very convenient to put at the top of .R files.\n\n# First try to load stringr with the require function.\n# If stringr is not installed, then require will return FALSE.\n#\n# Only if require returns FALSE will stringr be installed.\n# After it is installed the require function is called again to make sure \n# that the package is loaded.\n\nif(!require(stringr)){install.packages(\"stringr\");require(stringr)}\n\n# Now you should be able to use any function from stringr without specifying\n# stringr::\nstr_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#unloading-and-removing-packages",
    "href": "0000022-InstallingRPackages-v003.html#unloading-and-removing-packages",
    "title": "4  Intro to R packages",
    "section": "4.7 unloading and removing packages",
    "text": "4.7 unloading and removing packages\nIt’s not usually necessary, but it is possible to unload packaes or remove packages entirely from your computer.\nYou may want to unload a package (without uninstalling it) if the name of a function in the package is interfering with another package that has a function with the same name.\nYou may want to uninstall a package to make room on your hard drive.\n\n4.7.1 detach(“package:PACKAGE_NAME”, unload=TRUE)\nThe “opposite” of libarary(SOME_PACKAGE) and require(SOME_PACKAGE) is detach(“package:PACKAGE_NAME”, unload=TRUE). See the documentation for more info : ?detach To call it you must specify the word “package” before the actual package name. See the example below:\n\n###################################.\n# Package is already loaded\n###################################.\n\n# We loaded stringr above (with library or require) so this works\nstr_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\n# and so does this ... (but it's unnecessary to specify the package)\nstringr::str_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\n###################################.\n# Detaching the package ...\n###################################.\ndetach(package:stringr, unload=TRUE)\n\n# Since we detached the package the function will not work without \n# specifying the name of the package:\n\n# This doesn't work now\nstr_trunc(\"An apple a day keeps the doc away\", 18)\n\nError in str_trunc(\"An apple a day keeps the doc away\", 18): could not find function \"str_trunc\"\n\n# However, this does:\nstringr::str_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\n###################################.\n# loading the package again ...\n###################################.\n\n# loading the package again ...\nlibrary(stringr)  # or reqruire(stringr)\n\n# once again, both commands work:\nstr_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\nstringr::str_trunc(\"An apple a day keeps the doc away\", 18)\n\n[1] \"An apple a day ...\"\n\n\n\n\n4.7.2 remove.packages(SOME_PACKAGE)\nThe “opposite” of install.packages(SOME_PACKAGE) is remove.packages(SOME_PACKAGE) NOT uninstall! See the documentation for more info : ?remove.packages\n\n# What is CRAN?\n# \n# See this - &lt;https://www.youtube.com/watch?v=GM6MCBkVNtQ&gt;",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#vignettes",
    "href": "0000022-InstallingRPackages-v003.html#vignettes",
    "title": "4  Intro to R packages",
    "section": "4.8 vignettes",
    "text": "4.8 vignettes\nVignettes are tutorials on some of a package. These are often a good source of information. To see vignettes for a package that you haven’t installed, look at the “Vignettes” listing on its CRAN page.\nYou can find the CRAN page for a package here and then search for “vignettes” on the page.\n\nhttps://cran.r-project.org/web/packages/available_packages_by_name.html\n\nThe following is the page for the stringr package: &gt; https://cran.r-project.org/web/packages/stringr/index.html\nThe following are some vignettes listed on that page:\n\nhttps://cran.r-project.org/web/packages/stringr/vignettes/from-base.html\n\n\nhttps://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html\n\n\nhttps://cran.r-project.org/web/packages/stringr/vignettes/stringr.html",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000022-InstallingRPackages-v003.html#packages-from-other-sources",
    "href": "0000022-InstallingRPackages-v003.html#packages-from-other-sources",
    "title": "4  Intro to R packages",
    "section": "4.9 Packages from other sources",
    "text": "4.9 Packages from other sources\nR packages can be created by anyone and then be submitted to be hosted on CRAN. The official procedures for doing so can be found by reviewing the information here https://cran.r-project.org/submit.html. There are also books and other sources of information about how to create R packages and submit them to CRAN.\nHowever, a package doesn’t have to be on CRAN to be used. Many software developers create R packages that are distributed in other ways.\ngithub.com is a website that hosts code “repositories”. Software developers often post code on github.com that may be freely downloaded and installed. Often developers of R packages first make the package available on github before the package becomes available on CRAN. Sometimes the package never becomes available on CRAN. Often a package is hosted on both github and CRAN. Often github contains the “bleeding edge” version of\na package while CRAN hosts packages that have been more fully tested.\nOther sites that are similar to github.com are bitbucket, gitlab and others.\nIf you come across a package that is on github, bitbucket, etc that you’d like to install you can do so\nThe “devtools” and “remotes” packages (that are available on CRAN) contain functions, similar to install.packages, that allow you to install R packages directly from repositories such as github, etc. It’s pretty easy to find information online about how to use these packages to install R packages from github, bitbucket, etc.",
    "crumbs": [
      "Intro to R packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Intro to R packages</span>"
    ]
  },
  {
    "objectID": "0000075-whatIsJsonData.html",
    "href": "0000075-whatIsJsonData.html",
    "title": "8  Intro to JSON data",
    "section": "",
    "text": "8.1 What is JSON?\nJSON is pronounced like the name “Jason” or as “j sahn” - either is Acceptable. JSON is a “text” format for storing and distributing data. The following small example shows information about the USA Postal Code (“i.e. zip code”) 60527. Many more examples appear throughout this document.\nA “text” format means that it is written all in ASCII or Unicode. ASCII and Unicode are standard technologies; every computer system has built in tools for working with ASCII and Unicode data. Therefore, JSON can be read and used on any computer system with a simple text editor without the need to install special software to read it. CSV formats are similar in this respect. However, while CSV is suited specifically to storing information that can be arranged into “rows and columns”, the JSON data format is much more flexible in how the data is arranged.\nJSON was originally developed for the JavaScript language. However, today it has become a popular format that is used in many areas of technology. You can process JSON data with R or any other programming language. The name JSON stands for “JavaScript Object Notation:” - but seriously – you do NOT need to know ANY JavaScript to make use of JSON data. Unfortunately, many resources for learning JSON assume knowledge of JavaScript. That really isn’t necessary if you are using JSON in another language. This document describes JSON for people who DO NOT know JavaScript.",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Intro to JSON data</span>"
    ]
  },
  {
    "objectID": "0000075-whatIsJsonData.html#what-is-json",
    "href": "0000075-whatIsJsonData.html#what-is-json",
    "title": "8  Intro to JSON data",
    "section": "",
    "text": "{\n    \"post code\": \"60527\",\n    \"country\": \"United States\",\n    \"places\": [{\n            \"place name\": \"Willowbrook\",\n            \"latitude\": \"41.7447\",\n            \"longitude\": \"-87.9334\",\n            \"state\": \"Illinois\"\n        },\n        {\n            \"place name\": \"Hinsdale\",\n            \"latitude\": \"41.7447\",\n            \"longitude\": \"-87.9334\",\n            \"state\": \"Illinois\"\n        }\n    ]\n}",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Intro to JSON data</span>"
    ]
  },
  {
    "objectID": "0000075-whatIsJsonData.html#some-examples-of-json-data",
    "href": "0000075-whatIsJsonData.html#some-examples-of-json-data",
    "title": "8  Intro to JSON data",
    "section": "8.2 Some Examples of JSON Data",
    "text": "8.2 Some Examples of JSON Data\nThe full rules of how to create a JSON file are listed later. For now, it may help to see some typical examples of what JSON data looks like. The exact explanations of how to format a JSON file appear below the examples.\n\n8.2.1 EXAMPLE 1 - storing the contents of a company “org chart” in JSON format:\nThe following is an “organization chart” for a company. This is NOT in JSON format. One possible JSON format of the data appears below. The chart shows that Sue is the CEO. Frank and Anne report to Sue. Bob, Lisa and Joe report to Frank. etc.\n         Widgets R Us (founded 2022)\n \n                 ---------------Sue (CEO) ------------\n                 |                                   |\n                 |                                   |\n         --Frank (Dir of Operations)---         -----Anne (CFO)-----\n         |             |              |         |                  |\n         |             |              |         |                  |\n         Bob          Lisa          Joe        Pat (CPA)         Pete\n                       |\n                      Larry\n\nONE POSSIBLE JSON ARRANGEMENT OF THIS DATA IN JSON FORMAT\nNote that the JSON shown below repeats some data (i.e. the employee names are repeated in both the particular section for that employee and in the list of “direct reports” for that employee’s mananger). There are other JSON organizations of this data that would not require repeating any data. However, the goal now is not to debate different alternative JSON representations, but rather to give you a flavor of what JSON looks like in general.\n         {\n             \"company name\": \"Widgets R Us\",\n             \"founded\": 2022,\n             \"employees\": [\n                 {\n                     \"name\": \"Sue\",\n                     \"title\": \"CEO\",\n                     \"directReports\": [\"Frank\", \"Anne\"]\n                 },\n                 {\n                     \"name\": \"Frank\",\n                     \"title\": \"Director of Operations\",\n                     \"directReports\": [\"Bob\",\"Lisa\",\"Joe\"]\n                 },\n                 {\n                     \"name\": \"Anne\",\n                     \"title\": \"CFO\",\n                     \"directReports\": [\"Pat\",\"Pete\"]\n                 },\n                 {\n                     \"name\": \"Bob\"\n                 },\n                 {\n                     \"name\": \"Lisa\",\n                     \"directReports\": [\"Larry\"]\n                 },\n                 {\n                     \"name\": \"Joe\"\n                 },\n                 {\n                     \"name\": \"Larry\"\n                 },\n                 {\n                     \"name\": \"Pat\",\n                     \"title\": \"accountant\",\n                     \"certified\": true\n                 },\n                 {\n                     \"name\": \"Pete\",\n                     \"title\": \"accountant\",\n                     \"certified\": false\n                 }\n             ]\n         }\n\n\n\n8.2.2 EXAMPLE 2 - JSON data - books for sale on a website\nThe following example shows a JSON file that contains information about some books.\n     [\n       {\n         \"hardcover\": false,\n         \"title\": \"How to program in R\",\n         \"copyright\": 2017,\n         \"publisher\": {\n           \"pubName\": \"Books R Us\",\n           \"pubWebsite\": \"https://booksrus.com/\"\n         },\n         \"categories\": [\"R\",\"technology\",\"statistics\"],\n         \"author\" : \n           {\n             \"first\": \"Robert\",\n             \"last\": \"Rosen\"\n           }\n       },\n       {\n         \"hardcover\": false,\n         \"title\": \"Python For Perfectionists\",\n         \"copyright\": 2018,\n         \"categories\": [\"Python\", \"technology\"],\n         \"author\" : \n           {\n             \"title\": \"Dr.\",\n             \"first\": \"Sue\",\n             \"last\": \"Smith\"\n           }\n       },\n       {\n         \"hardcover\": true,\n         \"title\": \"Cooking For Programmers\",\n         \"copyright\": 2018,\n         \"categories\": [\"cooking\"],\n         \"author\" : \n           {\n             \"first\": \"Joe\",\n             \"middle\": \"J\",\n             \"last\": \"Johnson\"\n           }\n       }\n     ]",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Intro to JSON data</span>"
    ]
  },
  {
    "objectID": "0000088-nestedDataframes.html",
    "href": "0000088-nestedDataframes.html",
    "title": "11  Nested Dataframes",
    "section": "",
    "text": "A “nested dataframe” can contain",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Nested Dataframes</span>"
    ]
  },
  {
    "objectID": "0000090-usingJsonInR.html",
    "href": "0000090-usingJsonInR.html",
    "title": "12  Using JSON in R",
    "section": "",
    "text": "The jsonlite R pacakge is used to read JSON files into R. The following is the link to the CRAN webpage for the jsonlite package. See the vignettes and reference manual linked there.\n\njsonlite: A Simple and Robust JSON Parser and Generator for R\n\nBelow, I copied the links to some of the vignettes from that page. However, it’s best to check the official CRAN page in case there are modifications or if there are new vignettes added there (this page was compiled in Jan 2025).\n\nIMPORTANT: The following describes how to use the fromJSON and toJSON functions from the jsonlite package. Getting started with JSON and jsonlite\nThe following will be covered later when we discuss APIs:\nFetching JSON data from REST APIs (2022-01-16)\nThe following is nice to know but is something that you can figure out yourself without needing this:\nCombining pages of JSON data with jsonlite (2022-01-16)\nThe following is a more detailed definition of how JSON is converted to R data and how R data is converted to JSON. You should NOT need to look at this but it is nice to know that it is available for reference in case you get stuck.\nA mapping between JSON data and R objects (March 2014)\nThere are some other vignettes on the CRAN page, but you probably don’t need to look at them.",
    "crumbs": [
      "JSON data",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Using JSON in R</span>"
    ]
  }
]